//
// <auto-generated>
//

#pragma warning disable CS8669


using System.Collections;
using System.Collections.ObjectModel;


namespace Sharp.UI
{  
    /// <summary>
    /// A <c>Sharp.UI</c> class wrapping the sealed <c>Microsoft.Maui.Controls.Shapes.PathGeometry</c> class.
    /// Use the <value>MauiObject</value> property to get the raw Maui object.
    /// </summary>
    public partial class PathGeometry : Sharp.UI.IPathGeometry, IMauiWrapper, ISealedMauiWrapper, IList<Microsoft.Maui.Controls.Shapes.PathFigure>
    {
        // ----- maui object -----

        public object _maui_RawObject { get; set; }

        public Microsoft.Maui.Controls.Shapes.PathGeometry MauiObject { get => (Microsoft.Maui.Controls.Shapes.PathGeometry)_maui_RawObject; protected set => _maui_RawObject = value; }

        // ----- constructors -----

        public PathGeometry(Microsoft.Maui.Controls.Shapes.PathGeometry pathGeometry)
        {
            MauiObject = pathGeometry;
        }

        public PathGeometry()
        {
            MauiObject = new Microsoft.Maui.Controls.Shapes.PathGeometry();
        }

        // ----- operators -----

        public static implicit operator PathGeometry(Microsoft.Maui.Controls.Shapes.PathGeometry mauiObject) => new PathGeometry(mauiObject);
        public static implicit operator Microsoft.Maui.Controls.Shapes.PathGeometry(PathGeometry obj) => obj.MauiObject;

        // ----- collection container -----

        public int Count => this.MauiObject.Figures.Count;
        public Microsoft.Maui.Controls.Shapes.PathFigure this[int index] { get => this.MauiObject.Figures[index]; set => this.MauiObject.Figures[index] = value; }
        public bool IsReadOnly => false;
        public void Clear() => this.MauiObject.Figures.Clear();
        public bool Contains(Microsoft.Maui.Controls.Shapes.PathFigure item) => this.MauiObject.Figures.Contains(item);
        public void CopyTo(Microsoft.Maui.Controls.Shapes.PathFigure[] array, int arrayIndex) => this.MauiObject.Figures.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Controls.Shapes.PathFigure> GetEnumerator() => this.MauiObject.Figures.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Controls.Shapes.PathFigure item) => this.MauiObject.Figures.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Controls.Shapes.PathFigure item) => this.MauiObject.Figures.Insert(index, item);
        public bool Remove(Microsoft.Maui.Controls.Shapes.PathFigure item) => this.MauiObject.Figures.Remove(item);
        public void RemoveAt(int index) => this.MauiObject.Figures.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.MauiObject.Figures.GetEnumerator();

        public void Add(Func<Sharp.UI.PathGeometry, Sharp.UI.PathGeometry> configure) { configure(this); }

        public void Add(Microsoft.Maui.Controls.Shapes.PathFigure pathFigure) => this.MauiObject.Figures.Add(pathFigure);

        public void Add(Action<IList<Microsoft.Maui.Controls.Shapes.PathFigure>> builder)
        {
            List<Microsoft.Maui.Controls.Shapes.PathFigure> items = new List<Microsoft.Maui.Controls.Shapes.PathFigure>();
            builder(items);
            foreach (var item in items)
                this.MauiObject.Figures.Add(item);
        }

        // ----- sealed bindable properties -----

        public static Microsoft.Maui.Controls.BindableProperty FiguresProperty => Microsoft.Maui.Controls.Shapes.PathGeometry.FiguresProperty;
        public static Microsoft.Maui.Controls.BindableProperty FillRuleProperty => Microsoft.Maui.Controls.Shapes.PathGeometry.FillRuleProperty;
        public static Microsoft.Maui.Controls.BindableProperty BindingContextProperty => Microsoft.Maui.Controls.BindableObject.BindingContextProperty;

        // ----- properties / events -----

        public Microsoft.Maui.Controls.Shapes.PathFigureCollection Figures { get => MauiObject.Figures; set => MauiObject.Figures = value; }
        public Microsoft.Maui.Controls.Shapes.FillRule FillRule { get => MauiObject.FillRule; set => MauiObject.FillRule = value; }
        public Microsoft.Maui.Dispatching.IDispatcher Dispatcher { get => MauiObject.Dispatcher; }
        public object BindingContext { get => MauiObject.BindingContext; set => MauiObject.BindingContext = MauiWrapper.Value<object>(value); }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add => MauiObject.PropertyChanged += value; remove => MauiObject.PropertyChanged -= value; }
        public event Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging { add => MauiObject.PropertyChanging += value; remove => MauiObject.PropertyChanging -= value; }
        public event System.EventHandler BindingContextChanged { add => MauiObject.BindingContextChanged += value; remove => MauiObject.BindingContextChanged -= value; }

        // ----- set value method -----

        public void SetValue(Microsoft.Maui.Controls.BindableProperty property, object value)
        {
            var mauiValue = MauiWrapper.Value<object>(value);
            MauiObject.SetValue(property, mauiValue);
        }

        public void SetValue(Microsoft.Maui.Controls.BindablePropertyKey propertyKey, object value)
        {
            var mauiValue = MauiWrapper.Value<object>(value);
            MauiObject.SetValue(propertyKey, mauiValue);
        }
    }
}

#pragma warning restore CS8669
