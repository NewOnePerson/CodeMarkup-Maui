//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ItemsViewGeneratedExtension
    {
        public static T EmptyView<T>(this T obj,
            object emptyView)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.EmptyView = (object)emptyView;
            return obj;
        }
        
        public static T EmptyView<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.EmptyView = builder.GetValue();
            return obj;
        }
        
        public static T EmptyView<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.ItemsView.EmptyViewProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T EmptyViewTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate emptyViewTemplate)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.EmptyViewTemplate = (Microsoft.Maui.Controls.DataTemplate)emptyViewTemplate;
            return obj;
        }
        
        public static T EmptyViewTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.EmptyViewTemplate = builder.GetValue();
            return obj;
        }
        
        public static T EmptyViewTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ItemsView.EmptyViewTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T EmptyViewTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.EmptyViewTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Collections.IEnumerable itemsSource)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.ItemsSource = (System.Collections.IEnumerable)itemsSource;
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<ValueBuilder<System.Collections.IEnumerable>, ValueBuilder<System.Collections.IEnumerable>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<System.Collections.IEnumerable>());
            if (builder.ValueIsSet()) mauiObject.ItemsSource = builder.GetValue();
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<BindingBuilder<System.Collections.IEnumerable>, BindingBuilder<System.Collections.IEnumerable>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<System.Collections.IEnumerable>(mauiObject, Microsoft.Maui.Controls.ItemsView.ItemsSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RemainingItemsThresholdReachedCommand<T>(this T obj,
            System.Windows.Input.ICommand remainingItemsThresholdReachedCommand)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.RemainingItemsThresholdReachedCommand = (System.Windows.Input.ICommand)remainingItemsThresholdReachedCommand;
            return obj;
        }
        
        public static T RemainingItemsThresholdReachedCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.RemainingItemsThresholdReachedCommand = builder.GetValue();
            return obj;
        }
        
        public static T RemainingItemsThresholdReachedCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RemainingItemsThresholdReachedCommandParameter<T>(this T obj,
            object remainingItemsThresholdReachedCommandParameter)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.RemainingItemsThresholdReachedCommandParameter = (object)remainingItemsThresholdReachedCommandParameter;
            return obj;
        }
        
        public static T RemainingItemsThresholdReachedCommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.RemainingItemsThresholdReachedCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T RemainingItemsThresholdReachedCommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.HorizontalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)horizontalScrollBarVisibility;
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ItemsView.HorizontalScrollBarVisibilityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.VerticalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)verticalScrollBarVisibility;
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ItemsView.VerticalScrollBarVisibilityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RemainingItemsThreshold<T>(this T obj,
            int remainingItemsThreshold)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.RemainingItemsThreshold = (int)remainingItemsThreshold;
            return obj;
        }
        
        public static T RemainingItemsThreshold<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.RemainingItemsThreshold = builder.GetValue();
            return obj;
        }
        
        public static T RemainingItemsThreshold<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate itemTemplate)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.ItemTemplate = (Microsoft.Maui.Controls.DataTemplate)itemTemplate;
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.ItemTemplate = builder.GetValue();
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ItemsView.ItemTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.ItemTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T ItemsUpdatingScrollMode<T>(this T obj,
            Microsoft.Maui.Controls.ItemsUpdatingScrollMode itemsUpdatingScrollMode)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.ItemsUpdatingScrollMode = (Microsoft.Maui.Controls.ItemsUpdatingScrollMode)itemsUpdatingScrollMode;
            return obj;
        }
        
        public static T ItemsUpdatingScrollMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ItemsUpdatingScrollMode>, ValueBuilder<Microsoft.Maui.Controls.ItemsUpdatingScrollMode>> buildValue)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ItemsUpdatingScrollMode>());
            if (builder.ValueIsSet()) mauiObject.ItemsUpdatingScrollMode = builder.GetValue();
            return obj;
        }
        
        public static T ItemsUpdatingScrollMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ItemsUpdatingScrollMode>, BindingBuilder<Microsoft.Maui.Controls.ItemsUpdatingScrollMode>> buildBinding)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ItemsUpdatingScrollMode>(mauiObject, Microsoft.Maui.Controls.ItemsView.ItemsUpdatingScrollModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ScrollToRequestEventArgs> handler)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.ScrollToRequested += handler;
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.ScrollToRequested += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ItemsViewScrolledEventArgs> handler)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.Scrolled += handler;
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.Scrolled += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnRemainingItemsThresholdReached<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.RemainingItemsThresholdReached += handler;
            return obj;
        }
        
        public static T OnRemainingItemsThresholdReached<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ItemsView>(obj);
            mauiObject.RemainingItemsThresholdReached += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
