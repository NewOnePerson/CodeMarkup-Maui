//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class PageGeneratedExtension
    {
        public static T BackgroundImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource backgroundImageSource)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.BackgroundImageSource = (Microsoft.Maui.Controls.ImageSource)backgroundImageSource;
            return obj;
        }
        
        public static T BackgroundImageSource<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.BackgroundImageSource = builder.GetValue();
            return obj;
        }
        
        public static T BackgroundImageSource<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Page.BackgroundImageSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IconImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource iconImageSource)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.IconImageSource = (Microsoft.Maui.Controls.ImageSource)iconImageSource;
            return obj;
        }
        
        public static T IconImageSource<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.IconImageSource = builder.GetValue();
            return obj;
        }
        
        public static T IconImageSource<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Page.IconImageSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsBusy<T>(this T obj,
            bool isBusy)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.IsBusy = (bool)isBusy;
            return obj;
        }
        
        public static T IsBusy<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsBusy = builder.GetValue();
            return obj;
        }
        
        public static T IsBusy<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Page.IsBusyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.Padding = (Microsoft.Maui.Thickness)padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Page.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            string title)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.Title = (string)title;
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Title = builder.GetValue();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Page.TitleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ToolbarItems<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.ToolbarItem> toolbarItems)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            foreach (var item in toolbarItems)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.ToolbarItem>(item);
                mauiObject.ToolbarItems.Add(mauiItem);
            }
            return obj;
        }

        public static T ToolbarItems<T>(this T obj,
            params Microsoft.Maui.Controls.ToolbarItem[] toolbarItems)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            foreach (var item in toolbarItems)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.ToolbarItem>(item);
                mauiObject.ToolbarItems.Add(mauiItem);
            }
            return obj;
        }
        
        public static T MenuBarItems<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.MenuBarItem> menuBarItems)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            foreach (var item in menuBarItems)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.MenuBarItem>(item);
                mauiObject.MenuBarItems.Add(mauiItem);
            }
            return obj;
        }

        public static T MenuBarItems<T>(this T obj,
            params Microsoft.Maui.Controls.MenuBarItem[] menuBarItems)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            foreach (var item in menuBarItems)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.MenuBarItem>(item);
                mauiObject.MenuBarItems.Add(mauiItem);
            }
            return obj;
        }
        
        public static T ContainerArea<T>(this T obj,
            Microsoft.Maui.Graphics.Rect containerArea)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.ContainerArea = (Microsoft.Maui.Graphics.Rect)containerArea;
            return obj;
        }
        
        public static T ContainerArea<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Rect>, ValueBuilder<Microsoft.Maui.Graphics.Rect>> buildValue)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Rect>());
            if (builder.ValueIsSet()) mauiObject.ContainerArea = builder.GetValue();
            return obj;
        }
        
        public static T IgnoresContainerArea<T>(this T obj,
            bool ignoresContainerArea)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.IgnoresContainerArea = (bool)ignoresContainerArea;
            return obj;
        }
        
        public static T IgnoresContainerArea<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IgnoresContainerArea = builder.GetValue();
            return obj;
        }
        
        public static T InternalChildren<T>(this T obj,
            System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.Element> internalChildren)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            foreach (var item in internalChildren)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.Element>(item);
                mauiObject.InternalChildren.Add(mauiItem);
            }
            return obj;
        }

        public static T InternalChildren<T>(this T obj,
            params Microsoft.Maui.Controls.Element[] internalChildren)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            foreach (var item in internalChildren)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.Element>(item);
                mauiObject.InternalChildren.Add(mauiItem);
            }
            return obj;
        }
        
        public static T OnNavigatedTo<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.NavigatedToEventArgs> handler)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.NavigatedTo += handler;
            return obj;
        }
        
        public static T OnNavigatedTo<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.NavigatedTo += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnNavigatingFrom<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.NavigatingFromEventArgs> handler)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.NavigatingFrom += handler;
            return obj;
        }
        
        public static T OnNavigatingFrom<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.NavigatingFrom += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnNavigatedFrom<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.NavigatedFromEventArgs> handler)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.NavigatedFrom += handler;
            return obj;
        }
        
        public static T OnNavigatedFrom<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.NavigatedFrom += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnLayoutChanged<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.LayoutChanged += handler;
            return obj;
        }
        
        public static T OnLayoutChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.LayoutChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnAppearing<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.Appearing += handler;
            return obj;
        }
        
        public static T OnAppearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.Appearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDisappearing<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.Disappearing += handler;
            return obj;
        }
        
        public static T OnDisappearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Page>(obj);
            mauiObject.Disappearing += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
