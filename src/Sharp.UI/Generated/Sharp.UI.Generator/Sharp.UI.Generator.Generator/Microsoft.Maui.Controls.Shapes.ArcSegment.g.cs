//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ArcSegmentGeneratedExtension
    {
        public static T Point<T>(this T obj,
            Microsoft.Maui.Graphics.Point point)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            mauiObject.Point = (Microsoft.Maui.Graphics.Point)point;
            return obj;
        }
        
        public static T Point<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Point>, ValueBuilder<Microsoft.Maui.Graphics.Point>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Point>());
            if (builder.ValueIsSet()) mauiObject.Point = builder.GetValue();
            return obj;
        }
        
        public static T Point<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Point>, LazyValueBuilder<Microsoft.Maui.Graphics.Point>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Point>());
            if (builder.ValueIsSet()) mauiObject.Point = builder.GetValue();
            return obj;
        }
        
        public static T Point<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Point>, BindingBuilder<Microsoft.Maui.Graphics.Point>> buildBinding)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Point>(mauiObject, Microsoft.Maui.Controls.Shapes.ArcSegment.PointProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Size<T>(this T obj,
            Microsoft.Maui.Graphics.Size size)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            mauiObject.Size = (Microsoft.Maui.Graphics.Size)size;
            return obj;
        }
        
        public static T Size<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Size>, ValueBuilder<Microsoft.Maui.Graphics.Size>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Size>());
            if (builder.ValueIsSet()) mauiObject.Size = builder.GetValue();
            return obj;
        }
        
        public static T Size<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Size>, LazyValueBuilder<Microsoft.Maui.Graphics.Size>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Size>());
            if (builder.ValueIsSet()) mauiObject.Size = builder.GetValue();
            return obj;
        }
        
        public static T Size<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Size>, BindingBuilder<Microsoft.Maui.Graphics.Size>> buildBinding)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Size>(mauiObject, Microsoft.Maui.Controls.Shapes.ArcSegment.SizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RotationAngle<T>(this T obj,
            double rotationAngle)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            mauiObject.RotationAngle = (double)rotationAngle;
            return obj;
        }
        
        public static T RotationAngle<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.RotationAngle = builder.GetValue();
            return obj;
        }
        
        public static T RotationAngle<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.RotationAngle = builder.GetValue();
            return obj;
        }
        
        public static T RotationAngle<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Shapes.ArcSegment.RotationAngleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SweepDirection<T>(this T obj,
            Microsoft.Maui.Controls.SweepDirection sweepDirection)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            mauiObject.SweepDirection = (Microsoft.Maui.Controls.SweepDirection)sweepDirection;
            return obj;
        }
        
        public static T SweepDirection<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.SweepDirection>, ValueBuilder<Microsoft.Maui.Controls.SweepDirection>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.SweepDirection>());
            if (builder.ValueIsSet()) mauiObject.SweepDirection = builder.GetValue();
            return obj;
        }
        
        public static T SweepDirection<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.SweepDirection>, LazyValueBuilder<Microsoft.Maui.Controls.SweepDirection>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.SweepDirection>());
            if (builder.ValueIsSet()) mauiObject.SweepDirection = builder.GetValue();
            return obj;
        }
        
        public static T SweepDirection<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SweepDirection>, BindingBuilder<Microsoft.Maui.Controls.SweepDirection>> buildBinding)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.SweepDirection>(mauiObject, Microsoft.Maui.Controls.Shapes.ArcSegment.SweepDirectionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsLargeArc<T>(this T obj,
            bool isLargeArc)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            mauiObject.IsLargeArc = (bool)isLargeArc;
            return obj;
        }
        
        public static T IsLargeArc<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsLargeArc = builder.GetValue();
            return obj;
        }
        
        public static T IsLargeArc<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsLargeArc = builder.GetValue();
            return obj;
        }
        
        public static T IsLargeArc<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IArcSegment
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.ArcSegment>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Shapes.ArcSegment.IsLargeArcProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
