//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ShapeGeneratedExtension
    {
        public static T Fill<T>(this T obj,
            Microsoft.Maui.Controls.Brush fill)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.Fill = (Microsoft.Maui.Controls.Brush)fill;
            return obj;
        }
        
        public static T Fill<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush>, ValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) mauiObject.Fill = builder.GetValue();
            return obj;
        }
        
        public static T Fill<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush>, BindingBuilder<Microsoft.Maui.Controls.Brush>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.FillProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Stroke<T>(this T obj,
            Microsoft.Maui.Controls.Brush stroke)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.Stroke = (Microsoft.Maui.Controls.Brush)stroke;
            return obj;
        }
        
        public static T Stroke<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush>, ValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) mauiObject.Stroke = builder.GetValue();
            return obj;
        }
        
        public static T Stroke<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush>, BindingBuilder<Microsoft.Maui.Controls.Brush>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.StrokeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeThickness<T>(this T obj,
            double strokeThickness)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.StrokeThickness = (double)strokeThickness;
            return obj;
        }
        
        public static T StrokeThickness<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeThickness = builder.GetValue();
            return obj;
        }
        
        public static T StrokeThickness<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.StrokeThicknessProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeDashArray<T>(this T obj,
            Microsoft.Maui.Controls.DoubleCollection strokeDashArray)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.StrokeDashArray = (Microsoft.Maui.Controls.DoubleCollection)strokeDashArray;
            return obj;
        }
        
        public static T StrokeDashArray<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DoubleCollection>, ValueBuilder<Microsoft.Maui.Controls.DoubleCollection>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DoubleCollection>());
            if (builder.ValueIsSet()) mauiObject.StrokeDashArray = builder.GetValue();
            return obj;
        }
        
        public static T StrokeDashArray<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DoubleCollection>, BindingBuilder<Microsoft.Maui.Controls.DoubleCollection>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DoubleCollection>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.StrokeDashArrayProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeDashOffset<T>(this T obj,
            double strokeDashOffset)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.StrokeDashOffset = (double)strokeDashOffset;
            return obj;
        }
        
        public static T StrokeDashOffset<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeDashOffset = builder.GetValue();
            return obj;
        }
        
        public static T StrokeDashOffset<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.StrokeDashOffsetProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeLineCap<T>(this T obj,
            Microsoft.Maui.Controls.Shapes.PenLineCap strokeLineCap)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.StrokeLineCap = (Microsoft.Maui.Controls.Shapes.PenLineCap)strokeLineCap;
            return obj;
        }
        
        public static T StrokeLineCap<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>, ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>());
            if (builder.ValueIsSet()) mauiObject.StrokeLineCap = builder.GetValue();
            return obj;
        }
        
        public static T StrokeLineCap<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>, BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.StrokeLineCapProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeLineJoin<T>(this T obj,
            Microsoft.Maui.Controls.Shapes.PenLineJoin strokeLineJoin)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.StrokeLineJoin = (Microsoft.Maui.Controls.Shapes.PenLineJoin)strokeLineJoin;
            return obj;
        }
        
        public static T StrokeLineJoin<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>, ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>());
            if (builder.ValueIsSet()) mauiObject.StrokeLineJoin = builder.GetValue();
            return obj;
        }
        
        public static T StrokeLineJoin<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>, BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.StrokeLineJoinProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeMiterLimit<T>(this T obj,
            double strokeMiterLimit)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.StrokeMiterLimit = (double)strokeMiterLimit;
            return obj;
        }
        
        public static T StrokeMiterLimit<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeMiterLimit = builder.GetValue();
            return obj;
        }
        
        public static T StrokeMiterLimit<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.StrokeMiterLimitProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            Microsoft.Maui.Controls.Stretch aspect)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            mauiObject.Aspect = (Microsoft.Maui.Controls.Stretch)aspect;
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Stretch>, ValueBuilder<Microsoft.Maui.Controls.Stretch>> buildValue)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Stretch>());
            if (builder.ValueIsSet()) mauiObject.Aspect = builder.GetValue();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Stretch>, BindingBuilder<Microsoft.Maui.Controls.Stretch>> buildBinding)
            where T : Sharp.UI.IShape
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shapes.Shape>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Stretch>(mauiObject, Microsoft.Maui.Controls.Shapes.Shape.AspectProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
