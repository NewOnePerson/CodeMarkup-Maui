//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class CarouselViewGeneratedExtension
    {
        public static T Loop<T>(this T obj,
            bool loop)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.Loop = (bool)loop;
            return obj;
        }
        
        public static T Loop<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.Loop = builder.GetValue();
            return obj;
        }
        
        public static T Loop<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.Loop = builder.GetValue();
            return obj;
        }
        
        public static T Loop<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.LoopProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T PeekAreaInsets<T>(this T obj,
            Microsoft.Maui.Thickness peekAreaInsets)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.PeekAreaInsets = (Microsoft.Maui.Thickness)peekAreaInsets;
            return obj;
        }
        
        public static T PeekAreaInsets<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.PeekAreaInsets = builder.GetValue();
            return obj;
        }
        
        public static T PeekAreaInsets<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Thickness>, LazyValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.PeekAreaInsets = builder.GetValue();
            return obj;
        }
        
        public static T PeekAreaInsets<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.CarouselView.PeekAreaInsetsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VisibleViews<T>(this T obj,
            System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View> visibleViews)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            foreach (var item in visibleViews)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.View>(item);
                mauiObject.VisibleViews.Add(mauiItem);
            }
            return obj;
        }

        public static T VisibleViews<T>(this T obj,
            params Microsoft.Maui.Controls.View[] visibleViews)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            foreach (var item in visibleViews)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.View>(item);
                mauiObject.VisibleViews.Add(mauiItem);
            }
            return obj;
        }

        public static T VisibleViews<T>(this T obj,
            System.Func<LazyValueBuilder<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>, LazyValueBuilder<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>());
            if (builder.ValueIsSet())
            {
                var items = builder.GetValue();
                foreach (var item in items) 
                {
                    var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.View>(item);
                    mauiObject.VisibleViews.Add(mauiItem);
                }
            }
            return obj;
        }
        
        public static T IsBounceEnabled<T>(this T obj,
            bool isBounceEnabled)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.IsBounceEnabled = (bool)isBounceEnabled;
            return obj;
        }
        
        public static T IsBounceEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsBounceEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsBounceEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsBounceEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsBounceEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsBounceEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsSwipeEnabled<T>(this T obj,
            bool isSwipeEnabled)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.IsSwipeEnabled = (bool)isSwipeEnabled;
            return obj;
        }
        
        public static T IsSwipeEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsSwipeEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsSwipeEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsSwipeEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsSwipeEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsSwipeEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsScrollAnimated<T>(this T obj,
            bool isScrollAnimated)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.IsScrollAnimated = (bool)isScrollAnimated;
            return obj;
        }
        
        public static T IsScrollAnimated<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsScrollAnimated = builder.GetValue();
            return obj;
        }
        
        public static T IsScrollAnimated<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsScrollAnimated = builder.GetValue();
            return obj;
        }
        
        public static T IsScrollAnimated<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsScrollAnimatedProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            object currentItem)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.CurrentItem = (object)currentItem;
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CurrentItem = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CurrentItem = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CurrentItemChangedCommand<T>(this T obj,
            System.Windows.Input.ICommand currentItemChangedCommand)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.CurrentItemChangedCommand = (System.Windows.Input.ICommand)currentItemChangedCommand;
            return obj;
        }
        
        public static T CurrentItemChangedCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.CurrentItemChangedCommand = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItemChangedCommand<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.CurrentItemChangedCommand = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItemChangedCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T obj,
            object currentItemChangedCommandParameter)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.CurrentItemChangedCommandParameter = (object)currentItemChangedCommandParameter;
            return obj;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CurrentItemChangedCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CurrentItemChangedCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            int position)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.Position = (int)position;
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.Position = builder.GetValue();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.Position = builder.GetValue();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T PositionChangedCommand<T>(this T obj,
            System.Windows.Input.ICommand positionChangedCommand)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.PositionChangedCommand = (System.Windows.Input.ICommand)positionChangedCommand;
            return obj;
        }
        
        public static T PositionChangedCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.PositionChangedCommand = builder.GetValue();
            return obj;
        }
        
        public static T PositionChangedCommand<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.PositionChangedCommand = builder.GetValue();
            return obj;
        }
        
        public static T PositionChangedCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T PositionChangedCommandParameter<T>(this T obj,
            object positionChangedCommandParameter)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.PositionChangedCommandParameter = (object)positionChangedCommandParameter;
            return obj;
        }
        
        public static T PositionChangedCommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.PositionChangedCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T PositionChangedCommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.PositionChangedCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T PositionChangedCommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            Microsoft.Maui.Controls.LinearItemsLayout itemsLayout)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.ItemsLayout = (Microsoft.Maui.Controls.LinearItemsLayout)itemsLayout;
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>, ValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>());
            if (builder.ValueIsSet()) mauiObject.ItemsLayout = builder.GetValue();
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>, LazyValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>());
            if (builder.ValueIsSet()) mauiObject.ItemsLayout = builder.GetValue();
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.LinearItemsLayout>, BindingBuilder<Microsoft.Maui.Controls.LinearItemsLayout>> buildBinding)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.LinearItemsLayout>(mauiObject, Microsoft.Maui.Controls.CarouselView.ItemsLayoutProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IndicatorView<T>(this T obj,
            Microsoft.Maui.Controls.IndicatorView indicatorView)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.IndicatorView = (Microsoft.Maui.Controls.IndicatorView)indicatorView;
            return obj;
        }
        
        public static T IndicatorView<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IndicatorView>, ValueBuilder<Microsoft.Maui.Controls.IndicatorView>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.IndicatorView>());
            if (builder.ValueIsSet()) mauiObject.IndicatorView = builder.GetValue();
            return obj;
        }
        
        public static T IndicatorView<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.IndicatorView>, LazyValueBuilder<Microsoft.Maui.Controls.IndicatorView>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.IndicatorView>());
            if (builder.ValueIsSet()) mauiObject.IndicatorView = builder.GetValue();
            return obj;
        }
        
        public static T IsScrolling<T>(this T obj,
            bool isScrolling)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.IsScrolling = (bool)isScrolling;
            return obj;
        }
        
        public static T IsScrolling<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsScrolling = builder.GetValue();
            return obj;
        }
        
        public static T IsScrolling<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsScrolling = builder.GetValue();
            return obj;
        }
        
        public static T OnCurrentItemChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.CurrentItemChangedEventArgs> handler)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.CurrentItemChanged += handler;
            return obj;
        }
        
        public static T OnCurrentItemChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.CurrentItemChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPositionChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.PositionChangedEventArgs> handler)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.PositionChanged += handler;
            return obj;
        }
        
        public static T OnPositionChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.PositionChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
