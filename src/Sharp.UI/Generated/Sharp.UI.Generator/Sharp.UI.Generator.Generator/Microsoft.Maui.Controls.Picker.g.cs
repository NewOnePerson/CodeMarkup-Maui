//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class PickerGeneratedExtension
    {
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) mauiObject.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Picker.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.FontFamily = (string)fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Picker.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.FontSize = (double)fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Picker.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Picker.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Items<T>(this T obj,
            System.Collections.Generic.IList<string> items)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            foreach (var item in items)
            {
                var mauiItem = MauiWrapper.Value<string>(item);
                mauiObject.Items.Add(mauiItem);
            }
            return obj;
        }

        public static T Items<T>(this T obj,
            params string[] items)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            foreach (var item in items)
            {
                var mauiItem = MauiWrapper.Value<string>(item);
                mauiObject.Items.Add(mauiItem);
            }
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Collections.IList itemsSource)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.ItemsSource = (System.Collections.IList)itemsSource;
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<ValueBuilder<System.Collections.IList>, ValueBuilder<System.Collections.IList>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<System.Collections.IList>());
            if (builder.ValueIsSet()) mauiObject.ItemsSource = builder.GetValue();
            return obj;
        }
        
        public static T ItemsSource<T>(this T obj,
            System.Func<BindingBuilder<System.Collections.IList>, BindingBuilder<System.Collections.IList>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<System.Collections.IList>(mauiObject, Microsoft.Maui.Controls.Picker.ItemsSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectedIndex<T>(this T obj,
            int selectedIndex)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.SelectedIndex = (int)selectedIndex;
            return obj;
        }
        
        public static T SelectedIndex<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.SelectedIndex = builder.GetValue();
            return obj;
        }
        
        public static T SelectedIndex<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.Picker.SelectedIndexProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            object selectedItem)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.SelectedItem = (object)selectedItem;
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.SelectedItem = builder.GetValue();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.Picker.SelectedItemProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Picker.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.CharacterSpacing = (double)characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Picker.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            string title)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.Title = (string)title;
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Title = builder.GetValue();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Picker.TitleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TitleColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color titleColor)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.TitleColor = (Microsoft.Maui.Graphics.Color)titleColor;
            return obj;
        }
        
        public static T TitleColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TitleColor = builder.GetValue();
            return obj;
        }
        
        public static T TitleColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Picker.TitleColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.HorizontalTextAlignment = (Microsoft.Maui.TextAlignment)horizontalTextAlignment;
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.HorizontalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Picker.HorizontalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.VerticalTextAlignment = (Microsoft.Maui.TextAlignment)verticalTextAlignment;
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.VerticalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Picker.VerticalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemDisplayBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase itemDisplayBinding)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.ItemDisplayBinding = (Microsoft.Maui.Controls.BindingBase)itemDisplayBinding;
            return obj;
        }
        
        public static T ItemDisplayBinding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.BindingBase>, ValueBuilder<Microsoft.Maui.Controls.BindingBase>> buildValue)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) mauiObject.ItemDisplayBinding = builder.GetValue();
            return obj;
        }
        
        public static T OnSelectedIndexChanged<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.SelectedIndexChanged += handler;
            return obj;
        }
        
        public static T OnSelectedIndexChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IPicker
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Picker>(obj);
            mauiObject.SelectedIndexChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
