//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class TableViewGeneratedExtension
    {
        public static T HasUnevenRows<T>(this T obj,
            bool hasUnevenRows)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.HasUnevenRows = (bool)hasUnevenRows;
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.HasUnevenRows = builder.GetValue();
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.TableView.HasUnevenRowsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Intent<T>(this T obj,
            Microsoft.Maui.Controls.TableIntent intent)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.Intent = (Microsoft.Maui.Controls.TableIntent)intent;
            return obj;
        }
        
        public static T Intent<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.TableIntent>, ValueBuilder<Microsoft.Maui.Controls.TableIntent>> buildValue)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.TableIntent>());
            if (builder.ValueIsSet()) mauiObject.Intent = builder.GetValue();
            return obj;
        }
        
        public static T Root<T>(this T obj,
            Microsoft.Maui.Controls.TableRoot root)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.Root = (Microsoft.Maui.Controls.TableRoot)root;
            return obj;
        }
        
        public static T Root<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.TableRoot>, ValueBuilder<Microsoft.Maui.Controls.TableRoot>> buildValue)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.TableRoot>());
            if (builder.ValueIsSet()) mauiObject.Root = builder.GetValue();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            int rowHeight)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.RowHeight = (int)rowHeight;
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.RowHeight = builder.GetValue();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.TableView.RowHeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Model<T>(this T obj,
            Microsoft.Maui.Controls.Internals.TableModel model)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.Model = (Microsoft.Maui.Controls.Internals.TableModel)model;
            return obj;
        }
        
        public static T Model<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Internals.TableModel>, ValueBuilder<Microsoft.Maui.Controls.Internals.TableModel>> buildValue)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Internals.TableModel>());
            if (builder.ValueIsSet()) mauiObject.Model = builder.GetValue();
            return obj;
        }
        
        public static T OnModelChanged<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.ModelChanged += handler;
            return obj;
        }
        
        public static T OnModelChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.ModelChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
