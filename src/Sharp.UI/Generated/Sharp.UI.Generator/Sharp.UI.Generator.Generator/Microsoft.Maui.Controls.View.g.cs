//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ViewGeneratedExtension
    {
        public static T GestureRecognizers<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer> gestureRecognizers)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            foreach (var item in gestureRecognizers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.IGestureRecognizer>(item);
                mauiObject.GestureRecognizers.Add(mauiItem);
            }
            return obj;
        }

        public static T GestureRecognizers<T>(this T obj,
            params Microsoft.Maui.Controls.IGestureRecognizer[] gestureRecognizers)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            foreach (var item in gestureRecognizers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.IGestureRecognizer>(item);
                mauiObject.GestureRecognizers.Add(mauiItem);
            }
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions horizontalOptions)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            mauiObject.HorizontalOptions = (Microsoft.Maui.Controls.LayoutOptions)horizontalOptions;
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.LayoutOptions>, ValueBuilder<Microsoft.Maui.Controls.LayoutOptions>> buildValue)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.LayoutOptions>());
            if (builder.ValueIsSet()) mauiObject.HorizontalOptions = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.LayoutOptions>, BindingBuilder<Microsoft.Maui.Controls.LayoutOptions>> buildBinding)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.HorizontalOptionsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            Microsoft.Maui.Thickness margin)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            mauiObject.Margin = (Microsoft.Maui.Thickness)margin;
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Margin = builder.GetValue();
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.View.MarginProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions verticalOptions)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            mauiObject.VerticalOptions = (Microsoft.Maui.Controls.LayoutOptions)verticalOptions;
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.LayoutOptions>, ValueBuilder<Microsoft.Maui.Controls.LayoutOptions>> buildValue)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.LayoutOptions>());
            if (builder.ValueIsSet()) mauiObject.VerticalOptions = builder.GetValue();
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.LayoutOptions>, BindingBuilder<Microsoft.Maui.Controls.LayoutOptions>> buildBinding)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.VerticalOptionsProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
