//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class SliderGeneratedExtension
    {
        public static T MinimumTrackColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color minimumTrackColor)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.MinimumTrackColor = (Microsoft.Maui.Graphics.Color)minimumTrackColor;
            return obj;
        }
        
        public static T MinimumTrackColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.MinimumTrackColor = builder.GetValue();
            return obj;
        }
        
        public static T MinimumTrackColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Slider.MinimumTrackColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaximumTrackColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color maximumTrackColor)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.MaximumTrackColor = (Microsoft.Maui.Graphics.Color)maximumTrackColor;
            return obj;
        }
        
        public static T MaximumTrackColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.MaximumTrackColor = builder.GetValue();
            return obj;
        }
        
        public static T MaximumTrackColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Slider.MaximumTrackColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color thumbColor)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.ThumbColor = (Microsoft.Maui.Graphics.Color)thumbColor;
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.ThumbColor = builder.GetValue();
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Slider.ThumbColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ThumbImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource thumbImageSource)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.ThumbImageSource = (Microsoft.Maui.Controls.ImageSource)thumbImageSource;
            return obj;
        }
        
        public static T ThumbImageSource<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.ThumbImageSource = builder.GetValue();
            return obj;
        }
        
        public static T ThumbImageSource<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Slider.ThumbImageSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DragStartedCommand<T>(this T obj,
            System.Windows.Input.ICommand dragStartedCommand)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.DragStartedCommand = (System.Windows.Input.ICommand)dragStartedCommand;
            return obj;
        }
        
        public static T DragStartedCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DragStartedCommand = builder.GetValue();
            return obj;
        }
        
        public static T DragStartedCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.Slider.DragStartedCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DragCompletedCommand<T>(this T obj,
            System.Windows.Input.ICommand dragCompletedCommand)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.DragCompletedCommand = (System.Windows.Input.ICommand)dragCompletedCommand;
            return obj;
        }
        
        public static T DragCompletedCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DragCompletedCommand = builder.GetValue();
            return obj;
        }
        
        public static T DragCompletedCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.Slider.DragCompletedCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Maximum<T>(this T obj,
            double maximum)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.Maximum = (double)maximum;
            return obj;
        }
        
        public static T Maximum<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.Maximum = builder.GetValue();
            return obj;
        }
        
        public static T Maximum<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Slider.MaximumProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Minimum<T>(this T obj,
            double minimum)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.Minimum = (double)minimum;
            return obj;
        }
        
        public static T Minimum<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.Minimum = builder.GetValue();
            return obj;
        }
        
        public static T Minimum<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Slider.MinimumProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Value<T>(this T obj,
            double value)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.Value = (double)value;
            return obj;
        }
        
        public static T Value<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.Value = builder.GetValue();
            return obj;
        }
        
        public static T Value<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Slider.ValueProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnValueChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ValueChangedEventArgs> handler)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.ValueChanged += handler;
            return obj;
        }
        
        public static T OnValueChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.ValueChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDragStarted<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.DragStarted += handler;
            return obj;
        }
        
        public static T OnDragStarted<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.DragStarted += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDragCompleted<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.DragCompleted += handler;
            return obj;
        }
        
        public static T OnDragCompleted<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ISlider
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Slider>(obj);
            mauiObject.DragCompleted += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
