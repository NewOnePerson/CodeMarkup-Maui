//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class EntryCellGeneratedExtension
    {
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.HorizontalTextAlignment = (Microsoft.Maui.TextAlignment)horizontalTextAlignment;
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.HorizontalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.VerticalTextAlignment = (Microsoft.Maui.TextAlignment)verticalTextAlignment;
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.VerticalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            Microsoft.Maui.Keyboard keyboard)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.Keyboard = (Microsoft.Maui.Keyboard)keyboard;
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Keyboard>, ValueBuilder<Microsoft.Maui.Keyboard>> buildValue)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Keyboard>());
            if (builder.ValueIsSet()) mauiObject.Keyboard = builder.GetValue();
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Keyboard>, BindingBuilder<Microsoft.Maui.Keyboard>> buildBinding)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Keyboard>(mauiObject, Microsoft.Maui.Controls.EntryCell.KeyboardProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Label<T>(this T obj,
            string label)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.Label = (string)label;
            return obj;
        }
        
        public static T Label<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Label = builder.GetValue();
            return obj;
        }
        
        public static T Label<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.EntryCell.LabelProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LabelColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color labelColor)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.LabelColor = (Microsoft.Maui.Graphics.Color)labelColor;
            return obj;
        }
        
        public static T LabelColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.LabelColor = builder.GetValue();
            return obj;
        }
        
        public static T LabelColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.EntryCell.LabelColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            string placeholder)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.Placeholder = (string)placeholder;
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Placeholder = builder.GetValue();
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.EntryCell.PlaceholderProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.Text = (string)text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.EntryCell.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnCompleted<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.Completed += handler;
            return obj;
        }
        
        public static T OnCompleted<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IEntryCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.EntryCell>(obj);
            mauiObject.Completed += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
