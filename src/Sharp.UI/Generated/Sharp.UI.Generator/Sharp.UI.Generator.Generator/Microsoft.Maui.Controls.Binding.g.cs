//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class BindingGeneratedExtension
    {
        public static T Converter<T>(this T obj,
            Microsoft.Maui.Controls.IValueConverter converter)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            mauiObject.Converter = (Microsoft.Maui.Controls.IValueConverter)converter;
            return obj;
        }
        
        public static T Converter<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IValueConverter>, ValueBuilder<Microsoft.Maui.Controls.IValueConverter>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.IValueConverter>());
            if (builder.ValueIsSet()) mauiObject.Converter = builder.GetValue();
            return obj;
        }
        
        public static T Converter<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.IValueConverter>, LazyValueBuilder<Microsoft.Maui.Controls.IValueConverter>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.IValueConverter>());
            if (builder.ValueIsSet()) mauiObject.Converter = builder.GetValue();
            return obj;
        }
        
        public static T ConverterParameter<T>(this T obj,
            object converterParameter)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            mauiObject.ConverterParameter = (object)converterParameter;
            return obj;
        }
        
        public static T ConverterParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.ConverterParameter = builder.GetValue();
            return obj;
        }
        
        public static T ConverterParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.ConverterParameter = builder.GetValue();
            return obj;
        }
        
        public static T Path<T>(this T obj,
            string path)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            mauiObject.Path = (string)path;
            return obj;
        }
        
        public static T Path<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Path = builder.GetValue();
            return obj;
        }
        
        public static T Path<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Path = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            object source)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            mauiObject.Source = (object)source;
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Source = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Source = builder.GetValue();
            return obj;
        }
        
        public static T UpdateSourceEventName<T>(this T obj,
            string updateSourceEventName)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            mauiObject.UpdateSourceEventName = (string)updateSourceEventName;
            return obj;
        }
        
        public static T UpdateSourceEventName<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.UpdateSourceEventName = builder.GetValue();
            return obj;
        }
        
        public static T UpdateSourceEventName<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IBinding
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Binding>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.UpdateSourceEventName = builder.GetValue();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
