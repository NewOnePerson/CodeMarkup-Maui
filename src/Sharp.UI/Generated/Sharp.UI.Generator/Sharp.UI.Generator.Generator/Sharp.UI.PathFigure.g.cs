//
// <auto-generated>
//

#pragma warning disable CS8669


using System.Collections;
using System.Collections.ObjectModel;


namespace Sharp.UI
{  
    /// <summary>
    /// A <c>Sharp.UI</c> class wrapping the sealed <c>Microsoft.Maui.Controls.Shapes.PathFigure</c> class.
    /// Use the <value>MauiObject</value> property to get the raw Maui object.
    /// </summary>
    public partial class PathFigure : Sharp.UI.IPathFigure, IMauiWrapper, ISealedMauiWrapper, IList<Microsoft.Maui.Controls.Shapes.PathSegment>
    {
        // ----- maui object -----

        public object _maui_RawObject { get; set; }

        public Microsoft.Maui.Controls.Shapes.PathFigure MauiObject { get => (Microsoft.Maui.Controls.Shapes.PathFigure)_maui_RawObject; protected set => _maui_RawObject = value; }

        // ----- constructors -----

        public PathFigure(Microsoft.Maui.Controls.Shapes.PathFigure pathFigure)
        {
            MauiObject = pathFigure;
        }

        public PathFigure()
        {
            MauiObject = new Microsoft.Maui.Controls.Shapes.PathFigure();
        }

        public PathFigure(out PathFigure pathFigure) : this()
        {
            pathFigure = this;
        }

        [Obsolete("This constructor is deprecated, use e=>e.FluentMethod(), inside curly braces.")]
        public PathFigure(System.Action<PathFigure> configure) : this()
        {
            configure(this);
        }

        [Obsolete("This constructor is deprecated, use e=>e.FluentMethod(), inside curly braces.")]
        public PathFigure(out PathFigure pathFigure, System.Action<PathFigure> configure) : this()
        {
            pathFigure = this;
            configure(this);
        }

        public PathFigure(double x, double y, out PathFigure pathFigure) : this(x, y)
        {
            pathFigure = this;
        }

        [Obsolete("This constructor is deprecated, use e=>e.FluentMethod(), inside curly braces.")]
        public PathFigure(double x, double y, System.Action<PathFigure> configure) : this(x, y)
        {
            configure(this);
        }

        [Obsolete("This constructor is deprecated, use e=>e.FluentMethod(), inside curly braces.")]
        public PathFigure(double x, double y, out PathFigure pathFigure, System.Action<PathFigure> configure) : this(x, y)
        {
            pathFigure = this;
            configure(this);
        }

        // ----- operators -----

        public static implicit operator PathFigure(Microsoft.Maui.Controls.Shapes.PathFigure mauiObject) => new PathFigure(mauiObject);
        public static implicit operator Microsoft.Maui.Controls.Shapes.PathFigure(PathFigure obj) => obj.MauiObject;

        // ----- collection container -----

        public int Count => this.MauiObject.Segments.Count;
        public Microsoft.Maui.Controls.Shapes.PathSegment this[int index] { get => this.MauiObject.Segments[index]; set => this.MauiObject.Segments[index] = value; }
        public bool IsReadOnly => false;
        public void Add(Microsoft.Maui.Controls.Shapes.PathSegment item) => this.MauiObject.Segments.Add(item);
        public void Clear() => this.MauiObject.Segments.Clear();
        public bool Contains(Microsoft.Maui.Controls.Shapes.PathSegment item) => this.MauiObject.Segments.Contains(item);
        public void CopyTo(Microsoft.Maui.Controls.Shapes.PathSegment[] array, int arrayIndex) => this.MauiObject.Segments.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Controls.Shapes.PathSegment> GetEnumerator() => this.MauiObject.Segments.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Controls.Shapes.PathSegment item) => this.MauiObject.Segments.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Controls.Shapes.PathSegment item) => this.MauiObject.Segments.Insert(index, item);
        public bool Remove(Microsoft.Maui.Controls.Shapes.PathSegment item) => this.MauiObject.Segments.Remove(item);
        public void RemoveAt(int index) => this.MauiObject.Segments.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.MauiObject.Segments.GetEnumerator();

        public void Add(Func<Sharp.UI.PathFigure, Sharp.UI.PathFigure> configure) { configure(this); }

        // ----- sealed bindable properties -----

        public static Microsoft.Maui.Controls.BindableProperty SegmentsProperty => Microsoft.Maui.Controls.Shapes.PathFigure.SegmentsProperty;
        public static Microsoft.Maui.Controls.BindableProperty StartPointProperty => Microsoft.Maui.Controls.Shapes.PathFigure.StartPointProperty;
        public static Microsoft.Maui.Controls.BindableProperty IsClosedProperty => Microsoft.Maui.Controls.Shapes.PathFigure.IsClosedProperty;
        public static Microsoft.Maui.Controls.BindableProperty IsFilledProperty => Microsoft.Maui.Controls.Shapes.PathFigure.IsFilledProperty;
        public static Microsoft.Maui.Controls.BindableProperty BindingContextProperty => Microsoft.Maui.Controls.BindableObject.BindingContextProperty;

        // ----- properties / events -----

        public Microsoft.Maui.Controls.Shapes.PathSegmentCollection Segments { get => MauiObject.Segments; set => MauiObject.Segments = value; }
        public Microsoft.Maui.Graphics.Point StartPoint { get => MauiObject.StartPoint; set => MauiObject.StartPoint = value; }
        public bool IsClosed { get => MauiObject.IsClosed; set => MauiObject.IsClosed = value; }
        public bool IsFilled { get => MauiObject.IsFilled; set => MauiObject.IsFilled = value; }
        public Microsoft.Maui.Dispatching.IDispatcher Dispatcher { get => MauiObject.Dispatcher; }
        public object BindingContext { get => MauiObject.BindingContext; set => MauiObject.BindingContext = MauiWrapper.Value<object>(value); }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add => MauiObject.PropertyChanged += value; remove => MauiObject.PropertyChanged -= value; }
        public event Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging { add => MauiObject.PropertyChanging += value; remove => MauiObject.PropertyChanging -= value; }
        public event System.EventHandler BindingContextChanged { add => MauiObject.BindingContextChanged += value; remove => MauiObject.BindingContextChanged -= value; }

        // ----- set value method -----

        public void SetValue(Microsoft.Maui.Controls.BindableProperty property, object value)
        {
            var mauiValue = MauiWrapper.Value<object>(value);
            MauiObject.SetValue(property, mauiValue);
        }

        public void SetValue(Microsoft.Maui.Controls.BindablePropertyKey propertyKey, object value)
        {
            var mauiValue = MauiWrapper.Value<object>(value);
            MauiObject.SetValue(propertyKey, mauiValue);
        }
    }
}

#pragma warning restore CS8669
