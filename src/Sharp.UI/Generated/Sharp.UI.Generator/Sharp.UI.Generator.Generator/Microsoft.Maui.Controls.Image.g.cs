//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ImageGeneratedExtension
    {
        public static T Aspect<T>(this T obj,
            Microsoft.Maui.Aspect aspect)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            mauiObject.Aspect = (Microsoft.Maui.Aspect)aspect;
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Aspect>, ValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) mauiObject.Aspect = builder.GetValue();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Aspect>, LazyValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) mauiObject.Aspect = builder.GetValue();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Aspect>, BindingBuilder<Microsoft.Maui.Aspect>> buildBinding)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Aspect>(mauiObject, Microsoft.Maui.Controls.Image.AspectProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            bool isOpaque)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            mauiObject.IsOpaque = (bool)isOpaque;
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsOpaque = builder.GetValue();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsOpaque = builder.GetValue();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Image.IsOpaqueProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsAnimationPlaying<T>(this T obj,
            bool isAnimationPlaying)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            mauiObject.IsAnimationPlaying = (bool)isAnimationPlaying;
            return obj;
        }
        
        public static T IsAnimationPlaying<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsAnimationPlaying = builder.GetValue();
            return obj;
        }
        
        public static T IsAnimationPlaying<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsAnimationPlaying = builder.GetValue();
            return obj;
        }
        
        public static T IsAnimationPlaying<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource source)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            mauiObject.Source = (Microsoft.Maui.Controls.ImageSource)source;
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.Source = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>, LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.Source = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.IImage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Image>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Image.SourceProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
