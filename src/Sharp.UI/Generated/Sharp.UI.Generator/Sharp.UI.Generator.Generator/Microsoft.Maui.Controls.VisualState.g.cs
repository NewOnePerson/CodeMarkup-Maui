//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class VisualStateGeneratedExtension
    {
        public static T Name<T>(this T obj,
            string name)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            mauiObject.Name = (string)name;
            return obj;
        }
        
        public static T Name<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Name = builder.GetValue();
            return obj;
        }
        
        public static T Setters<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.Setter> setters)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            foreach (var item in setters)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.Setter>(item);
                mauiObject.Setters.Add(mauiItem);
            }
            return obj;
        }

        public static T Setters<T>(this T obj,
            params Microsoft.Maui.Controls.Setter[] setters)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            foreach (var item in setters)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.Setter>(item);
                mauiObject.Setters.Add(mauiItem);
            }
            return obj;
        }
        
        public static T StateTriggers<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.StateTriggerBase> stateTriggers)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            foreach (var item in stateTriggers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.StateTriggerBase>(item);
                mauiObject.StateTriggers.Add(mauiItem);
            }
            return obj;
        }

        public static T StateTriggers<T>(this T obj,
            params Microsoft.Maui.Controls.StateTriggerBase[] stateTriggers)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            foreach (var item in stateTriggers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.StateTriggerBase>(item);
                mauiObject.StateTriggers.Add(mauiItem);
            }
            return obj;
        }
        
        public static T TargetType<T>(this T obj,
            System.Type targetType)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            mauiObject.TargetType = (System.Type)targetType;
            return obj;
        }
        
        public static T TargetType<T>(this T obj,
            System.Func<ValueBuilder<System.Type>, ValueBuilder<System.Type>> buildValue)
            where T : Sharp.UI.IVisualState
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualState>(obj);
            var builder = buildValue(new ValueBuilder<System.Type>());
            if (builder.ValueIsSet()) mauiObject.TargetType = builder.GetValue();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
