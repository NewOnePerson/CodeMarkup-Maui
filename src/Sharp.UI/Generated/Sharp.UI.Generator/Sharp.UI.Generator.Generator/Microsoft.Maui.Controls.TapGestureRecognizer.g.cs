//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class TapGestureRecognizerGeneratedExtension
    {
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand? command)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            mauiObject.Command = (System.Windows.Input.ICommand?)command;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand?>, ValueBuilder<System.Windows.Input.ICommand?>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand?>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand?>, LazyValueBuilder<System.Windows.Input.ICommand?>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand?>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand?>, BindingBuilder<System.Windows.Input.ICommand?>> buildBinding)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand?>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.CommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object? commandParameter)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            mauiObject.CommandParameter = (object?)commandParameter;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object?>, ValueBuilder<object?>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<object?>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object?>, LazyValueBuilder<object?>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<object?>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object?>, BindingBuilder<object?>> buildBinding)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<object?>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.CommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T NumberOfTapsRequired<T>(this T obj,
            int numberOfTapsRequired)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            mauiObject.NumberOfTapsRequired = (int)numberOfTapsRequired;
            return obj;
        }
        
        public static T NumberOfTapsRequired<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.NumberOfTapsRequired = builder.GetValue();
            return obj;
        }
        
        public static T NumberOfTapsRequired<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.NumberOfTapsRequired = builder.GetValue();
            return obj;
        }
        
        public static T NumberOfTapsRequired<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.NumberOfTapsRequiredProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Buttons<T>(this T obj,
            Microsoft.Maui.Controls.ButtonsMask buttons)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            mauiObject.Buttons = (Microsoft.Maui.Controls.ButtonsMask)buttons;
            return obj;
        }
        
        public static T Buttons<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ButtonsMask>, ValueBuilder<Microsoft.Maui.Controls.ButtonsMask>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ButtonsMask>());
            if (builder.ValueIsSet()) mauiObject.Buttons = builder.GetValue();
            return obj;
        }
        
        public static T Buttons<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ButtonsMask>, LazyValueBuilder<Microsoft.Maui.Controls.ButtonsMask>> buildValue)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ButtonsMask>());
            if (builder.ValueIsSet()) mauiObject.Buttons = builder.GetValue();
            return obj;
        }
        
        public static T Buttons<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ButtonsMask>, BindingBuilder<Microsoft.Maui.Controls.ButtonsMask>> buildBinding)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ButtonsMask>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.ButtonsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnTapped<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.TappedEventArgs>? handler)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            mauiObject.Tapped += handler;
            return obj;
        }
        
        public static T OnTapped<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            mauiObject.Tapped += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
