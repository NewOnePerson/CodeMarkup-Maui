//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class InputViewGeneratedExtension
    {
        public static T MaxLength<T>(this T obj,
            int maxLength)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.MaxLength = (int)maxLength;
            return obj;
        }
        
        public static T MaxLength<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.MaxLength = builder.GetValue();
            return obj;
        }
        
        public static T MaxLength<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.MaxLength = builder.GetValue();
            return obj;
        }
        
        public static T MaxLength<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.InputView.MaxLengthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.Text = (string)text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.InputView.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            Microsoft.Maui.Keyboard keyboard)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.Keyboard = (Microsoft.Maui.Keyboard)keyboard;
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Keyboard>, ValueBuilder<Microsoft.Maui.Keyboard>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Keyboard>());
            if (builder.ValueIsSet()) mauiObject.Keyboard = builder.GetValue();
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Keyboard>, LazyValueBuilder<Microsoft.Maui.Keyboard>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Keyboard>());
            if (builder.ValueIsSet()) mauiObject.Keyboard = builder.GetValue();
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Keyboard>, BindingBuilder<Microsoft.Maui.Keyboard>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Keyboard>(mauiObject, Microsoft.Maui.Controls.InputView.KeyboardProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsSpellCheckEnabled<T>(this T obj,
            bool isSpellCheckEnabled)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.IsSpellCheckEnabled = (bool)isSpellCheckEnabled;
            return obj;
        }
        
        public static T IsSpellCheckEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsSpellCheckEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsSpellCheckEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsSpellCheckEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsSpellCheckEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsReadOnly<T>(this T obj,
            bool isReadOnly)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.IsReadOnly = (bool)isReadOnly;
            return obj;
        }
        
        public static T IsReadOnly<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsReadOnly = builder.GetValue();
            return obj;
        }
        
        public static T IsReadOnly<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsReadOnly = builder.GetValue();
            return obj;
        }
        
        public static T IsReadOnly<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.InputView.IsReadOnlyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            string placeholder)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.Placeholder = (string)placeholder;
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Placeholder = builder.GetValue();
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Placeholder = builder.GetValue();
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.InputView.PlaceholderProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T PlaceholderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color placeholderColor)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.PlaceholderColor = (Microsoft.Maui.Graphics.Color)placeholderColor;
            return obj;
        }
        
        public static T PlaceholderColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.PlaceholderColor = builder.GetValue();
            return obj;
        }
        
        public static T PlaceholderColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.PlaceholderColor = builder.GetValue();
            return obj;
        }
        
        public static T PlaceholderColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.InputView.PlaceholderColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.InputView.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.CharacterSpacing = (double)characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.InputView.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform textTransform)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.TextTransform = (Microsoft.Maui.TextTransform)textTransform;
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextTransform>, ValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) mauiObject.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextTransform>, LazyValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) mauiObject.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextTransform>, BindingBuilder<Microsoft.Maui.TextTransform>> buildBinding)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.InputView.TextTransformProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnTextChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.TextChangedEventArgs> handler)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.TextChanged += handler;
            return obj;
        }
        
        public static T OnTextChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.TextChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
