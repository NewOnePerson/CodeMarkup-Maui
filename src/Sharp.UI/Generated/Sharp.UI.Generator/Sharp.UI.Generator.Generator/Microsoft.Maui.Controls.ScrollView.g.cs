//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ScrollViewGeneratedExtension
    {
        public static T LayoutAreaOverride<T>(this T obj,
            Microsoft.Maui.Graphics.Rect layoutAreaOverride)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.LayoutAreaOverride = (Microsoft.Maui.Graphics.Rect)layoutAreaOverride;
            return obj;
        }
        
        public static T LayoutAreaOverride<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Rect>, ValueBuilder<Microsoft.Maui.Graphics.Rect>> buildValue)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Rect>());
            if (builder.ValueIsSet()) mauiObject.LayoutAreaOverride = builder.GetValue();
            return obj;
        }
        
        public static T Content<T>(this T obj,
            Microsoft.Maui.Controls.View content)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.Content = (Microsoft.Maui.Controls.View)content;
            return obj;
        }
        
        public static T Content<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.View>, ValueBuilder<Microsoft.Maui.Controls.View>> buildValue)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.View>());
            if (builder.ValueIsSet()) mauiObject.Content = builder.GetValue();
            return obj;
        }
        
        public static T Orientation<T>(this T obj,
            Microsoft.Maui.ScrollOrientation orientation)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.Orientation = (Microsoft.Maui.ScrollOrientation)orientation;
            return obj;
        }
        
        public static T Orientation<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollOrientation>, ValueBuilder<Microsoft.Maui.ScrollOrientation>> buildValue)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollOrientation>());
            if (builder.ValueIsSet()) mauiObject.Orientation = builder.GetValue();
            return obj;
        }
        
        public static T Orientation<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollOrientation>, BindingBuilder<Microsoft.Maui.ScrollOrientation>> buildBinding)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollOrientation>(mauiObject, Microsoft.Maui.Controls.ScrollView.OrientationProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.HorizontalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)horizontalScrollBarVisibility;
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ScrollView.HorizontalScrollBarVisibilityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.VerticalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)verticalScrollBarVisibility;
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ScrollView.VerticalScrollBarVisibilityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ScrollToRequestedEventArgs> handler)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.ScrollToRequested += handler;
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.ScrollToRequested += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ScrolledEventArgs> handler)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.Scrolled += handler;
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.Scrolled += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
