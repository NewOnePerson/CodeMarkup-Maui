//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ApplicationGeneratedExtension
    {
        public static T Current<T>(this T obj,
            Microsoft.Maui.Controls.Application? current)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            Microsoft.Maui.Controls.Application.Current = (Microsoft.Maui.Controls.Application?)current;
            return obj;
        }
        
        public static T Current<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Application?>, ValueBuilder<Microsoft.Maui.Controls.Application?>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Application?>());
            if (builder.ValueIsSet()) Microsoft.Maui.Controls.Application.Current = builder.GetValue();
            return obj;
        }
        
        public static T Current<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Application?>, LazyValueBuilder<Microsoft.Maui.Controls.Application?>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Application?>());
            if (builder.ValueIsSet()) Microsoft.Maui.Controls.Application.Current = builder.GetValue();
            return obj;
        }
        
        public static T MainPage<T>(this T obj,
            Microsoft.Maui.Controls.Page? mainPage)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.MainPage = (Microsoft.Maui.Controls.Page?)mainPage;
            return obj;
        }
        
        public static T MainPage<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Page?>, ValueBuilder<Microsoft.Maui.Controls.Page?>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Page?>());
            if (builder.ValueIsSet()) mauiObject.MainPage = builder.GetValue();
            return obj;
        }
        
        public static T MainPage<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Page?>, LazyValueBuilder<Microsoft.Maui.Controls.Page?>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Page?>());
            if (builder.ValueIsSet()) mauiObject.MainPage = builder.GetValue();
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            Microsoft.Maui.Controls.ResourceDictionary resources)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.Resources = (Microsoft.Maui.Controls.ResourceDictionary)resources;
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>, ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>());
            if (builder.ValueIsSet()) mauiObject.Resources = builder.GetValue();
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>, LazyValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>());
            if (builder.ValueIsSet()) mauiObject.Resources = builder.GetValue();
            return obj;
        }
        
        public static T UserAppTheme<T>(this T obj,
            Microsoft.Maui.ApplicationModel.AppTheme userAppTheme)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.UserAppTheme = (Microsoft.Maui.ApplicationModel.AppTheme)userAppTheme;
            return obj;
        }
        
        public static T UserAppTheme<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>, ValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>());
            if (builder.ValueIsSet()) mauiObject.UserAppTheme = builder.GetValue();
            return obj;
        }
        
        public static T UserAppTheme<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>, LazyValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.ApplicationModel.AppTheme>());
            if (builder.ValueIsSet()) mauiObject.UserAppTheme = builder.GetValue();
            return obj;
        }
        
        public static T AccentColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? accentColor)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            Microsoft.Maui.Controls.Application.AccentColor = (Microsoft.Maui.Graphics.Color?)accentColor;
            return obj;
        }
        
        public static T AccentColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color?>, ValueBuilder<Microsoft.Maui.Graphics.Color?>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color?>());
            if (builder.ValueIsSet()) Microsoft.Maui.Controls.Application.AccentColor = builder.GetValue();
            return obj;
        }
        
        public static T AccentColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color?>, LazyValueBuilder<Microsoft.Maui.Graphics.Color?>> buildValue)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color?>());
            if (builder.ValueIsSet()) Microsoft.Maui.Controls.Application.AccentColor = builder.GetValue();
            return obj;
        }
        
        public static T OnRequestedThemeChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.AppThemeChangedEventArgs> handler)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.RequestedThemeChanged += handler;
            return obj;
        }
        
        public static T OnRequestedThemeChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.RequestedThemeChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPopped<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPoppedEventArgs>? handler)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPopped += handler;
            return obj;
        }
        
        public static T OnModalPopped<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPopped += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPopping<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPoppingEventArgs>? handler)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPopping += handler;
            return obj;
        }
        
        public static T OnModalPopping<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPopping += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPushed<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPushedEventArgs>? handler)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPushed += handler;
            return obj;
        }
        
        public static T OnModalPushed<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPushed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnModalPushing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ModalPushingEventArgs>? handler)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPushing += handler;
            return obj;
        }
        
        public static T OnModalPushing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.ModalPushing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPageAppearing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.Page>? handler)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.PageAppearing += handler;
            return obj;
        }
        
        public static T OnPageAppearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.PageAppearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPageDisappearing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.Page>? handler)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.PageDisappearing += handler;
            return obj;
        }
        
        public static T OnPageDisappearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IApplication
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Application>(obj);
            mauiObject.PageDisappearing += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
