//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class CellGeneratedExtension
    {
        public static T ContextActions<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.MenuItem> contextActions)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            foreach (var item in contextActions)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.MenuItem>(item);
                mauiObject.ContextActions.Add(mauiItem);
            }
            return obj;
        }

        public static T ContextActions<T>(this T obj,
            params Microsoft.Maui.Controls.MenuItem[] contextActions)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            foreach (var item in contextActions)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.MenuItem>(item);
                mauiObject.ContextActions.Add(mauiItem);
            }
            return obj;
        }
        
        public static T IsContextActionsLegacyModeEnabled<T>(this T obj,
            bool isContextActionsLegacyModeEnabled)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.IsContextActionsLegacyModeEnabled = (bool)isContextActionsLegacyModeEnabled;
            return obj;
        }
        
        public static T IsContextActionsLegacyModeEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsContextActionsLegacyModeEnabled = builder.GetValue();
            return obj;
        }
        
        public static T Height<T>(this T obj,
            double height)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.Height = (double)height;
            return obj;
        }
        
        public static T Height<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.Height = builder.GetValue();
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            bool isEnabled)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.IsEnabled = (bool)isEnabled;
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Cell.IsEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnAppearing<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.Appearing += handler;
            return obj;
        }
        
        public static T OnAppearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.Appearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDisappearing<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.Disappearing += handler;
            return obj;
        }
        
        public static T OnDisappearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.Disappearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnForceUpdateSizeRequested<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.ForceUpdateSizeRequested += handler;
            return obj;
        }
        
        public static T OnForceUpdateSizeRequested<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.ForceUpdateSizeRequested += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnTapped<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.Tapped += handler;
            return obj;
        }
        
        public static T OnTapped<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ICell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Cell>(obj);
            mauiObject.Tapped += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
