//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class SwitchCellGeneratedExtension
    {
        public static T OnColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color onColor)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            mauiObject.OnColor = (Microsoft.Maui.Graphics.Color)onColor;
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.OnColor = builder.GetValue();
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.OnColor = builder.GetValue();
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.SwitchCell.OnColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T On<T>(this T obj,
            bool on)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            mauiObject.On = (bool)on;
            return obj;
        }
        
        public static T On<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.On = builder.GetValue();
            return obj;
        }
        
        public static T On<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.On = builder.GetValue();
            return obj;
        }
        
        public static T On<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.SwitchCell.OnProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            mauiObject.Text = (string)text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.SwitchCell.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnOnChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ToggledEventArgs> handler)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            mauiObject.OnChanged += handler;
            return obj;
        }
        
        public static T OnOnChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ISwitchCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.SwitchCell>(obj);
            mauiObject.OnChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
