//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ShellGeneratedExtension
    {
        public static T FlyoutVerticalScrollMode<T>(this T obj,
            Microsoft.Maui.Controls.ScrollMode flyoutVerticalScrollMode)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutVerticalScrollMode = (Microsoft.Maui.Controls.ScrollMode)flyoutVerticalScrollMode;
            return obj;
        }
        
        public static T FlyoutVerticalScrollMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ScrollMode>, ValueBuilder<Microsoft.Maui.Controls.ScrollMode>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ScrollMode>());
            if (builder.ValueIsSet()) mauiObject.FlyoutVerticalScrollMode = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutVerticalScrollMode<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ScrollMode>, LazyValueBuilder<Microsoft.Maui.Controls.ScrollMode>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ScrollMode>());
            if (builder.ValueIsSet()) mauiObject.FlyoutVerticalScrollMode = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutVerticalScrollMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ScrollMode>, BindingBuilder<Microsoft.Maui.Controls.ScrollMode>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ScrollMode>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutIcon<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource flyoutIcon)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutIcon = (Microsoft.Maui.Controls.ImageSource)flyoutIcon;
            return obj;
        }
        
        public static T FlyoutIcon<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.FlyoutIcon = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutIcon<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>, LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.FlyoutIcon = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutIcon<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutIconProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            Microsoft.Maui.Controls.ShellItem currentItem)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.CurrentItem = (Microsoft.Maui.Controls.ShellItem)currentItem;
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ShellItem>, ValueBuilder<Microsoft.Maui.Controls.ShellItem>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ShellItem>());
            if (builder.ValueIsSet()) mauiObject.CurrentItem = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ShellItem>, LazyValueBuilder<Microsoft.Maui.Controls.ShellItem>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ShellItem>());
            if (builder.ValueIsSet()) mauiObject.CurrentItem = builder.GetValue();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ShellItem>, BindingBuilder<Microsoft.Maui.Controls.ShellItem>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ShellItem>(mauiObject, Microsoft.Maui.Controls.Shell.CurrentItemProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutBackgroundImage<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource flyoutBackgroundImage)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutBackgroundImage = (Microsoft.Maui.Controls.ImageSource)flyoutBackgroundImage;
            return obj;
        }
        
        public static T FlyoutBackgroundImage<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackgroundImage = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackgroundImage<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>, LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackgroundImage = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackgroundImage<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T obj,
            Microsoft.Maui.Aspect flyoutBackgroundImageAspect)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutBackgroundImageAspect = (Microsoft.Maui.Aspect)flyoutBackgroundImageAspect;
            return obj;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Aspect>, ValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackgroundImageAspect = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Aspect>, LazyValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackgroundImageAspect = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Aspect>, BindingBuilder<Microsoft.Maui.Aspect>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Aspect>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutBackgroundColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color flyoutBackgroundColor)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutBackgroundColor = (Microsoft.Maui.Graphics.Color)flyoutBackgroundColor;
            return obj;
        }
        
        public static T FlyoutBackgroundColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackgroundColor = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackgroundColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackgroundColor = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackgroundColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutBackground<T>(this T obj,
            Microsoft.Maui.Controls.Brush flyoutBackground)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutBackground = (Microsoft.Maui.Controls.Brush)flyoutBackground;
            return obj;
        }
        
        public static T FlyoutBackground<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush>, ValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackground = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackground<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Brush>, LazyValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackground = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackground<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush>, BindingBuilder<Microsoft.Maui.Controls.Brush>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutBackdrop<T>(this T obj,
            Microsoft.Maui.Controls.Brush flyoutBackdrop)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutBackdrop = (Microsoft.Maui.Controls.Brush)flyoutBackdrop;
            return obj;
        }
        
        public static T FlyoutBackdrop<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush>, ValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackdrop = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackdrop<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Brush>, LazyValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBackdrop = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBackdrop<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush>, BindingBuilder<Microsoft.Maui.Controls.Brush>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutWidth<T>(this T obj,
            double flyoutWidth)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutWidth = (double)flyoutWidth;
            return obj;
        }
        
        public static T FlyoutWidth<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FlyoutWidth = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutWidth<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FlyoutWidth = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutWidth<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutWidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutHeight<T>(this T obj,
            double flyoutHeight)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutHeight = (double)flyoutHeight;
            return obj;
        }
        
        public static T FlyoutHeight<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeight = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeight<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeight = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeight<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutHeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutBehavior<T>(this T obj,
            Microsoft.Maui.FlyoutBehavior flyoutBehavior)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutBehavior = (Microsoft.Maui.FlyoutBehavior)flyoutBehavior;
            return obj;
        }
        
        public static T FlyoutBehavior<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.FlyoutBehavior>, ValueBuilder<Microsoft.Maui.FlyoutBehavior>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.FlyoutBehavior>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBehavior = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBehavior<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.FlyoutBehavior>, LazyValueBuilder<Microsoft.Maui.FlyoutBehavior>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.FlyoutBehavior>());
            if (builder.ValueIsSet()) mauiObject.FlyoutBehavior = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutBehavior<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.FlyoutBehavior>, BindingBuilder<Microsoft.Maui.FlyoutBehavior>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.FlyoutBehavior>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutHeader<T>(this T obj,
            object flyoutHeader)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutHeader = (object)flyoutHeader;
            return obj;
        }
        
        public static T FlyoutHeader<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeader = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeader<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeader = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeader<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutFooter<T>(this T obj,
            object flyoutFooter)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutFooter = (object)flyoutFooter;
            return obj;
        }
        
        public static T FlyoutFooter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.FlyoutFooter = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutFooter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.FlyoutFooter = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutFooter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutFooterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T obj,
            Microsoft.Maui.Controls.FlyoutHeaderBehavior flyoutHeaderBehavior)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutHeaderBehavior = (Microsoft.Maui.Controls.FlyoutHeaderBehavior)flyoutHeaderBehavior;
            return obj;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>, ValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeaderBehavior = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>, LazyValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeaderBehavior = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>, BindingBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate flyoutHeaderTemplate)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutHeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)flyoutHeaderTemplate;
            return obj;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeaderTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FlyoutHeaderTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutHeaderTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T FlyoutFooterTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate flyoutFooterTemplate)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutFooterTemplate = (Microsoft.Maui.Controls.DataTemplate)flyoutFooterTemplate;
            return obj;
        }
        
        public static T FlyoutFooterTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FlyoutFooterTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutFooterTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FlyoutFooterTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutFooterTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutFooterTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutFooterTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T FlyoutIsPresented<T>(this T obj,
            bool flyoutIsPresented)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutIsPresented = (bool)flyoutIsPresented;
            return obj;
        }
        
        public static T FlyoutIsPresented<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FlyoutIsPresented = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutIsPresented<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FlyoutIsPresented = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutIsPresented<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Items<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem> items)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            foreach (var item in items)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.ShellItem>(item);
                mauiObject.Items.Add(mauiItem);
            }
            return obj;
        }

        public static T Items<T>(this T obj,
            params Microsoft.Maui.Controls.ShellItem[] items)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            foreach (var item in items)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.ShellItem>(item);
                mauiObject.Items.Add(mauiItem);
            }
            return obj;
        }

        public static T Items<T>(this T obj,
            System.Func<LazyValueBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>, LazyValueBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>());
            if (builder.ValueIsSet())
            {
                var items = builder.GetValue();
                foreach (var item in items) 
                {
                    var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.ShellItem>(item);
                    mauiObject.Items.Add(mauiItem);
                }
            }
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate itemTemplate)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.ItemTemplate = (Microsoft.Maui.Controls.DataTemplate)itemTemplate;
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.ItemTemplate = builder.GetValue();
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.ItemTemplate = builder.GetValue();
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.Shell.ItemTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.ItemTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T MenuItemTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate menuItemTemplate)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.MenuItemTemplate = (Microsoft.Maui.Controls.DataTemplate)menuItemTemplate;
            return obj;
        }
        
        public static T MenuItemTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.MenuItemTemplate = builder.GetValue();
            return obj;
        }
        
        public static T MenuItemTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.MenuItemTemplate = builder.GetValue();
            return obj;
        }
        
        public static T MenuItemTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MenuItemTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.MenuItemTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T FlyoutContent<T>(this T obj,
            object flyoutContent)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutContent = (object)flyoutContent;
            return obj;
        }
        
        public static T FlyoutContent<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.FlyoutContent = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutContent<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.FlyoutContent = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutContent<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutContentTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate flyoutContentTemplate)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutContentTemplate = (Microsoft.Maui.Controls.DataTemplate)flyoutContentTemplate;
            return obj;
        }
        
        public static T FlyoutContentTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FlyoutContentTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutContentTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FlyoutContentTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutContentTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlyoutContentTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.FlyoutContentTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T OnNavigated<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ShellNavigatedEventArgs> handler)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.Navigated += handler;
            return obj;
        }
        
        public static T OnNavigated<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.Navigated += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnNavigating<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ShellNavigatingEventArgs> handler)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.Navigating += handler;
            return obj;
        }
        
        public static T OnNavigating<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IShell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Shell>(obj);
            mauiObject.Navigating += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
