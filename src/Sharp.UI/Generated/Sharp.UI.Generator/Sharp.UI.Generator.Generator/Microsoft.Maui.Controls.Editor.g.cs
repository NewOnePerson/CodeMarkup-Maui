//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class EditorGeneratedExtension
    {
        public static T AutoSize<T>(this T obj,
            Microsoft.Maui.Controls.EditorAutoSizeOption autoSize)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.AutoSize = (Microsoft.Maui.Controls.EditorAutoSizeOption)autoSize;
            return obj;
        }
        
        public static T AutoSize<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.EditorAutoSizeOption>, ValueBuilder<Microsoft.Maui.Controls.EditorAutoSizeOption>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.EditorAutoSizeOption>());
            if (builder.ValueIsSet()) mauiObject.AutoSize = builder.GetValue();
            return obj;
        }
        
        public static T AutoSize<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.EditorAutoSizeOption>, BindingBuilder<Microsoft.Maui.Controls.EditorAutoSizeOption>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.EditorAutoSizeOption>(mauiObject, Microsoft.Maui.Controls.Editor.AutoSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) mauiObject.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Editor.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsTextPredictionEnabled<T>(this T obj,
            bool isTextPredictionEnabled)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.IsTextPredictionEnabled = (bool)isTextPredictionEnabled;
            return obj;
        }
        
        public static T IsTextPredictionEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsTextPredictionEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsTextPredictionEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Editor.IsTextPredictionEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CursorPosition<T>(this T obj,
            int cursorPosition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.CursorPosition = (int)cursorPosition;
            return obj;
        }
        
        public static T CursorPosition<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.CursorPosition = builder.GetValue();
            return obj;
        }
        
        public static T CursorPosition<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.Editor.CursorPositionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectionLength<T>(this T obj,
            int selectionLength)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.SelectionLength = (int)selectionLength;
            return obj;
        }
        
        public static T SelectionLength<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.SelectionLength = builder.GetValue();
            return obj;
        }
        
        public static T SelectionLength<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.Editor.SelectionLengthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.FontFamily = (string)fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Editor.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.FontSize = (double)fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Editor.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.HorizontalTextAlignment = (Microsoft.Maui.TextAlignment)horizontalTextAlignment;
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.HorizontalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Editor.HorizontalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.VerticalTextAlignment = (Microsoft.Maui.TextAlignment)verticalTextAlignment;
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.VerticalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Editor.VerticalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Editor.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnCompleted<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.Completed += handler;
            return obj;
        }
        
        public static T OnCompleted<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.Completed += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
