//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class CompareStateTriggerGeneratedExtension
    {
        public static T Property<T>(this T obj,
            object property)
            where T : Sharp.UI.ICompareStateTrigger
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CompareStateTrigger>(obj);
            mauiObject.Property = (object)property;
            return obj;
        }
        
        public static T Property<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICompareStateTrigger
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CompareStateTrigger>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Property = builder.GetValue();
            return obj;
        }
        
        public static T Property<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.ICompareStateTrigger
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CompareStateTrigger>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.CompareStateTrigger.PropertyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Value<T>(this T obj,
            object value)
            where T : Sharp.UI.ICompareStateTrigger
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CompareStateTrigger>(obj);
            mauiObject.Value = (object)value;
            return obj;
        }
        
        public static T Value<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.ICompareStateTrigger
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CompareStateTrigger>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Value = builder.GetValue();
            return obj;
        }
        
        public static T Value<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.ICompareStateTrigger
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CompareStateTrigger>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.CompareStateTrigger.ValueProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
