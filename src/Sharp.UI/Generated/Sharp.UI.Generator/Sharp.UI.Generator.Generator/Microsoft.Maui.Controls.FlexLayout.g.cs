//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class FlexLayoutGeneratedExtension
    {
        public static T Direction<T>(this T obj,
            Microsoft.Maui.Layouts.FlexDirection direction)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            mauiObject.Direction = (Microsoft.Maui.Layouts.FlexDirection)direction;
            return obj;
        }
        
        public static T Direction<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexDirection>, ValueBuilder<Microsoft.Maui.Layouts.FlexDirection>> buildValue)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexDirection>());
            if (builder.ValueIsSet()) mauiObject.Direction = builder.GetValue();
            return obj;
        }
        
        public static T Direction<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexDirection>, BindingBuilder<Microsoft.Maui.Layouts.FlexDirection>> buildBinding)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexDirection>(mauiObject, Microsoft.Maui.Controls.FlexLayout.DirectionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            Microsoft.Maui.Layouts.FlexJustify justifyContent)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            mauiObject.JustifyContent = (Microsoft.Maui.Layouts.FlexJustify)justifyContent;
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexJustify>, ValueBuilder<Microsoft.Maui.Layouts.FlexJustify>> buildValue)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexJustify>());
            if (builder.ValueIsSet()) mauiObject.JustifyContent = builder.GetValue();
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexJustify>, BindingBuilder<Microsoft.Maui.Layouts.FlexJustify>> buildBinding)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexJustify>(mauiObject, Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            Microsoft.Maui.Layouts.FlexAlignContent alignContent)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            mauiObject.AlignContent = (Microsoft.Maui.Layouts.FlexAlignContent)alignContent;
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexAlignContent>, ValueBuilder<Microsoft.Maui.Layouts.FlexAlignContent>> buildValue)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexAlignContent>());
            if (builder.ValueIsSet()) mauiObject.AlignContent = builder.GetValue();
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexAlignContent>, BindingBuilder<Microsoft.Maui.Layouts.FlexAlignContent>> buildBinding)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexAlignContent>(mauiObject, Microsoft.Maui.Controls.FlexLayout.AlignContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            Microsoft.Maui.Layouts.FlexAlignItems alignItems)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            mauiObject.AlignItems = (Microsoft.Maui.Layouts.FlexAlignItems)alignItems;
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexAlignItems>, ValueBuilder<Microsoft.Maui.Layouts.FlexAlignItems>> buildValue)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexAlignItems>());
            if (builder.ValueIsSet()) mauiObject.AlignItems = builder.GetValue();
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexAlignItems>, BindingBuilder<Microsoft.Maui.Layouts.FlexAlignItems>> buildBinding)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexAlignItems>(mauiObject, Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            Microsoft.Maui.Layouts.FlexPosition position)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            mauiObject.Position = (Microsoft.Maui.Layouts.FlexPosition)position;
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexPosition>, ValueBuilder<Microsoft.Maui.Layouts.FlexPosition>> buildValue)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexPosition>());
            if (builder.ValueIsSet()) mauiObject.Position = builder.GetValue();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexPosition>, BindingBuilder<Microsoft.Maui.Layouts.FlexPosition>> buildBinding)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexPosition>(mauiObject, Microsoft.Maui.Controls.FlexLayout.PositionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            Microsoft.Maui.Layouts.FlexWrap wrap)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            mauiObject.Wrap = (Microsoft.Maui.Layouts.FlexWrap)wrap;
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexWrap>, ValueBuilder<Microsoft.Maui.Layouts.FlexWrap>> buildValue)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexWrap>());
            if (builder.ValueIsSet()) mauiObject.Wrap = builder.GetValue();
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexWrap>, BindingBuilder<Microsoft.Maui.Layouts.FlexWrap>> buildBinding)
            where T : Sharp.UI.IFlexLayout
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlexLayout>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexWrap>(mauiObject, Microsoft.Maui.Controls.FlexLayout.WrapProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
