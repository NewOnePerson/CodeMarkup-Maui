//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class StructuredItemsViewGeneratedExtension
    {
        public static T Header<T>(this T obj,
            object header)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.Header = (object)header;
            return obj;
        }
        
        public static T Header<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Header = builder.GetValue();
            return obj;
        }
        
        public static T Header<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.StructuredItemsView.HeaderProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate headerTemplate)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.HeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)headerTemplate;
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.HeaderTemplate = builder.GetValue();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.StructuredItemsView.HeaderTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.HeaderTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            object footer)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.Footer = (object)footer;
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Footer = builder.GetValue();
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.StructuredItemsView.FooterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate footerTemplate)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.FooterTemplate = (Microsoft.Maui.Controls.DataTemplate)footerTemplate;
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FooterTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.StructuredItemsView.FooterTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.FooterTemplate = new DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            Microsoft.Maui.Controls.IItemsLayout itemsLayout)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.ItemsLayout = (Microsoft.Maui.Controls.IItemsLayout)itemsLayout;
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IItemsLayout>, ValueBuilder<Microsoft.Maui.Controls.IItemsLayout>> buildValue)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.IItemsLayout>());
            if (builder.ValueIsSet()) mauiObject.ItemsLayout = builder.GetValue();
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.IItemsLayout>, BindingBuilder<Microsoft.Maui.Controls.IItemsLayout>> buildBinding)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.IItemsLayout>(mauiObject, Microsoft.Maui.Controls.StructuredItemsView.ItemsLayoutProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ItemSizingStrategy<T>(this T obj,
            Microsoft.Maui.Controls.ItemSizingStrategy itemSizingStrategy)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            mauiObject.ItemSizingStrategy = (Microsoft.Maui.Controls.ItemSizingStrategy)itemSizingStrategy;
            return obj;
        }
        
        public static T ItemSizingStrategy<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ItemSizingStrategy>, ValueBuilder<Microsoft.Maui.Controls.ItemSizingStrategy>> buildValue)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ItemSizingStrategy>());
            if (builder.ValueIsSet()) mauiObject.ItemSizingStrategy = builder.GetValue();
            return obj;
        }
        
        public static T ItemSizingStrategy<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ItemSizingStrategy>, BindingBuilder<Microsoft.Maui.Controls.ItemSizingStrategy>> buildBinding)
            where T : Sharp.UI.IStructuredItemsView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.StructuredItemsView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ItemSizingStrategy>(mauiObject, Microsoft.Maui.Controls.StructuredItemsView.ItemSizingStrategyProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
