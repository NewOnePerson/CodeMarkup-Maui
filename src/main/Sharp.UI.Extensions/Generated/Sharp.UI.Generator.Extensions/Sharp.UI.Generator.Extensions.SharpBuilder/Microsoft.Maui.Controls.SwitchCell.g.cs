//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class SwitchCellExtension
    {
        public static T OnColor<T>(this T self,
            Microsoft.Maui.Graphics.Color onColor)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwitchCell.OnColorProperty, onColor);
            return self;
        }
        
        public static T OnColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwitchCell.OnColorProperty, builder.GetValue());
            return self;
        }
        
        public static T OnColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.SwitchCell.OnColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T On<T>(this T self,
            bool on)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwitchCell.OnProperty, on);
            return self;
        }
        
        public static T On<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwitchCell.OnProperty, builder.GetValue());
            return self;
        }
        
        public static T On<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.SwitchCell.OnProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T Text<T>(this T self,
            string text)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwitchCell.TextProperty, text);
            return self;
        }
        
        public static T Text<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwitchCell.TextProperty, builder.GetValue());
            return self;
        }
        
        public static T Text<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.SwitchCell.TextProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T OnOnChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ToggledEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            self.OnChanged += handler;
            return self;
        }
        
        public static T OnOnChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwitchCell
        {
            self.OnChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
