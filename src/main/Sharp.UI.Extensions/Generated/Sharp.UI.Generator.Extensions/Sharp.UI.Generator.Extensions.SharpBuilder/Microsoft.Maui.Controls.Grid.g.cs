//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class GridExtension
    {
        public static T ColumnDefinitions<T>(this T self,
            IList<Microsoft.Maui.Controls.ColumnDefinition> columnDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in columnDefinitions)
                self.ColumnDefinitions.Add(item);
            return self;
        }

        public static T ColumnDefinitions<T>(this T self,
            params Microsoft.Maui.Controls.ColumnDefinition[] columnDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in columnDefinitions)
                self.ColumnDefinitions.Add(item);
            return self;
        }
        
        public static T ColumnDefinitions<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Grid
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.ColumnDefinitionCollection>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Grid.ColumnDefinitionsProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T ColumnDefinitions<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.ColumnDefinitionCollection>, BindingBuilder<Microsoft.Maui.Controls.ColumnDefinitionCollection>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Grid
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ColumnDefinitionCollection>(self, Microsoft.Maui.Controls.Grid.ColumnDefinitionsProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T RowDefinitions<T>(this T self,
            IList<Microsoft.Maui.Controls.RowDefinition> rowDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in rowDefinitions)
                self.RowDefinitions.Add(item);
            return self;
        }

        public static T RowDefinitions<T>(this T self,
            params Microsoft.Maui.Controls.RowDefinition[] rowDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in rowDefinitions)
                self.RowDefinitions.Add(item);
            return self;
        }
        
        public static T RowDefinitions<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Grid
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.RowDefinitionCollection>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Grid.RowDefinitionsProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T RowDefinitions<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.RowDefinitionCollection>, BindingBuilder<Microsoft.Maui.Controls.RowDefinitionCollection>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Grid
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.RowDefinitionCollection>(self, Microsoft.Maui.Controls.Grid.RowDefinitionsProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T RowSpacing<T>(this T self,
            double rowSpacing)
            where T : Microsoft.Maui.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Grid.RowSpacingProperty, rowSpacing);
            return self;
        }
        
        public static T RowSpacing<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Grid
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Grid.RowSpacingProperty, builder.GetValue());
            return self;
        }
        
        public static T RowSpacing<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Grid
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Grid.RowSpacingProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T RowSpacing<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Grid
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Grid.RowSpacingProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateRowSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Grid
        {
            double fromValue = self.RowSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.RowSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateRowSpacingTo", transform, callback, length, easing);
        }
        
        public static T ColumnSpacing<T>(this T self,
            double columnSpacing)
            where T : Microsoft.Maui.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Grid.ColumnSpacingProperty, columnSpacing);
            return self;
        }
        
        public static T ColumnSpacing<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Grid
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Grid.ColumnSpacingProperty, builder.GetValue());
            return self;
        }
        
        public static T ColumnSpacing<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Grid
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Grid.ColumnSpacingProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T ColumnSpacing<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Grid
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Grid.ColumnSpacingProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateColumnSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Grid
        {
            double fromValue = self.ColumnSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.ColumnSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateColumnSpacingTo", transform, callback, length, easing);
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
