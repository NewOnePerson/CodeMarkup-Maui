//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class SwitchExtension
    {
        public static T OnColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color onColor)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.OnColorProperty, onColor);
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.OnColorProperty, builder.GetValue());
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.Switch.OnColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static Task<bool> AnimateOnColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Switch
        {
            Microsoft.Maui.Graphics.Color fromValue = self.OnColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.OnColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateOnColorTo", transform, callback, length, easing);
        }
        
        public static T ThumbColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color thumbColor)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.ThumbColorProperty, thumbColor);
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.ThumbColorProperty, builder.GetValue());
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.Switch.ThumbColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static Task<bool> AnimateThumbColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Switch
        {
            Microsoft.Maui.Graphics.Color fromValue = self.ThumbColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.ThumbColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateThumbColorTo", transform, callback, length, easing);
        }
        
        public static T IsToggled<T>(this T obj,
            bool isToggled)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.IsToggledProperty, isToggled);
            return obj;
        }
        
        public static T IsToggled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.IsToggledProperty, builder.GetValue());
            return obj;
        }
        
        public static T IsToggled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.Switch.IsToggledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnToggled<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ToggledEventArgs> handler)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.Toggled += handler;
            return obj;
        }
        
        public static T OnToggled<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.Toggled += (o, arg) => action(obj);
            return obj;
        }
        
        public static T IsToggled<T>(this T obj,
            object isToggled)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.IsToggledProperty, isToggled);
            return obj;
        }
        
        public static T IsToggled<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.IsToggledProperty, builder.GetValue());
            return obj;
        }
        
        public static T IsToggled<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Switch.IsToggledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            object onColor)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.OnColorProperty, onColor);
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.OnColorProperty, builder.GetValue());
            return obj;
        }
        
        public static T OnColor<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Switch.OnColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            object thumbColor)
            where T : Microsoft.Maui.Controls.Switch
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.ThumbColorProperty, thumbColor);
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Switch.ThumbColorProperty, builder.GetValue());
            return obj;
        }
        
        public static T ThumbColor<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.Switch
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Switch.ThumbColorProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
