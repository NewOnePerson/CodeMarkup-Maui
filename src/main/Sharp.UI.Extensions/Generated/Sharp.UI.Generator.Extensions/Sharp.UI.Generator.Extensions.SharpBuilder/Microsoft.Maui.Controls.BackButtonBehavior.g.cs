//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class BackButtonBehaviorExtension
    {
        public static T Command<T>(this T self,
            System.Windows.Input.ICommand command)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.CommandProperty, command);
            return self;
        }
        
        public static T Command<T>(this T self,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.CommandProperty, builder.GetValue());
            return self;
        }
        
        public static T Command<T>(this T self,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.BackButtonBehavior.CommandProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T CommandParameter<T>(this T self,
            object commandParameter)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.CommandParameterProperty, commandParameter);
            return self;
        }
        
        public static T CommandParameter<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.CommandParameterProperty, builder.GetValue());
            return self;
        }
        
        public static T CommandParameter<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.BackButtonBehavior.CommandParameterProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IconOverride<T>(this T self,
            Microsoft.Maui.Controls.ImageSource iconOverride)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.IconOverrideProperty, iconOverride);
            return self;
        }
        
        public static T IconOverride<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.IconOverrideProperty, builder.GetValue());
            return self;
        }
        
        public static T IconOverride<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.BackButtonBehavior.IconOverrideProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsEnabled<T>(this T self,
            bool isEnabled)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.IsEnabledProperty, isEnabled);
            return self;
        }
        
        public static T IsEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.IsEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T IsEnabled<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.BackButtonBehavior.IsEnabledProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsVisible<T>(this T self,
            bool isVisible)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.IsVisibleProperty, isVisible);
            return self;
        }
        
        public static T IsVisible<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.IsVisibleProperty, builder.GetValue());
            return self;
        }
        
        public static T IsVisible<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.BackButtonBehavior.IsVisibleProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T TextOverride<T>(this T self,
            string textOverride)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.TextOverrideProperty, textOverride);
            return self;
        }
        
        public static T TextOverride<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.BackButtonBehavior.TextOverrideProperty, builder.GetValue());
            return self;
        }
        
        public static T TextOverride<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.BackButtonBehavior
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.BackButtonBehavior.TextOverrideProperty));
            builder.BindProperty();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
