//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class SelectableItemsViewExtension
    {
        public static T SelectedItem<T>(this T obj,
            object selectedItem)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty, selectedItem);
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty, builder.GetValue());
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectedItems<T>(this T obj,
            IList<object> selectedItems)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            foreach (var item in selectedItems)
                obj.SelectedItems.Add(item);
            return obj;
        }

        public static T SelectedItems<T>(this T obj,
            params object[] selectedItems)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            foreach (var item in selectedItems)
                obj.SelectedItems.Add(item);
            return obj;
        }
        
        public static T SelectedItems<T>(this T obj,
            System.Func<BindingBuilder<System.Collections.Generic.IList<object>>, BindingBuilder<System.Collections.Generic.IList<object>>> buidBinding)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidBinding(new BindingBuilder<System.Collections.Generic.IList<object>>(obj, Microsoft.Maui.Controls.SelectableItemsView.SelectedItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectionChangedCommand<T>(this T obj,
            System.Windows.Input.ICommand selectionChangedCommand)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandProperty, selectionChangedCommand);
            return obj;
        }
        
        public static T SelectionChangedCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buidValue)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandProperty, builder.GetValue());
            return obj;
        }
        
        public static T SelectionChangedCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buidBinding)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidBinding(new BindingBuilder<System.Windows.Input.ICommand>(obj, Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectionChangedCommandParameter<T>(this T obj,
            object selectionChangedCommandParameter)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandParameterProperty, selectionChangedCommandParameter);
            return obj;
        }
        
        public static T SelectionChangedCommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandParameterProperty, builder.GetValue());
            return obj;
        }
        
        public static T SelectionChangedCommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            Microsoft.Maui.Controls.SelectionMode selectionMode)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty, selectionMode);
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.SelectionMode>, ValueBuilder<Microsoft.Maui.Controls.SelectionMode>> buidValue)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.SelectionMode>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty, builder.GetValue());
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SelectionMode>, BindingBuilder<Microsoft.Maui.Controls.SelectionMode>> buidBinding)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.SelectionMode>(obj, Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnSelectionChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.SelectionChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            obj.SelectionChanged += handler;
            return obj;
        }
        
        public static T OnSelectionChanged<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SelectableItemsView
        {
            obj.SelectionChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
