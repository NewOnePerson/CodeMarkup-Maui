//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class FlyoutPageExtension
    {
        public static T Detail<T>(this T self,
            Microsoft.Maui.Controls.Page detail)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property Detail");
            self.Detail = detail;
            return self;
        }
        
        public static T IsGestureEnabled<T>(this T self,
            bool isGestureEnabled)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty, isGestureEnabled);
            return self;
        }
        
        public static T IsGestureEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsPresented<T>(this T self,
            bool isPresented)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty, isPresented);
            return self;
        }
        
        public static T IsPresented<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Flyout<T>(this T self,
            Microsoft.Maui.Controls.Page flyout)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property Flyout");
            self.Flyout = flyout;
            return self;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T self,
            Microsoft.Maui.Controls.FlyoutLayoutBehavior flyoutLayoutBehavior)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty, flyoutLayoutBehavior);
            return self;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.FlyoutLayoutBehavior>, IPropertyBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>> configure)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.FlyoutLayoutBehavior>(self, Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnIsPresentedChanged<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            self.IsPresentedChanged += handler;
            return self;
        }
        
        public static T OnIsPresentedChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            self.IsPresentedChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnBackButtonPressed<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.BackButtonPressedEventArgs> handler)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            self.BackButtonPressed += handler;
            return self;
        }
        
        public static T OnBackButtonPressed<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.FlyoutPage
        {
            self.BackButtonPressed += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
