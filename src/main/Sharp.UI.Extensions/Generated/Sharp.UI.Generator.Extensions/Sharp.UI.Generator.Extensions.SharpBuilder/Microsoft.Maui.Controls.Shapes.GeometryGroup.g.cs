//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class GeometryGroupExtension
    {
        public static T Children<T>(this T self,
            IList<Microsoft.Maui.Controls.Shapes.Geometry> children)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        {
            foreach (var item in children)
                self.Children.Add(item);
            return self;
        }

        public static T Children<T>(this T self,
            params Microsoft.Maui.Controls.Shapes.Geometry[] children)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        {
            foreach (var item in children)
                self.Children.Add(item);
            return self;
        }
        
        public static T Children<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.Shapes.GeometryCollection>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.GeometryGroup.ChildrenProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Children<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.Shapes.GeometryCollection>, BindingBuilder<Microsoft.Maui.Controls.Shapes.GeometryCollection>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Shapes.GeometryCollection>(self, Microsoft.Maui.Controls.Shapes.GeometryGroup.ChildrenProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FillRule<T>(this T self,
            Microsoft.Maui.Controls.Shapes.FillRule fillRule)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.GeometryGroup.FillRuleProperty, fillRule);
            return self;
        }
        
        public static T FillRule<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Shapes.FillRule>, ValueBuilder<Microsoft.Maui.Controls.Shapes.FillRule>> buildValue)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Shapes.FillRule>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.GeometryGroup.FillRuleProperty, builder.GetValue());
            return self;
        }
        
        public static T FillRule<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.Shapes.FillRule>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.GeometryGroup.FillRuleProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FillRule<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.Shapes.FillRule>, BindingBuilder<Microsoft.Maui.Controls.Shapes.FillRule>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Shapes.FillRule>(self, Microsoft.Maui.Controls.Shapes.GeometryGroup.FillRuleProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T OnInvalidateGeometryRequested<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        {
            self.InvalidateGeometryRequested += handler;
            return self;
        }
        
        public static T OnInvalidateGeometryRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Shapes.GeometryGroup
        {
            self.InvalidateGeometryRequested += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
