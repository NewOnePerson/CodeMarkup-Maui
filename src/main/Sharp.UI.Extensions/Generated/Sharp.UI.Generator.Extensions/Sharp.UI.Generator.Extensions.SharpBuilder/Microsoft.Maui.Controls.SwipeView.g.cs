//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class SwipeViewExtension
    {
        public static T Threshold<T>(this T self,
            double threshold)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, threshold);
            return self;
        }
        
        public static T Threshold<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, builder.GetValue());
            return self;
        }
        
        public static T Threshold<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.SwipeView
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeView.ThresholdProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Threshold<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.SwipeView
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.SwipeView.ThresholdProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateThresholdTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            double fromValue = self.Threshold;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Threshold = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateThresholdTo", transform, callback, length, easing);
        }
        
        public static T LeftItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> leftItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in leftItems)
                self.LeftItems.Add(item);
            return self;
        }

        public static T LeftItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] leftItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in leftItems)
                self.LeftItems.Add(item);
            return self;
        }
        
        public static T LeftItems<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.SwipeView
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.SwipeItems>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeView.LeftItemsProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T LeftItems<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buildBinding)
        //    where T : Microsoft.Maui.Controls.SwipeView
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.LeftItemsProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T RightItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> rightItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in rightItems)
                self.RightItems.Add(item);
            return self;
        }

        public static T RightItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] rightItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in rightItems)
                self.RightItems.Add(item);
            return self;
        }
        
        public static T RightItems<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.SwipeView
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.SwipeItems>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeView.RightItemsProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T RightItems<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buildBinding)
        //    where T : Microsoft.Maui.Controls.SwipeView
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.RightItemsProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T TopItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> topItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in topItems)
                self.TopItems.Add(item);
            return self;
        }

        public static T TopItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] topItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in topItems)
                self.TopItems.Add(item);
            return self;
        }
        
        public static T TopItems<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.SwipeView
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.SwipeItems>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeView.TopItemsProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T TopItems<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buildBinding)
        //    where T : Microsoft.Maui.Controls.SwipeView
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.TopItemsProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T BottomItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> bottomItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in bottomItems)
                self.BottomItems.Add(item);
            return self;
        }

        public static T BottomItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] bottomItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in bottomItems)
                self.BottomItems.Add(item);
            return self;
        }
        
        public static T BottomItems<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.SwipeView
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.SwipeItems>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeView.BottomItemsProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T BottomItems<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buildBinding)
        //    where T : Microsoft.Maui.Controls.SwipeView
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.BottomItemsProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T OnSwipeStarted<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeStartedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeStarted += handler;
            return self;
        }
        
        public static T OnSwipeStarted<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeStarted += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSwipeChanging<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeChangingEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeChanging += handler;
            return self;
        }
        
        public static T OnSwipeChanging<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeChanging += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSwipeEnded<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeEndedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeEnded += handler;
            return self;
        }
        
        public static T OnSwipeEnded<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeEnded += (o, arg) => action(self);
            return self;
        }
        
        public static T OnOpenRequested<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.OpenRequestedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.OpenRequested += handler;
            return self;
        }
        
        public static T OnOpenRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.OpenRequested += (o, arg) => action(self);
            return self;
        }
        
        public static T OnCloseRequested<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.CloseRequestedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.CloseRequested += handler;
            return self;
        }
        
        public static T OnCloseRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.CloseRequested += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
