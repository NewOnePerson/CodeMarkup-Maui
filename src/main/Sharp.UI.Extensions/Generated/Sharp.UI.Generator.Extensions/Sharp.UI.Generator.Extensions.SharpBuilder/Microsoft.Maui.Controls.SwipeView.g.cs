//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class SwipeViewExtension
    {
        public static T Threshold<T>(this T obj,
            double threshold)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, threshold);
            return obj;
        }
        
        public static T Threshold<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, builder.GetValue());
            return obj;
        }
        
        public static T Threshold<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.SwipeView.ThresholdProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static Task<bool> AnimateThresholdTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            double fromValue = self.Threshold;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Threshold = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateThresholdTo", transform, callback, length, easing);
        }
        
        public static T LeftItems<T>(this T obj,
            IList<Microsoft.Maui.Controls.ISwipeItem> leftItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in leftItems)
                obj.LeftItems.Add(item);
            return obj;
        }

        public static T LeftItems<T>(this T obj,
            params Microsoft.Maui.Controls.ISwipeItem[] leftItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in leftItems)
                obj.LeftItems.Add(item);
            return obj;
        }
        
        public static T LeftItems<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(obj, Microsoft.Maui.Controls.SwipeView.LeftItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RightItems<T>(this T obj,
            IList<Microsoft.Maui.Controls.ISwipeItem> rightItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in rightItems)
                obj.RightItems.Add(item);
            return obj;
        }

        public static T RightItems<T>(this T obj,
            params Microsoft.Maui.Controls.ISwipeItem[] rightItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in rightItems)
                obj.RightItems.Add(item);
            return obj;
        }
        
        public static T RightItems<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(obj, Microsoft.Maui.Controls.SwipeView.RightItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TopItems<T>(this T obj,
            IList<Microsoft.Maui.Controls.ISwipeItem> topItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in topItems)
                obj.TopItems.Add(item);
            return obj;
        }

        public static T TopItems<T>(this T obj,
            params Microsoft.Maui.Controls.ISwipeItem[] topItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in topItems)
                obj.TopItems.Add(item);
            return obj;
        }
        
        public static T TopItems<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(obj, Microsoft.Maui.Controls.SwipeView.TopItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BottomItems<T>(this T obj,
            IList<Microsoft.Maui.Controls.ISwipeItem> bottomItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in bottomItems)
                obj.BottomItems.Add(item);
            return obj;
        }

        public static T BottomItems<T>(this T obj,
            params Microsoft.Maui.Controls.ISwipeItem[] bottomItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in bottomItems)
                obj.BottomItems.Add(item);
            return obj;
        }
        
        public static T BottomItems<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SwipeItems>, BindingBuilder<Microsoft.Maui.Controls.SwipeItems>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.SwipeItems>(obj, Microsoft.Maui.Controls.SwipeView.BottomItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnSwipeStarted<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.SwipeStartedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SwipeStarted += handler;
            return obj;
        }
        
        public static T OnSwipeStarted<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SwipeStarted += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnSwipeChanging<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.SwipeChangingEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SwipeChanging += handler;
            return obj;
        }
        
        public static T OnSwipeChanging<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SwipeChanging += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnSwipeEnded<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.SwipeEndedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SwipeEnded += handler;
            return obj;
        }
        
        public static T OnSwipeEnded<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SwipeEnded += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnOpenRequested<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.OpenRequestedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.OpenRequested += handler;
            return obj;
        }
        
        public static T OnOpenRequested<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.OpenRequested += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnCloseRequested<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.CloseRequestedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.CloseRequested += handler;
            return obj;
        }
        
        public static T OnCloseRequested<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.CloseRequested += (o, arg) => action(obj);
            return obj;
        }
        
        public static T Threshold<T>(this T obj,
            object threshold)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, threshold);
            return obj;
        }
        
        public static T Threshold<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, builder.GetValue());
            return obj;
        }
        
        public static T Threshold<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.SwipeView.ThresholdProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LeftItems<T>(this T obj,
            object leftItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.LeftItemsProperty, leftItems);
            return obj;
        }
        
        public static T LeftItems<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.LeftItemsProperty, builder.GetValue());
            return obj;
        }
        
        public static T LeftItems<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.SwipeView.LeftItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RightItems<T>(this T obj,
            object rightItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.RightItemsProperty, rightItems);
            return obj;
        }
        
        public static T RightItems<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.RightItemsProperty, builder.GetValue());
            return obj;
        }
        
        public static T RightItems<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.SwipeView.RightItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TopItems<T>(this T obj,
            object topItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.TopItemsProperty, topItems);
            return obj;
        }
        
        public static T TopItems<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.TopItemsProperty, builder.GetValue());
            return obj;
        }
        
        public static T TopItems<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.SwipeView.TopItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BottomItems<T>(this T obj,
            object bottomItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.BottomItemsProperty, bottomItems);
            return obj;
        }
        
        public static T BottomItems<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.SwipeView.BottomItemsProperty, builder.GetValue());
            return obj;
        }
        
        public static T BottomItems<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.SwipeView.BottomItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
