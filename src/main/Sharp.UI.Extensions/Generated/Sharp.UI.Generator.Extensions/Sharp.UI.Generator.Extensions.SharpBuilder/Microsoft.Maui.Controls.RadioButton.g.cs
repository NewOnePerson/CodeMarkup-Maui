//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class RadioButtonExtension
    {
        public static T Content<T>(this T self,
            object content)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.ContentProperty, content);
            return self;
        }
        
        public static T Content<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.ContentProperty, builder.GetValue());
            return self;
        }
        
        public static T Content<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.RadioButton.ContentProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T Value<T>(this T self,
            object value)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.ValueProperty, value);
            return self;
        }
        
        public static T Value<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.ValueProperty, builder.GetValue());
            return self;
        }
        
        public static T Value<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.RadioButton.ValueProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsChecked<T>(this T self,
            bool isChecked)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.IsCheckedProperty, isChecked);
            return self;
        }
        
        public static T IsChecked<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.IsCheckedProperty, builder.GetValue());
            return self;
        }
        
        public static T IsChecked<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.RadioButton.IsCheckedProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T GroupName<T>(this T self,
            string groupName)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.GroupNameProperty, groupName);
            return self;
        }
        
        public static T GroupName<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.GroupNameProperty, builder.GetValue());
            return self;
        }
        
        public static T GroupName<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.RadioButton.GroupNameProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T TextColor<T>(this T self,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.TextColorProperty, textColor);
            return self;
        }
        
        public static T TextColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.TextColorProperty, builder.GetValue());
            return self;
        }
        
        public static T TextColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.RadioButton.TextColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            Microsoft.Maui.Graphics.Color fromValue = self.TextColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.TextColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateTextColorTo", transform, callback, length, easing);
        }
        
        public static T CharacterSpacing<T>(this T self,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty, characterSpacing);
            return self;
        }
        
        public static T CharacterSpacing<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty, builder.GetValue());
            return self;
        }
        
        public static T CharacterSpacing<T>(this T self,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateCharacterSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            double fromValue = self.CharacterSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.CharacterSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateCharacterSpacingTo", transform, callback, length, easing);
        }
        
        public static T TextTransform<T>(this T self,
            Microsoft.Maui.TextTransform textTransform)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.TextTransformProperty, textTransform);
            return self;
        }
        
        public static T TextTransform<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextTransform>, ValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.TextTransformProperty, builder.GetValue());
            return self;
        }
        
        public static T TextTransform<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.TextTransform>, BindingBuilder<Microsoft.Maui.TextTransform>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextTransform>(self, Microsoft.Maui.Controls.RadioButton.TextTransformProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FontAttributes<T>(this T self,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontAttributesProperty, fontAttributes);
            return self;
        }
        
        public static T FontAttributes<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontAttributesProperty, builder.GetValue());
            return self;
        }
        
        public static T FontAttributes<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(self, Microsoft.Maui.Controls.RadioButton.FontAttributesProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FontFamily<T>(this T self,
            string fontFamily)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontFamilyProperty, fontFamily);
            return self;
        }
        
        public static T FontFamily<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontFamilyProperty, builder.GetValue());
            return self;
        }
        
        public static T FontFamily<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.RadioButton.FontFamilyProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FontSize<T>(this T self,
            double fontSize)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontSizeProperty, fontSize);
            return self;
        }
        
        public static T FontSize<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontSizeProperty, builder.GetValue());
            return self;
        }
        
        public static T FontSize<T>(this T self,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.RadioButton.FontSizeProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateFontSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            double fromValue = self.FontSize;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.FontSize = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateFontSizeTo", transform, callback, length, easing);
        }
        
        public static T FontAutoScalingEnabled<T>(this T self,
            bool fontAutoScalingEnabled)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
            return self;
        }
        
        public static T FontAutoScalingEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.FontAutoScalingEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T FontAutoScalingEnabled<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.RadioButton.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T BorderWidth<T>(this T self,
            double borderWidth)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.BorderWidthProperty, borderWidth);
            return self;
        }
        
        public static T BorderWidth<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.BorderWidthProperty, builder.GetValue());
            return self;
        }
        
        public static T BorderWidth<T>(this T self,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.RadioButton.BorderWidthProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateBorderWidthTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            double fromValue = self.BorderWidth;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.BorderWidth = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateBorderWidthTo", transform, callback, length, easing);
        }
        
        public static T BorderColor<T>(this T self,
            Microsoft.Maui.Graphics.Color borderColor)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.BorderColorProperty, borderColor);
            return self;
        }
        
        public static T BorderColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.BorderColorProperty, builder.GetValue());
            return self;
        }
        
        public static T BorderColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.RadioButton.BorderColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateBorderColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            Microsoft.Maui.Graphics.Color fromValue = self.BorderColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.BorderColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBorderColorTo", transform, callback, length, easing);
        }
        
        public static T CornerRadius<T>(this T self,
            int cornerRadius)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.CornerRadiusProperty, cornerRadius);
            return self;
        }
        
        public static T CornerRadius<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.RadioButton.CornerRadiusProperty, builder.GetValue());
            return self;
        }
        
        public static T CornerRadius<T>(this T self,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            var builder = buildBinding(new BindingBuilder<int>(self, Microsoft.Maui.Controls.RadioButton.CornerRadiusProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T OnCheckedChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.CheckedChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.CheckedChanged += handler;
            return self;
        }
        
        public static T OnCheckedChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.RadioButton
        {
            self.CheckedChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
