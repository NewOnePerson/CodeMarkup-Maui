//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class VisualElementExtension
    {
        public static T VisualStateGroups<T>(this T self,
            Microsoft.Maui.Controls.VisualStateGroupList visualStateGroups)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, visualStateGroups);
            return self;
        }
        
        public static T VisualStateGroups<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>, ValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, builder.GetValue());
            return self;
        }
        
        public static T VisualStateGroups<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.VisualStateGroupList>, BindingBuilder<Microsoft.Maui.Controls.VisualStateGroupList>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.VisualStateGroupList>(self, Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Microsoft.Maui.Controls.VisualStateGroupList GetVisualStateGroupsValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (Microsoft.Maui.Controls.VisualStateGroupList)self.GetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty);
        }
        
        public static T AutomationExcludedWithChildren<T>(this T self,
            bool? automationExcludedWithChildren)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, automationExcludedWithChildren);
            return self;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T self,
            System.Func<ValueBuilder<bool?>, ValueBuilder<bool?>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<bool?>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, builder.GetValue());
            return self;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T self,
            System.Func<BindingBuilder<bool?>, BindingBuilder<bool?>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<bool?>(self, Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty));
            builder.BindProperty();
            return self;
        }
        
        public static bool? GetAutomationExcludedWithChildrenValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (bool?)self.GetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty);
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T self,
            bool? automationIsInAccessibleTree)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, automationIsInAccessibleTree);
            return self;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T self,
            System.Func<ValueBuilder<bool?>, ValueBuilder<bool?>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<bool?>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, builder.GetValue());
            return self;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T self,
            System.Func<BindingBuilder<bool?>, BindingBuilder<bool?>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<bool?>(self, Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty));
            builder.BindProperty();
            return self;
        }
        
        public static bool? GetAutomationIsInAccessibleTreeValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (bool?)self.GetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty);
        }
        
        public static T AutomationName<T>(this T self,
            string automationName)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.NameProperty, automationName);
            return self;
        }
        
        public static T AutomationName<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.NameProperty, builder.GetValue());
            return self;
        }
        
        public static T AutomationName<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.AutomationProperties.NameProperty));
            builder.BindProperty();
            return self;
        }
        
        public static string GetAutomationNameValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (string)self.GetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty);
        }
        
        public static T AutomationHelpText<T>(this T self,
            string automationHelpText)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, automationHelpText);
            return self;
        }
        
        public static T AutomationHelpText<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, builder.GetValue());
            return self;
        }
        
        public static T AutomationHelpText<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty));
            builder.BindProperty();
            return self;
        }
        
        public static string GetAutomationHelpTextValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (string)self.GetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty);
        }
        
        public static T AutomationLabeledBy<T>(this T self,
            Microsoft.Maui.Controls.VisualElement automationLabeledBy)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, automationLabeledBy);
            return self;
        }
        
        public static T AutomationLabeledBy<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.VisualElement>, ValueBuilder<Microsoft.Maui.Controls.VisualElement>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.VisualElement>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, builder.GetValue());
            return self;
        }
        
        public static T AutomationLabeledBy<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.VisualElement>, BindingBuilder<Microsoft.Maui.Controls.VisualElement>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.VisualElement>(self, Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Microsoft.Maui.Controls.VisualElement GetAutomationLabeledByValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (Microsoft.Maui.Controls.VisualElement)self.GetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty);
        }
        
        public static T SemanticHint<T>(this T self,
            string semanticHint)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SemanticProperties.HintProperty, semanticHint);
            return self;
        }
        
        public static T SemanticHint<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SemanticProperties.HintProperty, builder.GetValue());
            return self;
        }
        
        public static T SemanticHint<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.SemanticProperties.HintProperty));
            builder.BindProperty();
            return self;
        }
        
        public static string GetSemanticHintValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (string)self.GetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty);
        }
        
        public static T SemanticDescription<T>(this T self,
            string semanticDescription)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, semanticDescription);
            return self;
        }
        
        public static T SemanticDescription<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, builder.GetValue());
            return self;
        }
        
        public static T SemanticDescription<T>(this T self,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty));
            builder.BindProperty();
            return self;
        }
        
        public static string GetSemanticDescriptionValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (string)self.GetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty);
        }
        
        public static T SemanticHeadingLevel<T>(this T self,
            Microsoft.Maui.SemanticHeadingLevel semanticHeadingLevel)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, semanticHeadingLevel);
            return self;
        }
        
        public static T SemanticHeadingLevel<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.SemanticHeadingLevel>, ValueBuilder<Microsoft.Maui.SemanticHeadingLevel>> buildValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.SemanticHeadingLevel>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, builder.GetValue());
            return self;
        }
        
        public static T SemanticHeadingLevel<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.SemanticHeadingLevel>, BindingBuilder<Microsoft.Maui.SemanticHeadingLevel>> buildBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.SemanticHeadingLevel>(self, Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Microsoft.Maui.SemanticHeadingLevel GetSemanticHeadingLevelValue<T>(this T self)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            return (Microsoft.Maui.SemanticHeadingLevel)self.GetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty);
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
