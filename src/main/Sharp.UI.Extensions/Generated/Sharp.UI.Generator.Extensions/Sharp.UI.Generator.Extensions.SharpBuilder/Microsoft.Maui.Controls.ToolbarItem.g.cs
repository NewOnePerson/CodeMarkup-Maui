//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class ToolbarItemExtension
    {
        public static T Order<T>(this T obj,
            Microsoft.Maui.Controls.ToolbarItemOrder order)
            where T : Microsoft.Maui.Controls.ToolbarItem
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property Order");
            obj.Order = order;
            return obj;
        }
        
        public static T Order<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ToolbarItemOrder>, ValueBuilder<Microsoft.Maui.Controls.ToolbarItemOrder>> buidValue)
            where T : Microsoft.Maui.Controls.ToolbarItem
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property Order");
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.ToolbarItemOrder>());
            if (builder.ValueIsSet()) obj.Order = builder.GetValue();
            return obj;
        }
        
        public static T Priority<T>(this T obj,
            int priority)
            where T : Microsoft.Maui.Controls.ToolbarItem
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property Priority");
            obj.Priority = priority;
            return obj;
        }
        
        public static T Priority<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.ToolbarItem
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property Priority");
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.Priority = builder.GetValue();
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
