//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class AdaptiveTriggerExtension
    {
        public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowHeight(this Microsoft.Maui.Controls.AdaptiveTrigger self,
            double minWindowHeight)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowHeightProperty, minWindowHeight);
            return self;
        }
        
        public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowHeight(this Microsoft.Maui.Controls.AdaptiveTrigger self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowHeightProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowHeight<TBuilder>(this Microsoft.Maui.Controls.AdaptiveTrigger self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowHeightProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowHeight(this Microsoft.Maui.Controls.AdaptiveTrigger self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowHeightProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowWidth(this Microsoft.Maui.Controls.AdaptiveTrigger self,
            double minWindowWidth)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowWidthProperty, minWindowWidth);
            return self;
        }
        
        public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowWidth(this Microsoft.Maui.Controls.AdaptiveTrigger self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowWidthProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowWidth<TBuilder>(this Microsoft.Maui.Controls.AdaptiveTrigger self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowWidthProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.AdaptiveTrigger MinWindowWidth(this Microsoft.Maui.Controls.AdaptiveTrigger self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.AdaptiveTrigger.MinWindowWidthProperty));
        //    builder.Build();
        //    return self;
        //}
        
    }
}

#pragma warning restore CS8601
#nullable restore
