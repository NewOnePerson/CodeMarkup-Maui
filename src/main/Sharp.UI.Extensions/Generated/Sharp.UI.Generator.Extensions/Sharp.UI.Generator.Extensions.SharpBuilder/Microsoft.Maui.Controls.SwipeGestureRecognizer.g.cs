//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class SwipeGestureRecognizerExtension
    {
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            System.Windows.Input.ICommand command)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty, command);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command<TBuilder>(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<System.Windows.Input.ICommand>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        //    System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            object commandParameter)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty, commandParameter);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter<TBuilder>(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<object>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        //    System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            Microsoft.Maui.SwipeDirection direction)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty, direction);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            System.Func<ValueBuilder<Microsoft.Maui.SwipeDirection>, ValueBuilder<Microsoft.Maui.SwipeDirection>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.SwipeDirection>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction<TBuilder>(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<Microsoft.Maui.SwipeDirection>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        //    System.Func<BindingBuilder<Microsoft.Maui.SwipeDirection>, BindingBuilder<Microsoft.Maui.SwipeDirection>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.SwipeDirection>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            uint threshold)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty, threshold);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            System.Func<ValueBuilder<uint>, ValueBuilder<uint>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<uint>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold<TBuilder>(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<uint>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        //    System.Func<BindingBuilder<uint>, BindingBuilder<uint>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<uint>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer OnSwiped(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.EventHandler<Microsoft.Maui.Controls.SwipedEventArgs> handler)
        {
            self.Swiped += handler;
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer OnSwiped(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.Action<Microsoft.Maui.Controls.SwipeGestureRecognizer> action)
        {
            self.Swiped += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
