//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class CarouselViewExtension
    {
        public static T Loop<T>(this T self,
            bool loop)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.LoopProperty, loop);
            return self;
        }
        
        public static T Loop<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.LoopProperty, builder.GetValue());
            return self;
        }
        
        public static T Loop<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.CarouselView.LoopProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T PeekAreaInsets<T>(this T self,
            Microsoft.Maui.Thickness peekAreaInsets)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PeekAreaInsetsProperty, peekAreaInsets);
            return self;
        }
        
        public static T PeekAreaInsets<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PeekAreaInsetsProperty, builder.GetValue());
            return self;
        }
        
        public static T PeekAreaInsets<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(self, Microsoft.Maui.Controls.CarouselView.PeekAreaInsetsProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T VisibleViews<T>(this T self,
            IList<Microsoft.Maui.Controls.View> visibleViews)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            foreach (var item in visibleViews)
                self.VisibleViews.Add(item);
            return self;
        }

        public static T VisibleViews<T>(this T self,
            params Microsoft.Maui.Controls.View[] visibleViews)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            foreach (var item in visibleViews)
                self.VisibleViews.Add(item);
            return self;
        }
        
        public static T VisibleViews<T>(this T self,
            System.Func<BindingBuilder<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>, BindingBuilder<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>(self, Microsoft.Maui.Controls.CarouselView.VisibleViewsProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsBounceEnabled<T>(this T self,
            bool isBounceEnabled)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.IsBounceEnabledProperty, isBounceEnabled);
            return self;
        }
        
        public static T IsBounceEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.IsBounceEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T IsBounceEnabled<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.CarouselView.IsBounceEnabledProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsSwipeEnabled<T>(this T self,
            bool isSwipeEnabled)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.IsSwipeEnabledProperty, isSwipeEnabled);
            return self;
        }
        
        public static T IsSwipeEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.IsSwipeEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T IsSwipeEnabled<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.CarouselView.IsSwipeEnabledProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsScrollAnimated<T>(this T self,
            bool isScrollAnimated)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.IsScrollAnimatedProperty, isScrollAnimated);
            return self;
        }
        
        public static T IsScrollAnimated<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.IsScrollAnimatedProperty, builder.GetValue());
            return self;
        }
        
        public static T IsScrollAnimated<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.CarouselView.IsScrollAnimatedProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T CurrentItem<T>(this T self,
            object currentItem)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.CurrentItemProperty, currentItem);
            return self;
        }
        
        public static T CurrentItem<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.CurrentItemProperty, builder.GetValue());
            return self;
        }
        
        public static T CurrentItem<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.CarouselView.CurrentItemProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T CurrentItemChangedCommand<T>(this T self,
            System.Windows.Input.ICommand currentItemChangedCommand)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandProperty, currentItemChangedCommand);
            return self;
        }
        
        public static T CurrentItemChangedCommand<T>(this T self,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandProperty, builder.GetValue());
            return self;
        }
        
        public static T CurrentItemChangedCommand<T>(this T self,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T self,
            object currentItemChangedCommandParameter)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandParameterProperty, currentItemChangedCommandParameter);
            return self;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandParameterProperty, builder.GetValue());
            return self;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandParameterProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T Position<T>(this T self,
            int position)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PositionProperty, position);
            return self;
        }
        
        public static T Position<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PositionProperty, builder.GetValue());
            return self;
        }
        
        public static T Position<T>(this T self,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<int>(self, Microsoft.Maui.Controls.CarouselView.PositionProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T PositionChangedCommand<T>(this T self,
            System.Windows.Input.ICommand positionChangedCommand)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PositionChangedCommandProperty, positionChangedCommand);
            return self;
        }
        
        public static T PositionChangedCommand<T>(this T self,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PositionChangedCommandProperty, builder.GetValue());
            return self;
        }
        
        public static T PositionChangedCommand<T>(this T self,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T PositionChangedCommandParameter<T>(this T self,
            object positionChangedCommandParameter)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PositionChangedCommandParameterProperty, positionChangedCommandParameter);
            return self;
        }
        
        public static T PositionChangedCommandParameter<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.PositionChangedCommandParameterProperty, builder.GetValue());
            return self;
        }
        
        public static T PositionChangedCommandParameter<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandParameterProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T ItemsLayout<T>(this T self,
            Microsoft.Maui.Controls.LinearItemsLayout itemsLayout)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.ItemsLayoutProperty, itemsLayout);
            return self;
        }
        
        public static T ItemsLayout<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>, ValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.LinearItemsLayout>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.CarouselView.ItemsLayoutProperty, builder.GetValue());
            return self;
        }
        
        public static T ItemsLayout<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.LinearItemsLayout>, BindingBuilder<Microsoft.Maui.Controls.LinearItemsLayout>> buildBinding)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.LinearItemsLayout>(self, Microsoft.Maui.Controls.CarouselView.ItemsLayoutProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IndicatorView<T>(this T self,
            Microsoft.Maui.Controls.IndicatorView indicatorView)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property IndicatorView");
            self.IndicatorView = indicatorView;
            return self;
        }
        
        public static T IndicatorView<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IndicatorView>, ValueBuilder<Microsoft.Maui.Controls.IndicatorView>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property IndicatorView");
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.IndicatorView>());
            if (builder.ValueIsSet()) self.IndicatorView = builder.GetValue();
            return self;
        }
        
        public static T IsScrolling<T>(this T self,
            bool isScrolling)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property IsScrolling");
            self.IsScrolling = isScrolling;
            return self;
        }
        
        public static T IsScrolling<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property IsScrolling");
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.IsScrolling = builder.GetValue();
            return self;
        }
        
        public static T OnCurrentItemChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.CurrentItemChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.CurrentItemChanged += handler;
            return self;
        }
        
        public static T OnCurrentItemChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.CurrentItemChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPositionChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.PositionChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.PositionChanged += handler;
            return self;
        }
        
        public static T OnPositionChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.CarouselView
        {
            self.PositionChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
