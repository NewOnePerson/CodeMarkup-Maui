//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class ImageExtension
    {
        public static T Aspect<T>(this T self,
            Microsoft.Maui.Aspect aspect)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.Image.AspectProperty, aspect);
            return self;
        }
        
        public static T Aspect<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Aspect>, ValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.Image.AspectProperty, builder.GetValue());
            return self;
        }
        
        public static T Aspect<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Aspect>, BindingBuilder<Microsoft.Maui.Aspect>> buildBinding)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Aspect>(self, Microsoft.Maui.Controls.Image.AspectProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsOpaque<T>(this T self,
            bool isOpaque)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.Image.IsOpaqueProperty, isOpaque);
            return self;
        }
        
        public static T IsOpaque<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.Image.IsOpaqueProperty, builder.GetValue());
            return self;
        }
        
        public static T IsOpaque<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.Image.IsOpaqueProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsAnimationPlaying<T>(this T self,
            bool isAnimationPlaying)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty, isAnimationPlaying);
            return self;
        }
        
        public static T IsAnimationPlaying<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty, builder.GetValue());
            return self;
        }
        
        public static T IsAnimationPlaying<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T Source<T>(this T self,
            Microsoft.Maui.Controls.ImageSource source)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrSetter(Microsoft.Maui.Controls.Image.SourceProperty, source);
            return self;
        }
        
        public static T Source<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) self.SetValueOrSetter(Microsoft.Maui.Controls.Image.SourceProperty, builder.GetValue());
            return self;
        }
        
        public static T Source<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Microsoft.Maui.Controls.Image
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.Image.SourceProperty));
            builder.BindProperty();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
