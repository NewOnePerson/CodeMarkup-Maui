//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class ImageExtension
    {
        public static T Aspect<T>(this T self,
            Microsoft.Maui.Aspect aspect)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Image.AspectProperty, aspect);
            return self;
        }
        
        public static T Aspect<T>(this T self, Func<PropertyContext<Microsoft.Maui.Aspect>, IPropertyBuilder<Microsoft.Maui.Aspect>> configure)
            where T : Microsoft.Maui.Controls.Image
        {
            var context = new PropertyContext<Microsoft.Maui.Aspect>(self, Microsoft.Maui.Controls.Image.AspectProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsOpaque<T>(this T self,
            bool isOpaque)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Image.IsOpaqueProperty, isOpaque);
            return self;
        }
        
        public static T IsOpaque<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.Image
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.Image.IsOpaqueProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsAnimationPlaying<T>(this T self,
            bool isAnimationPlaying)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty, isAnimationPlaying);
            return self;
        }
        
        public static T IsAnimationPlaying<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.Image
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Source<T>(this T self,
            Microsoft.Maui.Controls.ImageSource source)
            where T : Microsoft.Maui.Controls.Image
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Image.SourceProperty, source);
            return self;
        }
        
        public static T Source<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.ImageSource>, IPropertyBuilder<Microsoft.Maui.Controls.ImageSource>> configure)
            where T : Microsoft.Maui.Controls.Image
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.Image.SourceProperty);
            configure(context).Build();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
