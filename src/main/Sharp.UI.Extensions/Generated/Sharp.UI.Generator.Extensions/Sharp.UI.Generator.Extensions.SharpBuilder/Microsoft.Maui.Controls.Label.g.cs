//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;

    using Sharp.UI.Internal;

    public static partial class LabelExtension
    {
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform textTransform)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextTransformProperty, textTransform);
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextTransform>, ValueBuilder<Microsoft.Maui.TextTransform>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextTransformProperty, builder.GetValue());
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextTransform>, BindingBuilder<Microsoft.Maui.TextTransform>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextTransform>(obj, Microsoft.Maui.Controls.Label.TextTransformProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FormattedText<T>(this T obj,
            Microsoft.Maui.Controls.FormattedString formattedText)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FormattedTextProperty, formattedText);
            return obj;
        }
        
        public static T FormattedText<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FormattedString>, ValueBuilder<Microsoft.Maui.Controls.FormattedString>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.FormattedString>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FormattedTextProperty, builder.GetValue());
            return obj;
        }
        
        public static T FormattedText<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FormattedString>, BindingBuilder<Microsoft.Maui.Controls.FormattedString>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.FormattedString>(obj, Microsoft.Maui.Controls.Label.FormattedTextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, horizontalTextAlignment);
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, builder.GetValue());
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(obj, Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode lineBreakMode)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.LineBreakModeProperty, lineBreakMode);
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.LineBreakMode>, ValueBuilder<Microsoft.Maui.LineBreakMode>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.LineBreakModeProperty, builder.GetValue());
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.LineBreakMode>, BindingBuilder<Microsoft.Maui.LineBreakMode>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.LineBreakMode>(obj, Microsoft.Maui.Controls.Label.LineBreakModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextProperty, text);
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextProperty, builder.GetValue());
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.Label.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextColorProperty, textColor);
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextColorProperty, builder.GetValue());
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.Label.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.CharacterSpacingProperty, characterSpacing);
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.CharacterSpacingProperty, builder.GetValue());
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Label.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, verticalTextAlignment);
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, builder.GetValue());
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(obj, Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontAttributesProperty, fontAttributes);
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontAttributesProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(obj, Microsoft.Maui.Controls.Label.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextDecorations<T>(this T obj,
            Microsoft.Maui.TextDecorations textDecorations)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextDecorationsProperty, textDecorations);
            return obj;
        }
        
        public static T TextDecorations<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextDecorations>, ValueBuilder<Microsoft.Maui.TextDecorations>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextDecorations>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextDecorationsProperty, builder.GetValue());
            return obj;
        }
        
        public static T TextDecorations<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextDecorations>, BindingBuilder<Microsoft.Maui.TextDecorations>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextDecorations>(obj, Microsoft.Maui.Controls.Label.TextDecorationsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontFamilyProperty, fontFamily);
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontFamilyProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.Label.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontSizeProperty, fontSize);
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontSizeProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Label.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LineHeight<T>(this T obj,
            double lineHeight)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.LineHeightProperty, lineHeight);
            return obj;
        }
        
        public static T LineHeight<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.LineHeightProperty, builder.GetValue());
            return obj;
        }
        
        public static T LineHeight<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Label.LineHeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaxLines<T>(this T obj,
            int maxLines)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.MaxLinesProperty, maxLines);
            return obj;
        }
        
        public static T MaxLines<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.MaxLinesProperty, builder.GetValue());
            return obj;
        }
        
        public static T MaxLines<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.Label.MaxLinesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.PaddingProperty, padding);
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.PaddingProperty, builder.GetValue());
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Thickness>(obj, Microsoft.Maui.Controls.Label.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextType<T>(this T obj,
            Microsoft.Maui.TextType textType)
            where T : Microsoft.Maui.Controls.Label
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextTypeProperty, textType);
            return obj;
        }
        
        public static T TextType<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextType>, ValueBuilder<Microsoft.Maui.TextType>> buidValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.TextType>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Label.TextTypeProperty, builder.GetValue());
            return obj;
        }
        
        public static T TextType<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextType>, BindingBuilder<Microsoft.Maui.TextType>> buidBinding)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.TextType>(obj, Microsoft.Maui.Controls.Label.TextTypeProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
