//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class LabelExtension
    {
        public static T TextTransform<T>(this T self,
            Microsoft.Maui.TextTransform textTransform)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextTransformProperty, textTransform);
            return self;
        }
        
        public static T TextTransform<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextTransform>, ValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextTransformProperty, builder.GetValue());
            return self;
        }
        
        public static T TextTransform<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.TextTransform>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.TextTransformProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T TextTransform<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.TextTransform>, BindingBuilder<Microsoft.Maui.TextTransform>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextTransform>(self, Microsoft.Maui.Controls.Label.TextTransformProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FormattedText<T>(this T self,
            Microsoft.Maui.Controls.FormattedString formattedText)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FormattedTextProperty, formattedText);
            return self;
        }
        
        public static T FormattedText<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FormattedString>, ValueBuilder<Microsoft.Maui.Controls.FormattedString>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FormattedString>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FormattedTextProperty, builder.GetValue());
            return self;
        }
        
        public static T FormattedText<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.FormattedString>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.FormattedTextProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FormattedText<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.FormattedString>, BindingBuilder<Microsoft.Maui.Controls.FormattedString>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FormattedString>(self, Microsoft.Maui.Controls.Label.FormattedTextProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T HorizontalTextAlignment<T>(this T self,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, horizontalTextAlignment);
            return self;
        }
        
        public static T HorizontalTextAlignment<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, builder.GetValue());
            return self;
        }
        
        public static T HorizontalTextAlignment<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.TextAlignment>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T HorizontalTextAlignment<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(self, Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T LineBreakMode<T>(this T self,
            Microsoft.Maui.LineBreakMode lineBreakMode)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.LineBreakModeProperty, lineBreakMode);
            return self;
        }
        
        public static T LineBreakMode<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.LineBreakMode>, ValueBuilder<Microsoft.Maui.LineBreakMode>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.LineBreakModeProperty, builder.GetValue());
            return self;
        }
        
        public static T LineBreakMode<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.LineBreakMode>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.LineBreakModeProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T LineBreakMode<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.LineBreakMode>, BindingBuilder<Microsoft.Maui.LineBreakMode>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.LineBreakMode>(self, Microsoft.Maui.Controls.Label.LineBreakModeProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Text<T>(this T self,
            string text)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextProperty, text);
            return self;
        }
        
        public static T Text<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextProperty, builder.GetValue());
            return self;
        }
        
        public static T Text<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<string>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.TextProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Text<T>(this T self,
        //    System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.Label.TextProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T TextColor<T>(this T self,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextColorProperty, textColor);
            return self;
        }
        
        public static T TextColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextColorProperty, builder.GetValue());
            return self;
        }
        
        public static T TextColor<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.Graphics.Color>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.TextColorProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T TextColor<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.Label.TextColorProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Label
        {
            Microsoft.Maui.Graphics.Color fromValue = self.TextColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.TextColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateTextColorTo", transform, callback, length, easing);
        }
        
        public static T CharacterSpacing<T>(this T self,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.CharacterSpacingProperty, characterSpacing);
            return self;
        }
        
        public static T CharacterSpacing<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.CharacterSpacingProperty, builder.GetValue());
            return self;
        }
        
        public static T CharacterSpacing<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.CharacterSpacingProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T CharacterSpacing<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Label.CharacterSpacingProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateCharacterSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Label
        {
            double fromValue = self.CharacterSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.CharacterSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateCharacterSpacingTo", transform, callback, length, easing);
        }
        
        public static T VerticalTextAlignment<T>(this T self,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, verticalTextAlignment);
            return self;
        }
        
        public static T VerticalTextAlignment<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, builder.GetValue());
            return self;
        }
        
        public static T VerticalTextAlignment<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.TextAlignment>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T VerticalTextAlignment<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(self, Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FontAttributes<T>(this T self,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontAttributesProperty, fontAttributes);
            return self;
        }
        
        public static T FontAttributes<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontAttributesProperty, builder.GetValue());
            return self;
        }
        
        public static T FontAttributes<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.FontAttributes>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.FontAttributesProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontAttributes<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(self, Microsoft.Maui.Controls.Label.FontAttributesProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T TextDecorations<T>(this T self,
            Microsoft.Maui.TextDecorations textDecorations)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextDecorationsProperty, textDecorations);
            return self;
        }
        
        public static T TextDecorations<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextDecorations>, ValueBuilder<Microsoft.Maui.TextDecorations>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextDecorations>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextDecorationsProperty, builder.GetValue());
            return self;
        }
        
        public static T TextDecorations<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.TextDecorations>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.TextDecorationsProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T TextDecorations<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.TextDecorations>, BindingBuilder<Microsoft.Maui.TextDecorations>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextDecorations>(self, Microsoft.Maui.Controls.Label.TextDecorationsProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FontFamily<T>(this T self,
            string fontFamily)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontFamilyProperty, fontFamily);
            return self;
        }
        
        public static T FontFamily<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontFamilyProperty, builder.GetValue());
            return self;
        }
        
        public static T FontFamily<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<string>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.FontFamilyProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontFamily<T>(this T self,
        //    System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.Label.FontFamilyProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FontSize<T>(this T self,
            double fontSize)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontSizeProperty, fontSize);
            return self;
        }
        
        public static T FontSize<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontSizeProperty, builder.GetValue());
            return self;
        }
        
        public static T FontSize<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.FontSizeProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontSize<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Label.FontSizeProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateFontSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Label
        {
            double fromValue = self.FontSize;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.FontSize = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateFontSizeTo", transform, callback, length, easing);
        }
        
        public static T FontAutoScalingEnabled<T>(this T self,
            bool fontAutoScalingEnabled)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
            return self;
        }
        
        public static T FontAutoScalingEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T FontAutoScalingEnabled<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<bool>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontAutoScalingEnabled<T>(this T self,
        //    System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T LineHeight<T>(this T self,
            double lineHeight)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.LineHeightProperty, lineHeight);
            return self;
        }
        
        public static T LineHeight<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.LineHeightProperty, builder.GetValue());
            return self;
        }
        
        public static T LineHeight<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.LineHeightProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T LineHeight<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Label.LineHeightProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateLineHeightTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Label
        {
            double fromValue = self.LineHeight;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.LineHeight = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateLineHeightTo", transform, callback, length, easing);
        }
        
        public static T MaxLines<T>(this T self,
            int maxLines)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.MaxLinesProperty, maxLines);
            return self;
        }
        
        public static T MaxLines<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.MaxLinesProperty, builder.GetValue());
            return self;
        }
        
        public static T MaxLines<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<int>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.MaxLinesProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T MaxLines<T>(this T self,
        //    System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<int>(self, Microsoft.Maui.Controls.Label.MaxLinesProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Padding<T>(this T self,
            Microsoft.Maui.Thickness padding)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.PaddingProperty, padding);
            return self;
        }
        
        public static T Padding<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.PaddingProperty, builder.GetValue());
            return self;
        }
        
        public static T Padding<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.Thickness>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.PaddingProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Padding<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(self, Microsoft.Maui.Controls.Label.PaddingProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T TextType<T>(this T self,
            Microsoft.Maui.TextType textType)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextTypeProperty, textType);
            return self;
        }
        
        public static T TextType<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextType>, ValueBuilder<Microsoft.Maui.TextType>> buildValue)
            where T : Microsoft.Maui.Controls.Label
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextType>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.TextTypeProperty, builder.GetValue());
            return self;
        }
        
        public static T TextType<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Label
            where TBuilder : PropertyBuilder<Microsoft.Maui.TextType>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Label.TextTypeProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T TextType<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.TextType>, BindingBuilder<Microsoft.Maui.TextType>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Label
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextType>(self, Microsoft.Maui.Controls.Label.TextTypeProperty));
        //    builder.Build();
        //    return self;
        //}
        

        public static T TextCenterHorizontal<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.Center);
            return self;
        }

        public static T TextCenterVertical<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.Center);
            return self;
        }

        public static T TextCenter<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.Center);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.Center);
            return self;
        }

        public static T TextTop<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextBottom<T>(this T self)
            where T : Microsoft.Maui.Controls.Label, Microsoft.Maui.ITextAlignment
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        public static T TextTopStart<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.Start);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextBottomStart<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.End);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextTopEnd<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.Start);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        public static T TextBottomEnd<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty, TextAlignment.End);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        public static T TextStart<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextEnd<T>(this T self)
            where T : Microsoft.Maui.Controls.Label
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        
    }
}

#pragma warning restore CS8601
#nullable restore
