//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class IndicatorViewExtension
    {
        public static T IndicatorsShape<T>(this T self,
            Microsoft.Maui.Controls.IndicatorShape indicatorsShape)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty, indicatorsShape);
            return self;
        }
        
        public static T IndicatorsShape<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IndicatorShape>, ValueBuilder<Microsoft.Maui.Controls.IndicatorShape>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.IndicatorShape>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty, builder.GetValue());
            return self;
        }
        
        public static T IndicatorsShape<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.IndicatorShape>, BindingBuilder<Microsoft.Maui.Controls.IndicatorShape>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.IndicatorShape>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IndicatorLayout<T>(this T self,
            Microsoft.Maui.Controls.IBindableLayout indicatorLayout)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property IndicatorLayout");
            self.IndicatorLayout = indicatorLayout;
            return self;
        }
        
        public static T IndicatorLayout<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IBindableLayout>, ValueBuilder<Microsoft.Maui.Controls.IBindableLayout>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property IndicatorLayout");
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.IBindableLayout>());
            if (builder.ValueIsSet()) self.IndicatorLayout = builder.GetValue();
            return self;
        }
        
        public static T Position<T>(this T self,
            int position)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.PositionProperty, position);
            return self;
        }
        
        public static T Position<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.PositionProperty, builder.GetValue());
            return self;
        }
        
        public static T Position<T>(this T self,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<int>(self, Microsoft.Maui.Controls.IndicatorView.PositionProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T Count<T>(this T self,
            int count)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.CountProperty, count);
            return self;
        }
        
        public static T Count<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.CountProperty, builder.GetValue());
            return self;
        }
        
        public static T Count<T>(this T self,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<int>(self, Microsoft.Maui.Controls.IndicatorView.CountProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T MaximumVisible<T>(this T self,
            int maximumVisible)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty, maximumVisible);
            return self;
        }
        
        public static T MaximumVisible<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty, builder.GetValue());
            return self;
        }
        
        public static T MaximumVisible<T>(this T self,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<int>(self, Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IndicatorTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate indicatorTemplate)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty, indicatorTemplate);
            return self;
        }
        
        public static T IndicatorTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T IndicatorTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IndicatorTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T HideSingle<T>(this T self,
            bool hideSingle)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.HideSingleProperty, hideSingle);
            return self;
        }
        
        public static T HideSingle<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.HideSingleProperty, builder.GetValue());
            return self;
        }
        
        public static T HideSingle<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.IndicatorView.HideSingleProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IndicatorColor<T>(this T self,
            Microsoft.Maui.Graphics.Color indicatorColor)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, indicatorColor);
            return self;
        }
        
        public static T IndicatorColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, builder.GetValue());
            return self;
        }
        
        public static T IndicatorColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateIndicatorColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            Microsoft.Maui.Graphics.Color fromValue = self.IndicatorColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.IndicatorColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateIndicatorColorTo", transform, callback, length, easing);
        }
        
        public static T SelectedIndicatorColor<T>(this T self,
            Microsoft.Maui.Graphics.Color selectedIndicatorColor)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, selectedIndicatorColor);
            return self;
        }
        
        public static T SelectedIndicatorColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, builder.GetValue());
            return self;
        }
        
        public static T SelectedIndicatorColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateSelectedIndicatorColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            Microsoft.Maui.Graphics.Color fromValue = self.SelectedIndicatorColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SelectedIndicatorColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateSelectedIndicatorColorTo", transform, callback, length, easing);
        }
        
        public static T IndicatorSize<T>(this T self,
            double indicatorSize)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, indicatorSize);
            return self;
        }
        
        public static T IndicatorSize<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, builder.GetValue());
            return self;
        }
        
        public static T IndicatorSize<T>(this T self,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateIndicatorSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            double fromValue = self.IndicatorSize;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.IndicatorSize = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateIndicatorSizeTo", transform, callback, length, easing);
        }
        
        public static T ItemsSource<T>(this T self,
            System.Collections.IEnumerable itemsSource)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty, itemsSource);
            return self;
        }
        
        public static T ItemsSource<T>(this T self,
            System.Func<ValueBuilder<System.Collections.IEnumerable>, ValueBuilder<System.Collections.IEnumerable>> buildValue)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildValue(new ValueBuilder<System.Collections.IEnumerable>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty, builder.GetValue());
            return self;
        }
        
        public static T ItemsSource<T>(this T self,
            System.Func<BindingBuilder<System.Collections.IEnumerable>, BindingBuilder<System.Collections.IEnumerable>> buildBinding)
            where T : Microsoft.Maui.Controls.IndicatorView
        {
            var builder = buildBinding(new BindingBuilder<System.Collections.IEnumerable>(self, Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty));
            builder.BindProperty();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
