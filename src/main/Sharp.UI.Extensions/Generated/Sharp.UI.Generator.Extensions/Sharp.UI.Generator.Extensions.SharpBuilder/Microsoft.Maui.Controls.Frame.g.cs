//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class FrameExtension
    {
        public static T HasShadow<T>(this T self,
            bool hasShadow)
            where T : Microsoft.Maui.Controls.Frame
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Frame.HasShadowProperty, hasShadow);
            return self;
        }
        
        public static T HasShadow<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.Frame
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Frame.HasShadowProperty, builder.GetValue());
            return self;
        }
        
        public static T HasShadow<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Frame
            where TBuilder : PropertyBuilder<bool>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Frame.HasShadowProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T HasShadow<T>(this T self,
        //    System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Frame
        //{
        //    var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.Frame.HasShadowProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T BorderColor<T>(this T self,
            Microsoft.Maui.Graphics.Color borderColor)
            where T : Microsoft.Maui.Controls.Frame
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Frame.BorderColorProperty, borderColor);
            return self;
        }
        
        public static T BorderColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.Frame
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Frame.BorderColorProperty, builder.GetValue());
            return self;
        }
        
        public static T BorderColor<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Frame
            where TBuilder : PropertyBuilder<Microsoft.Maui.Graphics.Color>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Frame.BorderColorProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T BorderColor<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Frame
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.Frame.BorderColorProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateBorderColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Frame
        {
            Microsoft.Maui.Graphics.Color fromValue = self.BorderColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.BorderColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBorderColorTo", transform, callback, length, easing);
        }
        
        public static T CornerRadius<T>(this T self,
            float cornerRadius)
            where T : Microsoft.Maui.Controls.Frame
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Frame.CornerRadiusProperty, cornerRadius);
            return self;
        }
        
        public static T CornerRadius<T>(this T self,
            System.Func<ValueBuilder<float>, ValueBuilder<float>> buildValue)
            where T : Microsoft.Maui.Controls.Frame
        {
            var builder = buildValue(new ValueBuilder<float>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Frame.CornerRadiusProperty, builder.GetValue());
            return self;
        }
        
        public static T CornerRadius<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Frame
            where TBuilder : PropertyBuilder<float>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Frame.CornerRadiusProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T CornerRadius<T>(this T self,
        //    System.Func<BindingBuilder<float>, BindingBuilder<float>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Frame
        //{
        //    var builder = buildBinding(new BindingBuilder<float>(self, Microsoft.Maui.Controls.Frame.CornerRadiusProperty));
        //    builder.Build();
        //    return self;
        //}
        
    }
}

#pragma warning restore CS8601
#nullable restore
