//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class FlexLayoutExtension
    {
        public static T Direction<T>(this T obj,
            Microsoft.Maui.Layouts.FlexDirection direction)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.DirectionProperty, direction);
            return obj;
        }
        
        public static T Direction<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexDirection>, ValueBuilder<Microsoft.Maui.Layouts.FlexDirection>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexDirection>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.DirectionProperty, builder.GetValue());
            return obj;
        }
        
        public static T Direction<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexDirection>, BindingBuilder<Microsoft.Maui.Layouts.FlexDirection>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexDirection>(obj, Microsoft.Maui.Controls.FlexLayout.DirectionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            Microsoft.Maui.Layouts.FlexJustify justifyContent)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty, justifyContent);
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexJustify>, ValueBuilder<Microsoft.Maui.Layouts.FlexJustify>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexJustify>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty, builder.GetValue());
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexJustify>, BindingBuilder<Microsoft.Maui.Layouts.FlexJustify>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexJustify>(obj, Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            Microsoft.Maui.Layouts.FlexAlignContent alignContent)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignContentProperty, alignContent);
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexAlignContent>, ValueBuilder<Microsoft.Maui.Layouts.FlexAlignContent>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexAlignContent>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignContentProperty, builder.GetValue());
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexAlignContent>, BindingBuilder<Microsoft.Maui.Layouts.FlexAlignContent>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexAlignContent>(obj, Microsoft.Maui.Controls.FlexLayout.AlignContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            Microsoft.Maui.Layouts.FlexAlignItems alignItems)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty, alignItems);
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexAlignItems>, ValueBuilder<Microsoft.Maui.Layouts.FlexAlignItems>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexAlignItems>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty, builder.GetValue());
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexAlignItems>, BindingBuilder<Microsoft.Maui.Layouts.FlexAlignItems>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexAlignItems>(obj, Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            Microsoft.Maui.Layouts.FlexPosition position)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.PositionProperty, position);
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexPosition>, ValueBuilder<Microsoft.Maui.Layouts.FlexPosition>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexPosition>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.PositionProperty, builder.GetValue());
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexPosition>, BindingBuilder<Microsoft.Maui.Layouts.FlexPosition>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexPosition>(obj, Microsoft.Maui.Controls.FlexLayout.PositionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            Microsoft.Maui.Layouts.FlexWrap wrap)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.WrapProperty, wrap);
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Layouts.FlexWrap>, ValueBuilder<Microsoft.Maui.Layouts.FlexWrap>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Layouts.FlexWrap>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.WrapProperty, builder.GetValue());
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Layouts.FlexWrap>, BindingBuilder<Microsoft.Maui.Layouts.FlexWrap>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Layouts.FlexWrap>(obj, Microsoft.Maui.Controls.FlexLayout.WrapProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Direction<T>(this T obj,
            object direction)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.DirectionProperty, direction);
            return obj;
        }
        
        public static T Direction<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.DirectionProperty, builder.GetValue());
            return obj;
        }
        
        public static T Direction<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.DirectionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            object justifyContent)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty, justifyContent);
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty, builder.GetValue());
            return obj;
        }
        
        public static T JustifyContent<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            object alignContent)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignContentProperty, alignContent);
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignContentProperty, builder.GetValue());
            return obj;
        }
        
        public static T AlignContent<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.AlignContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            object alignItems)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty, alignItems);
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty, builder.GetValue());
            return obj;
        }
        
        public static T AlignItems<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            object position)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.PositionProperty, position);
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.PositionProperty, builder.GetValue());
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.PositionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            object wrap)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.WrapProperty, wrap);
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.WrapProperty, builder.GetValue());
            return obj;
        }
        
        public static T Wrap<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.WrapProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Order<T>(this T obj,
            object order)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.OrderProperty, order);
            return obj;
        }
        
        public static T Order<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.OrderProperty, builder.GetValue());
            return obj;
        }
        
        public static T Order<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.OrderProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Grow<T>(this T obj,
            object grow)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.GrowProperty, grow);
            return obj;
        }
        
        public static T Grow<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.GrowProperty, builder.GetValue());
            return obj;
        }
        
        public static T Grow<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.GrowProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Shrink<T>(this T obj,
            object shrink)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.ShrinkProperty, shrink);
            return obj;
        }
        
        public static T Shrink<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.ShrinkProperty, builder.GetValue());
            return obj;
        }
        
        public static T Shrink<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.ShrinkProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AlignSelf<T>(this T obj,
            object alignSelf)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignSelfProperty, alignSelf);
            return obj;
        }
        
        public static T AlignSelf<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.AlignSelfProperty, builder.GetValue());
            return obj;
        }
        
        public static T AlignSelf<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.AlignSelfProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Basis<T>(this T obj,
            object basis)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.BasisProperty, basis);
            return obj;
        }
        
        public static T Basis<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.FlexLayout.BasisProperty, builder.GetValue());
            return obj;
        }
        
        public static T Basis<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.FlexLayout.BasisProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
