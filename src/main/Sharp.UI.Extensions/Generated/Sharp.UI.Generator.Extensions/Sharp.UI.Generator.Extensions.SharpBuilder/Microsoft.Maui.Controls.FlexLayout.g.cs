//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class FlexLayoutExtension
    {
        public static T Direction<T>(this T self,
            Microsoft.Maui.Layouts.FlexDirection direction)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlexLayout.DirectionProperty, direction);
            return self;
        }
        
        public static T Direction<T>(this T self, Func<PropertyContext<Microsoft.Maui.Layouts.FlexDirection>, IPropertyBuilder<Microsoft.Maui.Layouts.FlexDirection>> configure)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var context = new PropertyContext<Microsoft.Maui.Layouts.FlexDirection>(self, Microsoft.Maui.Controls.FlexLayout.DirectionProperty);
            configure(context).Build();
            return self;
        }
        
        public static T JustifyContent<T>(this T self,
            Microsoft.Maui.Layouts.FlexJustify justifyContent)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty, justifyContent);
            return self;
        }
        
        public static T JustifyContent<T>(this T self, Func<PropertyContext<Microsoft.Maui.Layouts.FlexJustify>, IPropertyBuilder<Microsoft.Maui.Layouts.FlexJustify>> configure)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var context = new PropertyContext<Microsoft.Maui.Layouts.FlexJustify>(self, Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T AlignContent<T>(this T self,
            Microsoft.Maui.Layouts.FlexAlignContent alignContent)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlexLayout.AlignContentProperty, alignContent);
            return self;
        }
        
        public static T AlignContent<T>(this T self, Func<PropertyContext<Microsoft.Maui.Layouts.FlexAlignContent>, IPropertyBuilder<Microsoft.Maui.Layouts.FlexAlignContent>> configure)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var context = new PropertyContext<Microsoft.Maui.Layouts.FlexAlignContent>(self, Microsoft.Maui.Controls.FlexLayout.AlignContentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T AlignItems<T>(this T self,
            Microsoft.Maui.Layouts.FlexAlignItems alignItems)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty, alignItems);
            return self;
        }
        
        public static T AlignItems<T>(this T self, Func<PropertyContext<Microsoft.Maui.Layouts.FlexAlignItems>, IPropertyBuilder<Microsoft.Maui.Layouts.FlexAlignItems>> configure)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var context = new PropertyContext<Microsoft.Maui.Layouts.FlexAlignItems>(self, Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Position<T>(this T self,
            Microsoft.Maui.Layouts.FlexPosition position)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlexLayout.PositionProperty, position);
            return self;
        }
        
        public static T Position<T>(this T self, Func<PropertyContext<Microsoft.Maui.Layouts.FlexPosition>, IPropertyBuilder<Microsoft.Maui.Layouts.FlexPosition>> configure)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var context = new PropertyContext<Microsoft.Maui.Layouts.FlexPosition>(self, Microsoft.Maui.Controls.FlexLayout.PositionProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Wrap<T>(this T self,
            Microsoft.Maui.Layouts.FlexWrap wrap)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.FlexLayout.WrapProperty, wrap);
            return self;
        }
        
        public static T Wrap<T>(this T self, Func<PropertyContext<Microsoft.Maui.Layouts.FlexWrap>, IPropertyBuilder<Microsoft.Maui.Layouts.FlexWrap>> configure)
            where T : Microsoft.Maui.Controls.FlexLayout
        {
            var context = new PropertyContext<Microsoft.Maui.Layouts.FlexWrap>(self, Microsoft.Maui.Controls.FlexLayout.WrapProperty);
            configure(context).Build();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
