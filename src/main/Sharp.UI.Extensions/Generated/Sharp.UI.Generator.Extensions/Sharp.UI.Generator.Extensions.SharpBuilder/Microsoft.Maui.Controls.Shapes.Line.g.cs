//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class LineExtension
    {
        public static Microsoft.Maui.Controls.Shapes.Line X1(this Microsoft.Maui.Controls.Shapes.Line obj,
            double x1)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X1Property, x1);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X1Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Shapes.Line.X1Property));
            builder.BindProperty();
            return obj;
        }
        
        public static Task<bool> AnimateX1To(this Microsoft.Maui.Controls.Shapes.Line self, double value, uint length = 250, Easing? easing = null)
        {
            double fromValue = self.X1;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.X1 = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateX1To", transform, callback, length, easing);
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y1(this Microsoft.Maui.Controls.Shapes.Line obj,
            double y1)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y1Property, y1);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y1Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Shapes.Line.Y1Property));
            builder.BindProperty();
            return obj;
        }
        
        public static Task<bool> AnimateY1To(this Microsoft.Maui.Controls.Shapes.Line self, double value, uint length = 250, Easing? easing = null)
        {
            double fromValue = self.Y1;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Y1 = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateY1To", transform, callback, length, easing);
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X2(this Microsoft.Maui.Controls.Shapes.Line obj,
            double x2)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X2Property, x2);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X2Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Shapes.Line.X2Property));
            builder.BindProperty();
            return obj;
        }
        
        public static Task<bool> AnimateX2To(this Microsoft.Maui.Controls.Shapes.Line self, double value, uint length = 250, Easing? easing = null)
        {
            double fromValue = self.X2;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.X2 = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateX2To", transform, callback, length, easing);
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y2(this Microsoft.Maui.Controls.Shapes.Line obj,
            double y2)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y2Property, y2);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y2Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.Shapes.Line.Y2Property));
            builder.BindProperty();
            return obj;
        }
        
        public static Task<bool> AnimateY2To(this Microsoft.Maui.Controls.Shapes.Line self, double value, uint length = 250, Easing? easing = null)
        {
            double fromValue = self.Y2;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Y2 = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateY2To", transform, callback, length, easing);
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X1(this Microsoft.Maui.Controls.Shapes.Line obj,
            object x1)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X1Property, x1);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X1Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Shapes.Line.X1Property));
            builder.BindProperty();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y1(this Microsoft.Maui.Controls.Shapes.Line obj,
            object y1)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y1Property, y1);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y1Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y1(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Shapes.Line.Y1Property));
            builder.BindProperty();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X2(this Microsoft.Maui.Controls.Shapes.Line obj,
            object x2)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X2Property, x2);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.X2Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line X2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Shapes.Line.X2Property));
            builder.BindProperty();
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y2(this Microsoft.Maui.Controls.Shapes.Line obj,
            object y2)
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y2Property, y2);
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buidValue)
        {
            var builder = buidValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.Shapes.Line.Y2Property, builder.GetValue());
            return obj;
        }
        
        public static Microsoft.Maui.Controls.Shapes.Line Y2(this Microsoft.Maui.Controls.Shapes.Line obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buidBinding)
        {
            var builder = buidBinding(new BindingBuilder<object>(obj, Microsoft.Maui.Controls.Shapes.Line.Y2Property));
            builder.BindProperty();
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
