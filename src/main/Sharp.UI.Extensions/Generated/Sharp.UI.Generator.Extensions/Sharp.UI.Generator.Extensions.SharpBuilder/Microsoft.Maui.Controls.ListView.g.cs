//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class ListViewExtension
    {
        public static T Footer<T>(this T self,
            object footer)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.FooterProperty, footer);
            return self;
        }
        
        public static T Footer<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.FooterProperty, builder.GetValue());
            return self;
        }
        
        public static T Footer<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.ListView.FooterProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FooterTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate footerTemplate)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.FooterTemplateProperty, footerTemplate);
            return self;
        }
        
        public static T FooterTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.FooterTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T FooterTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ListView.FooterTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FooterTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.FooterTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T GroupDisplayBinding<T>(this T self,
            Microsoft.Maui.Controls.BindingBase groupDisplayBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property GroupDisplayBinding");
            self.GroupDisplayBinding = groupDisplayBinding;
            return self;
        }
        
        public static T GroupDisplayBinding<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.BindingBase>, ValueBuilder<Microsoft.Maui.Controls.BindingBase>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property GroupDisplayBinding");
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) self.GroupDisplayBinding = builder.GetValue();
            return self;
        }
        
        public static T GroupHeaderTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate groupHeaderTemplate)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty, groupHeaderTemplate);
            return self;
        }
        
        public static T GroupHeaderTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T GroupHeaderTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T GroupHeaderTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T GroupShortNameBinding<T>(this T self,
            Microsoft.Maui.Controls.BindingBase groupShortNameBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property GroupShortNameBinding");
            self.GroupShortNameBinding = groupShortNameBinding;
            return self;
        }
        
        public static T GroupShortNameBinding<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.BindingBase>, ValueBuilder<Microsoft.Maui.Controls.BindingBase>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property GroupShortNameBinding");
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) self.GroupShortNameBinding = builder.GetValue();
            return self;
        }
        
        public static T HasUnevenRows<T>(this T self,
            bool hasUnevenRows)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty, hasUnevenRows);
            return self;
        }
        
        public static T HasUnevenRows<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty, builder.GetValue());
            return self;
        }
        
        public static T HasUnevenRows<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T Header<T>(this T self,
            object header)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HeaderProperty, header);
            return self;
        }
        
        public static T Header<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HeaderProperty, builder.GetValue());
            return self;
        }
        
        public static T Header<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.ListView.HeaderProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T HeaderTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate headerTemplate)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HeaderTemplateProperty, headerTemplate);
            return self;
        }
        
        public static T HeaderTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HeaderTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T HeaderTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ListView.HeaderTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T HeaderTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HeaderTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T IsGroupingEnabled<T>(this T self,
            bool isGroupingEnabled)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty, isGroupingEnabled);
            return self;
        }
        
        public static T IsGroupingEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T IsGroupingEnabled<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T self,
            bool isPullToRefreshEnabled)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty, isPullToRefreshEnabled);
            return self;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T IsRefreshing<T>(this T self,
            bool isRefreshing)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.IsRefreshingProperty, isRefreshing);
            return self;
        }
        
        public static T IsRefreshing<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.IsRefreshingProperty, builder.GetValue());
            return self;
        }
        
        public static T IsRefreshing<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.ListView.IsRefreshingProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T RefreshCommand<T>(this T self,
            System.Windows.Input.ICommand refreshCommand)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.RefreshCommandProperty, refreshCommand);
            return self;
        }
        
        public static T RefreshCommand<T>(this T self,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.RefreshCommandProperty, builder.GetValue());
            return self;
        }
        
        public static T RefreshCommand<T>(this T self,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.ListView.RefreshCommandProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T RowHeight<T>(this T self,
            int rowHeight)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.RowHeightProperty, rowHeight);
            return self;
        }
        
        public static T RowHeight<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.RowHeightProperty, builder.GetValue());
            return self;
        }
        
        public static T RowHeight<T>(this T self,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<int>(self, Microsoft.Maui.Controls.ListView.RowHeightProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T SelectedItem<T>(this T self,
            object selectedItem)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SelectedItemProperty, selectedItem);
            return self;
        }
        
        public static T SelectedItem<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SelectedItemProperty, builder.GetValue());
            return self;
        }
        
        public static T SelectedItem<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.ListView.SelectedItemProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T SelectionMode<T>(this T self,
            Microsoft.Maui.Controls.ListViewSelectionMode selectionMode)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SelectionModeProperty, selectionMode);
            return self;
        }
        
        public static T SelectionMode<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>, ValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SelectionModeProperty, builder.GetValue());
            return self;
        }
        
        public static T SelectionMode<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>, BindingBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>(self, Microsoft.Maui.Controls.ListView.SelectionModeProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T SeparatorColor<T>(this T self,
            Microsoft.Maui.Graphics.Color separatorColor)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SeparatorColorProperty, separatorColor);
            return self;
        }
        
        public static T SeparatorColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SeparatorColorProperty, builder.GetValue());
            return self;
        }
        
        public static T SeparatorColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.ListView.SeparatorColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateSeparatorColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.ListView
        {
            Microsoft.Maui.Graphics.Color fromValue = self.SeparatorColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SeparatorColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateSeparatorColorTo", transform, callback, length, easing);
        }
        
        public static T RefreshControlColor<T>(this T self,
            Microsoft.Maui.Graphics.Color refreshControlColor)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.RefreshControlColorProperty, refreshControlColor);
            return self;
        }
        
        public static T RefreshControlColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.RefreshControlColorProperty, builder.GetValue());
            return self;
        }
        
        public static T RefreshControlColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.ListView.RefreshControlColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateRefreshControlColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.ListView
        {
            Microsoft.Maui.Graphics.Color fromValue = self.RefreshControlColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.RefreshControlColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateRefreshControlColorTo", transform, callback, length, easing);
        }
        
        public static T SeparatorVisibility<T>(this T self,
            Microsoft.Maui.Controls.SeparatorVisibility separatorVisibility)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty, separatorVisibility);
            return self;
        }
        
        public static T SeparatorVisibility<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>, ValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty, builder.GetValue());
            return self;
        }
        
        public static T SeparatorVisibility<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SeparatorVisibility>, BindingBuilder<Microsoft.Maui.Controls.SeparatorVisibility>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.SeparatorVisibility>(self, Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T self,
            Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty, horizontalScrollBarVisibility);
            return self;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty, builder.GetValue());
            return self;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T self,
            Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty, verticalScrollBarVisibility);
            return self;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty, builder.GetValue());
            return self;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Microsoft.Maui.Controls.ListView
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T RefreshAllowed<T>(this T self,
            bool refreshAllowed)
            where T : Microsoft.Maui.Controls.ListView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property RefreshAllowed");
            self.RefreshAllowed = refreshAllowed;
            return self;
        }
        
        public static T RefreshAllowed<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.ListView
        {
            var setters = FluentStyling.Setters as IList<Setter>;
            if (setters != null) throw new ArgumentException("Fluent styling not available for property RefreshAllowed");
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.RefreshAllowed = builder.GetValue();
            return self;
        }
        
        public static T OnItemAppearing<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ItemVisibilityEventArgs> handler)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemAppearing += handler;
            return self;
        }
        
        public static T OnItemAppearing<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemAppearing += (o, arg) => action(self);
            return self;
        }
        
        public static T OnItemDisappearing<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ItemVisibilityEventArgs> handler)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemDisappearing += handler;
            return self;
        }
        
        public static T OnItemDisappearing<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemDisappearing += (o, arg) => action(self);
            return self;
        }
        
        public static T OnItemSelected<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SelectedItemChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemSelected += handler;
            return self;
        }
        
        public static T OnItemSelected<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemSelected += (o, arg) => action(self);
            return self;
        }
        
        public static T OnItemTapped<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ItemTappedEventArgs> handler)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemTapped += handler;
            return self;
        }
        
        public static T OnItemTapped<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ItemTapped += (o, arg) => action(self);
            return self;
        }
        
        public static T OnScrolled<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ScrolledEventArgs> handler)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.Scrolled += handler;
            return self;
        }
        
        public static T OnScrolled<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.Scrolled += (o, arg) => action(self);
            return self;
        }
        
        public static T OnRefreshing<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.Refreshing += handler;
            return self;
        }
        
        public static T OnRefreshing<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.Refreshing += (o, arg) => action(self);
            return self;
        }
        
        public static T OnScrollToRequested<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ScrollToRequestedEventArgs> handler)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ScrollToRequested += handler;
            return self;
        }
        
        public static T OnScrollToRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.ListView
        {
            self.ScrollToRequested += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
