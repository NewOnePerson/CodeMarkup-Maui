//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;

    using Sharp.UI.Internal;

    public static partial class VisualElementExtension
    {
        public static T Frame<T>(this T obj,
            Microsoft.Maui.Graphics.Rect frame)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Frame = frame;
            return obj;
        }
        
        public static T Frame<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Rect>, ValueBuilder<Microsoft.Maui.Graphics.Rect>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Rect>());
            if (builder.ValueIsSet()) obj.Frame = builder.GetValue();
            return obj;
        }
        
        public static T Shadow<T>(this T obj,
            Microsoft.Maui.Controls.Shadow shadow)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ShadowProperty, shadow);
            return obj;
        }
        
        public static T Shadow<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Shadow>, ValueBuilder<Microsoft.Maui.Controls.Shadow>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.Shadow>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ShadowProperty, builder.GetValue());
            return obj;
        }
        
        public static T Shadow<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Shadow>, BindingBuilder<Microsoft.Maui.Controls.Shadow>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.Shadow>(obj, Microsoft.Maui.Controls.VisualElement.ShadowProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ZIndex<T>(this T obj,
            int zIndex)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ZIndexProperty, zIndex);
            return obj;
        }
        
        public static T ZIndex<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ZIndexProperty, builder.GetValue());
            return obj;
        }
        
        public static T ZIndex<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<int>(obj, Microsoft.Maui.Controls.VisualElement.ZIndexProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Visual<T>(this T obj,
            Microsoft.Maui.Controls.IVisual visual)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.VisualProperty, visual);
            return obj;
        }
        
        public static T Visual<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.IVisual>, ValueBuilder<Microsoft.Maui.Controls.IVisual>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.IVisual>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.VisualProperty, builder.GetValue());
            return obj;
        }
        
        public static T Visual<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.IVisual>, BindingBuilder<Microsoft.Maui.Controls.IVisual>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.IVisual>(obj, Microsoft.Maui.Controls.VisualElement.VisualProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            Microsoft.Maui.FlowDirection flowDirection)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty, flowDirection);
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.FlowDirection>, ValueBuilder<Microsoft.Maui.FlowDirection>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.FlowDirection>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty, builder.GetValue());
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.FlowDirection>, BindingBuilder<Microsoft.Maui.FlowDirection>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.FlowDirection>(obj, Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AnchorX<T>(this T obj,
            double anchorX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, anchorX);
            return obj;
        }
        
        public static T AnchorX<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, builder.GetValue());
            return obj;
        }
        
        public static T AnchorX<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.AnchorXProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AnchorY<T>(this T obj,
            double anchorY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, anchorY);
            return obj;
        }
        
        public static T AnchorY<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, builder.GetValue());
            return obj;
        }
        
        public static T AnchorY<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.AnchorYProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BackgroundColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color backgroundColor)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, backgroundColor);
            return obj;
        }
        
        public static T BackgroundColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, builder.GetValue());
            return obj;
        }
        
        public static T BackgroundColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Background<T>(this T obj,
            Microsoft.Maui.Controls.Brush background)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.BackgroundProperty, background);
            return obj;
        }
        
        public static T Background<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush>, ValueBuilder<Microsoft.Maui.Controls.Brush>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.BackgroundProperty, builder.GetValue());
            return obj;
        }
        
        public static T Background<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush>, BindingBuilder<Microsoft.Maui.Controls.Brush>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush>(obj, Microsoft.Maui.Controls.VisualElement.BackgroundProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Behaviors<T>(this T obj,
            IList<Microsoft.Maui.Controls.Behavior> behaviors)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in behaviors)
                obj.Behaviors.Add(item);
            return obj;
        }

        public static T Behaviors<T>(this T obj,
            params Microsoft.Maui.Controls.Behavior[] behaviors)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in behaviors)
                obj.Behaviors.Add(item);
            return obj;
        }
        
        public static T Behaviors<T>(this T obj,
            System.Func<BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>, BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>(obj, Microsoft.Maui.Controls.VisualElement.BehaviorsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HeightRequest<T>(this T obj,
            double heightRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, heightRequest);
            return obj;
        }
        
        public static T HeightRequest<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, builder.GetValue());
            return obj;
        }
        
        public static T HeightRequest<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.HeightRequestProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T InputTransparent<T>(this T obj,
            bool inputTransparent)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.InputTransparentProperty, inputTransparent);
            return obj;
        }
        
        public static T InputTransparent<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.InputTransparentProperty, builder.GetValue());
            return obj;
        }
        
        public static T InputTransparent<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.VisualElement.InputTransparentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            bool isEnabled)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.IsEnabledProperty, isEnabled);
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.IsEnabledProperty, builder.GetValue());
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.VisualElement.IsEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            bool isVisible)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.IsVisibleProperty, isVisible);
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.IsVisibleProperty, builder.GetValue());
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.VisualElement.IsVisibleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MinimumHeightRequest<T>(this T obj,
            double minimumHeightRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, minimumHeightRequest);
            return obj;
        }
        
        public static T MinimumHeightRequest<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, builder.GetValue());
            return obj;
        }
        
        public static T MinimumHeightRequest<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MinimumWidthRequest<T>(this T obj,
            double minimumWidthRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, minimumWidthRequest);
            return obj;
        }
        
        public static T MinimumWidthRequest<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, builder.GetValue());
            return obj;
        }
        
        public static T MinimumWidthRequest<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaximumHeightRequest<T>(this T obj,
            double maximumHeightRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, maximumHeightRequest);
            return obj;
        }
        
        public static T MaximumHeightRequest<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, builder.GetValue());
            return obj;
        }
        
        public static T MaximumHeightRequest<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaximumWidthRequest<T>(this T obj,
            double maximumWidthRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, maximumWidthRequest);
            return obj;
        }
        
        public static T MaximumWidthRequest<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, builder.GetValue());
            return obj;
        }
        
        public static T MaximumWidthRequest<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Opacity<T>(this T obj,
            double opacity)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.OpacityProperty, opacity);
            return obj;
        }
        
        public static T Opacity<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.OpacityProperty, builder.GetValue());
            return obj;
        }
        
        public static T Opacity<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.OpacityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Rotation<T>(this T obj,
            double rotation)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.RotationProperty, rotation);
            return obj;
        }
        
        public static T Rotation<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.RotationProperty, builder.GetValue());
            return obj;
        }
        
        public static T Rotation<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.RotationProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RotationX<T>(this T obj,
            double rotationX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.RotationXProperty, rotationX);
            return obj;
        }
        
        public static T RotationX<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.RotationXProperty, builder.GetValue());
            return obj;
        }
        
        public static T RotationX<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.RotationXProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RotationY<T>(this T obj,
            double rotationY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.RotationYProperty, rotationY);
            return obj;
        }
        
        public static T RotationY<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.RotationYProperty, builder.GetValue());
            return obj;
        }
        
        public static T RotationY<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.RotationYProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Scale<T>(this T obj,
            double scale)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ScaleProperty, scale);
            return obj;
        }
        
        public static T Scale<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ScaleProperty, builder.GetValue());
            return obj;
        }
        
        public static T Scale<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.ScaleProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ScaleX<T>(this T obj,
            double scaleX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, scaleX);
            return obj;
        }
        
        public static T ScaleX<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, builder.GetValue());
            return obj;
        }
        
        public static T ScaleX<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.ScaleXProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ScaleY<T>(this T obj,
            double scaleY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, scaleY);
            return obj;
        }
        
        public static T ScaleY<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, builder.GetValue());
            return obj;
        }
        
        public static T ScaleY<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.ScaleYProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TranslationX<T>(this T obj,
            double translationX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, translationX);
            return obj;
        }
        
        public static T TranslationX<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, builder.GetValue());
            return obj;
        }
        
        public static T TranslationX<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.TranslationXProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TranslationY<T>(this T obj,
            double translationY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, translationY);
            return obj;
        }
        
        public static T TranslationY<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, builder.GetValue());
            return obj;
        }
        
        public static T TranslationY<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.TranslationYProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Triggers<T>(this T obj,
            IList<Microsoft.Maui.Controls.TriggerBase> triggers)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in triggers)
                obj.Triggers.Add(item);
            return obj;
        }

        public static T Triggers<T>(this T obj,
            params Microsoft.Maui.Controls.TriggerBase[] triggers)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in triggers)
                obj.Triggers.Add(item);
            return obj;
        }
        
        public static T Triggers<T>(this T obj,
            System.Func<BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>, BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>(obj, Microsoft.Maui.Controls.VisualElement.TriggersProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T WidthRequest<T>(this T obj,
            double widthRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, widthRequest);
            return obj;
        }
        
        public static T WidthRequest<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, builder.GetValue());
            return obj;
        }
        
        public static T WidthRequest<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.VisualElement.WidthRequestProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Clip<T>(this T obj,
            Microsoft.Maui.Controls.Shapes.Geometry clip)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ClipProperty, clip);
            return obj;
        }
        
        public static T Clip<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Shapes.Geometry>, ValueBuilder<Microsoft.Maui.Controls.Shapes.Geometry>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.Shapes.Geometry>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.VisualElement.ClipProperty, builder.GetValue());
            return obj;
        }
        
        public static T Clip<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Shapes.Geometry>, BindingBuilder<Microsoft.Maui.Controls.Shapes.Geometry>> buidBinding)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.Shapes.Geometry>(obj, Microsoft.Maui.Controls.VisualElement.ClipProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DisableLayout<T>(this T obj,
            bool disableLayout)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.DisableLayout = disableLayout;
            return obj;
        }
        
        public static T DisableLayout<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.DisableLayout = builder.GetValue();
            return obj;
        }
        
        public static T IsInPlatformLayout<T>(this T obj,
            bool isInPlatformLayout)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.IsInPlatformLayout = isInPlatformLayout;
            return obj;
        }
        
        public static T IsInPlatformLayout<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.IsInPlatformLayout = builder.GetValue();
            return obj;
        }
        
        public static T IsPlatformStateConsistent<T>(this T obj,
            bool isPlatformStateConsistent)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.IsPlatformStateConsistent = isPlatformStateConsistent;
            return obj;
        }
        
        public static T IsPlatformStateConsistent<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.IsPlatformStateConsistent = builder.GetValue();
            return obj;
        }
        
        public static T IsPlatformEnabled<T>(this T obj,
            bool isPlatformEnabled)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.IsPlatformEnabled = isPlatformEnabled;
            return obj;
        }
        
        public static T IsPlatformEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.IsPlatformEnabled = builder.GetValue();
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            Microsoft.Maui.Controls.ResourceDictionary resources)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Resources = resources;
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>, ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>> buidValue)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.ResourceDictionary>());
            if (builder.ValueIsSet()) obj.Resources = builder.GetValue();
            return obj;
        }
        
        public static T OnLoaded<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Loaded += handler;
            return obj;
        }
        
        public static T OnLoaded<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Loaded += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnUnloaded<T>(this T obj, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Unloaded += handler;
            return obj;
        }
        
        public static T OnUnloaded<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Unloaded += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnChildrenReordered<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.ChildrenReordered += handler;
            return obj;
        }
        
        public static T OnChildrenReordered<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.ChildrenReordered += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnFocused<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Focused += handler;
            return obj;
        }
        
        public static T OnFocused<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Focused += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnMeasureInvalidated<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.MeasureInvalidated += handler;
            return obj;
        }
        
        public static T OnMeasureInvalidated<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.MeasureInvalidated += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnSizeChanged<T>(this T obj, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SizeChanged += handler;
            return obj;
        }
        
        public static T OnSizeChanged<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.SizeChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnUnfocused<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Unfocused += handler;
            return obj;
        }
        
        public static T OnUnfocused<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.Unfocused += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnBatchCommitted<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.Internals.EventArg<Microsoft.Maui.Controls.VisualElement>> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.BatchCommitted += handler;
            return obj;
        }
        
        public static T OnBatchCommitted<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.BatchCommitted += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnFocusChangeRequested<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.VisualElement.FocusRequestArgs> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.FocusChangeRequested += handler;
            return obj;
        }
        
        public static T OnFocusChangeRequested<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            obj.FocusChangeRequested += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
