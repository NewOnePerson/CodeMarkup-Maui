//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class EntryCellExtension
    {
        public static T HorizontalTextAlignment<T>(this T self,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, horizontalTextAlignment);
            return self;
        }
        
        public static T HorizontalTextAlignment<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, builder.GetValue());
            return self;
        }
        
        public static T HorizontalTextAlignment<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.EntryCell
            where TBuilder : PropertyBuilder<Microsoft.Maui.TextAlignment>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T HorizontalTextAlignment<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
        //    where T : Microsoft.Maui.Controls.EntryCell
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(self, Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T VerticalTextAlignment<T>(this T self,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, verticalTextAlignment);
            return self;
        }
        
        public static T VerticalTextAlignment<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, builder.GetValue());
            return self;
        }
        
        public static T VerticalTextAlignment<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.EntryCell
            where TBuilder : PropertyBuilder<Microsoft.Maui.TextAlignment>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T VerticalTextAlignment<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
        //    where T : Microsoft.Maui.Controls.EntryCell
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(self, Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Keyboard<T>(this T self,
            Microsoft.Maui.Keyboard keyboard)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.KeyboardProperty, keyboard);
            return self;
        }
        
        public static T Keyboard<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Keyboard>, ValueBuilder<Microsoft.Maui.Keyboard>> buildValue)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Keyboard>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.KeyboardProperty, builder.GetValue());
            return self;
        }
        
        public static T Keyboard<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.EntryCell
            where TBuilder : PropertyBuilder<Microsoft.Maui.Keyboard>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.EntryCell.KeyboardProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Keyboard<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Keyboard>, BindingBuilder<Microsoft.Maui.Keyboard>> buildBinding)
        //    where T : Microsoft.Maui.Controls.EntryCell
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Keyboard>(self, Microsoft.Maui.Controls.EntryCell.KeyboardProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Label<T>(this T self,
            string label)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.LabelProperty, label);
            return self;
        }
        
        public static T Label<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.LabelProperty, builder.GetValue());
            return self;
        }
        
        public static T Label<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.EntryCell
            where TBuilder : PropertyBuilder<string>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.EntryCell.LabelProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Label<T>(this T self,
        //    System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
        //    where T : Microsoft.Maui.Controls.EntryCell
        //{
        //    var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.EntryCell.LabelProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T LabelColor<T>(this T self,
            Microsoft.Maui.Graphics.Color labelColor)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.LabelColorProperty, labelColor);
            return self;
        }
        
        public static T LabelColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.LabelColorProperty, builder.GetValue());
            return self;
        }
        
        public static T LabelColor<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.EntryCell
            where TBuilder : PropertyBuilder<Microsoft.Maui.Graphics.Color>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.EntryCell.LabelColorProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T LabelColor<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
        //    where T : Microsoft.Maui.Controls.EntryCell
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.EntryCell.LabelColorProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Placeholder<T>(this T self,
            string placeholder)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.PlaceholderProperty, placeholder);
            return self;
        }
        
        public static T Placeholder<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.PlaceholderProperty, builder.GetValue());
            return self;
        }
        
        public static T Placeholder<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.EntryCell
            where TBuilder : PropertyBuilder<string>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.EntryCell.PlaceholderProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Placeholder<T>(this T self,
        //    System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
        //    where T : Microsoft.Maui.Controls.EntryCell
        //{
        //    var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.EntryCell.PlaceholderProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Text<T>(this T self,
            string text)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.TextProperty, text);
            return self;
        }
        
        public static T Text<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.TextProperty, builder.GetValue());
            return self;
        }
        
        public static T Text<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.EntryCell
            where TBuilder : PropertyBuilder<string>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.EntryCell.TextProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Text<T>(this T self,
        //    System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
        //    where T : Microsoft.Maui.Controls.EntryCell
        //{
        //    var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.EntryCell.TextProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T OnCompleted<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.Completed += handler;
            return self;
        }
        
        public static T OnCompleted<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.Completed += (o, arg) => action(self);
            return self;
        }
        

        public static T TextCenterHorizontal<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.Center);
            return self;
        }

        public static T TextCenterVertical<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.Center);
            return self;
        }

        public static T TextCenter<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.Center);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.Center);
            return self;
        }

        public static T TextTop<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextBottom<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell, Microsoft.Maui.ITextAlignment
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        public static T TextTopStart<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.Start);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextBottomStart<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.End);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextTopEnd<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.Start);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        public static T TextBottomEnd<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.VerticalTextAlignmentProperty, TextAlignment.End);
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        public static T TextStart<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.Start);
            return self;
        }

        public static T TextEnd<T>(this T self)
            where T : Microsoft.Maui.Controls.EntryCell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.EntryCell.HorizontalTextAlignmentProperty, TextAlignment.End);
            return self;
        }

        
    }
}

#pragma warning restore CS8601
#nullable restore
