//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;
    using Sharp.UI.Internal;

    public static partial class ShellExtension
    {
        public static T FlyoutVerticalScrollMode<T>(this T self,
            Microsoft.Maui.Controls.ScrollMode flyoutVerticalScrollMode)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty, flyoutVerticalScrollMode);
            return self;
        }
        
        public static T FlyoutVerticalScrollMode<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ScrollMode>, ValueBuilder<Microsoft.Maui.Controls.ScrollMode>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ScrollMode>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutVerticalScrollMode<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ScrollMode>, BindingBuilder<Microsoft.Maui.Controls.ScrollMode>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ScrollMode>(self, Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutIcon<T>(this T self,
            Microsoft.Maui.Controls.ImageSource flyoutIcon)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, flyoutIcon);
            return self;
        }
        
        public static T FlyoutIcon<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutIcon<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.Shell.FlyoutIconProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T CurrentItem<T>(this T self,
            Microsoft.Maui.Controls.ShellItem currentItem)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.CurrentItemProperty, currentItem);
            return self;
        }
        
        public static T CurrentItem<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ShellItem>, ValueBuilder<Microsoft.Maui.Controls.ShellItem>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ShellItem>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.CurrentItemProperty, builder.GetValue());
            return self;
        }
        
        public static T CurrentItem<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ShellItem>, BindingBuilder<Microsoft.Maui.Controls.ShellItem>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ShellItem>(self, Microsoft.Maui.Controls.Shell.CurrentItemProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutBackgroundImage<T>(this T self,
            Microsoft.Maui.Controls.ImageSource flyoutBackgroundImage)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, flyoutBackgroundImage);
            return self;
        }
        
        public static T FlyoutBackgroundImage<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutBackgroundImage<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T self,
            Microsoft.Maui.Aspect flyoutBackgroundImageAspect)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty, flyoutBackgroundImageAspect);
            return self;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Aspect>, ValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Aspect>, BindingBuilder<Microsoft.Maui.Aspect>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Aspect>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutBackgroundColor<T>(this T self,
            Microsoft.Maui.Graphics.Color flyoutBackgroundColor)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty, flyoutBackgroundColor);
            return self;
        }
        
        public static T FlyoutBackgroundColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutBackgroundColor<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateFlyoutBackgroundColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Shell
        {
            Microsoft.Maui.Graphics.Color fromValue = self.FlyoutBackgroundColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.FlyoutBackgroundColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateFlyoutBackgroundColorTo", transform, callback, length, easing);
        }
        
        public static T FlyoutBackground<T>(this T self,
            Microsoft.Maui.Controls.Brush flyoutBackground)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty, flyoutBackground);
            return self;
        }
        
        public static T FlyoutBackground<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush>, ValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutBackground<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush>, BindingBuilder<Microsoft.Maui.Controls.Brush>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutBackdrop<T>(this T self,
            Microsoft.Maui.Controls.Brush flyoutBackdrop)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty, flyoutBackdrop);
            return self;
        }
        
        public static T FlyoutBackdrop<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush>, ValueBuilder<Microsoft.Maui.Controls.Brush>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Brush>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutBackdrop<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush>, BindingBuilder<Microsoft.Maui.Controls.Brush>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutWidth<T>(this T self,
            double flyoutWidth)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutWidthProperty, flyoutWidth);
            return self;
        }
        
        public static T FlyoutWidth<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutWidthProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutWidth<T>(this T self,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shell.FlyoutWidthProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateFlyoutWidthTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Shell
        {
            double fromValue = self.FlyoutWidth;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.FlyoutWidth = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateFlyoutWidthTo", transform, callback, length, easing);
        }
        
        public static T FlyoutHeight<T>(this T self,
            double flyoutHeight)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeightProperty, flyoutHeight);
            return self;
        }
        
        public static T FlyoutHeight<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeightProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutHeight<T>(this T self,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shell.FlyoutHeightProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateFlyoutHeightTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Shell
        {
            double fromValue = self.FlyoutHeight;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.FlyoutHeight = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateFlyoutHeightTo", transform, callback, length, easing);
        }
        
        public static T FlyoutBehavior<T>(this T self,
            Microsoft.Maui.FlyoutBehavior flyoutBehavior)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty, flyoutBehavior);
            return self;
        }
        
        public static T FlyoutBehavior<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.FlyoutBehavior>, ValueBuilder<Microsoft.Maui.FlyoutBehavior>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.FlyoutBehavior>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutBehavior<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.FlyoutBehavior>, BindingBuilder<Microsoft.Maui.FlyoutBehavior>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.FlyoutBehavior>(self, Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutHeader<T>(this T self,
            object flyoutHeader)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty, flyoutHeader);
            return self;
        }
        
        public static T FlyoutHeader<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutHeader<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutFooter<T>(this T self,
            object flyoutFooter)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutFooterProperty, flyoutFooter);
            return self;
        }
        
        public static T FlyoutFooter<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutFooterProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutFooter<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.Shell.FlyoutFooterProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T self,
            Microsoft.Maui.Controls.FlyoutHeaderBehavior flyoutHeaderBehavior)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty, flyoutHeaderBehavior);
            return self;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>, ValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>, BindingBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>(self, Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate flyoutHeaderTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty, flyoutHeaderTemplate);
            return self;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T FlyoutFooterTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate flyoutFooterTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty, flyoutFooterTemplate);
            return self;
        }
        
        public static T FlyoutFooterTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutFooterTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutFooterTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T FlyoutIsPresented<T>(this T self,
            bool flyoutIsPresented)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty, flyoutIsPresented);
            return self;
        }
        
        public static T FlyoutIsPresented<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutIsPresented<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T Items<T>(this T self,
            IList<Microsoft.Maui.Controls.ShellItem> items)
            where T : Microsoft.Maui.Controls.Shell
        {
            foreach (var item in items)
                self.Items.Add(item);
            return self;
        }

        public static T Items<T>(this T self,
            params Microsoft.Maui.Controls.ShellItem[] items)
            where T : Microsoft.Maui.Controls.Shell
        {
            foreach (var item in items)
                self.Items.Add(item);
            return self;
        }
        
        public static T Items<T>(this T self,
            System.Func<BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>, BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>(self, Microsoft.Maui.Controls.Shell.ItemsProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T ItemTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate itemTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, itemTemplate);
            return self;
        }
        
        public static T ItemTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T ItemTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.ItemTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T ItemTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T MenuItemTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate menuItemTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty, menuItemTemplate);
            return self;
        }
        
        public static T MenuItemTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T MenuItemTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T MenuItemTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T FlyoutContent<T>(this T self,
            object flyoutContent)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutContentProperty, flyoutContent);
            return self;
        }
        
        public static T FlyoutContent<T>(this T self,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutContentProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutContent<T>(this T self,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<object>(self, Microsoft.Maui.Controls.Shell.FlyoutContentProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutContentTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate flyoutContentTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty, flyoutContentTemplate);
            return self;
        }
        
        public static T FlyoutContentTemplate<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty, builder.GetValue());
            return self;
        }
        
        public static T FlyoutContentTemplate<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Microsoft.Maui.Controls.Shell
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T FlyoutContentTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T OnNavigated<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ShellNavigatedEventArgs> handler)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigated += handler;
            return self;
        }
        
        public static T OnNavigated<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigated += (o, arg) => action(self);
            return self;
        }
        
        public static T OnNavigating<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ShellNavigatingEventArgs> handler)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigating += handler;
            return self;
        }
        
        public static T OnNavigating<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigating += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
