//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class CompositeTransformExtension
    {
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double centerX)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterXProperty, centerX);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterXProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterX<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterXProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterXProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double centerY)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterYProperty, centerY);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterYProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterY<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterYProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform CenterY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.CenterYProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double scaleX)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleXProperty, scaleX);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleXProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleX<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleXProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleXProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double scaleY)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleYProperty, scaleY);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleYProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleY<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleYProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform ScaleY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.ScaleYProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double skewX)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewXProperty, skewX);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewXProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewX<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewXProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewXProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double skewY)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewYProperty, skewY);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewYProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewY<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewYProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform SkewY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.SkewYProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform Rotation(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double rotation)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.RotationProperty, rotation);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform Rotation(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.RotationProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform Rotation<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.RotationProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform Rotation(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.RotationProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double translateX)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateXProperty, translateX);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateXProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateX<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateXProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateX(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateXProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            double translateY)
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateYProperty, translateY);
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateYProperty, builder.GetValue());
            return self;
        }
        
        public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateY<TBuilder>(this Microsoft.Maui.Controls.Shapes.CompositeTransform self, System.Action<TBuilder> configure)
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateYProperty);
            configure(builder);
            builder.Build();
            return self;
        }

        //public static Microsoft.Maui.Controls.Shapes.CompositeTransform TranslateY(this Microsoft.Maui.Controls.Shapes.CompositeTransform self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Shapes.CompositeTransform.TranslateYProperty));
        //    builder.Build();
        //    return self;
        //}
        
    }
}

#pragma warning restore CS8601
#nullable restore
