//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI;

    using Sharp.UI.Internal;

    public static partial class DatePickerExtension
    {
        public static T Date<T>(this T obj,
            System.DateTime date)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.DateProperty, date);
            return obj;
        }
        
        public static T Date<T>(this T obj,
            System.Func<ValueBuilder<System.DateTime>, ValueBuilder<System.DateTime>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<System.DateTime>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.DateProperty, builder.GetValue());
            return obj;
        }
        
        public static T Date<T>(this T obj,
            System.Func<BindingBuilder<System.DateTime>, BindingBuilder<System.DateTime>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<System.DateTime>(obj, Microsoft.Maui.Controls.DatePicker.DateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Format<T>(this T obj,
            string format)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FormatProperty, format);
            return obj;
        }
        
        public static T Format<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FormatProperty, builder.GetValue());
            return obj;
        }
        
        public static T Format<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.DatePicker.FormatProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaximumDate<T>(this T obj,
            System.DateTime maximumDate)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, maximumDate);
            return obj;
        }
        
        public static T MaximumDate<T>(this T obj,
            System.Func<ValueBuilder<System.DateTime>, ValueBuilder<System.DateTime>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<System.DateTime>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, builder.GetValue());
            return obj;
        }
        
        public static T MaximumDate<T>(this T obj,
            System.Func<BindingBuilder<System.DateTime>, BindingBuilder<System.DateTime>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<System.DateTime>(obj, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MinimumDate<T>(this T obj,
            System.DateTime minimumDate)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, minimumDate);
            return obj;
        }
        
        public static T MinimumDate<T>(this T obj,
            System.Func<ValueBuilder<System.DateTime>, ValueBuilder<System.DateTime>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<System.DateTime>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, builder.GetValue());
            return obj;
        }
        
        public static T MinimumDate<T>(this T obj,
            System.Func<BindingBuilder<System.DateTime>, BindingBuilder<System.DateTime>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<System.DateTime>(obj, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.TextColorProperty, textColor);
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.TextColorProperty, builder.GetValue());
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(obj, Microsoft.Maui.Controls.DatePicker.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, characterSpacing);
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, builder.GetValue());
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, fontAttributes);
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(obj, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, fontFamily);
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<string>(obj, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, fontSize);
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<double>(obj, Microsoft.Maui.Controls.DatePicker.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buidValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) obj.SetValueOrSetter(Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, builder.GetValue());
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buidBinding)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buidBinding(new BindingBuilder<bool>(obj, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnDateSelected<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DateChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.DateSelected += handler;
            return obj;
        }
        
        public static T OnDateSelected<T>(this T obj, System.Action<T> action)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            obj.DateSelected += (o, arg) => action(obj);
            return obj;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
