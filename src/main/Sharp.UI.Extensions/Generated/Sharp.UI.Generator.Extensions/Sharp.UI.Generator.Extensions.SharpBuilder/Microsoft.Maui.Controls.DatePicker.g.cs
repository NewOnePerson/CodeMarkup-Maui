//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class DatePickerExtension
    {
        public static T Date<T>(this T self,
            System.DateTime date)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.DateProperty, date);
            return self;
        }
        
        public static T Date<T>(this T self,
            System.Func<ValueBuilder<System.DateTime>, ValueBuilder<System.DateTime>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<System.DateTime>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.DateProperty, builder.GetValue());
            return self;
        }
        
        public static T Date<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<System.DateTime>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.DateProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Date<T>(this T self,
        //    System.Func<BindingBuilder<System.DateTime>, BindingBuilder<System.DateTime>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<System.DateTime>(self, Microsoft.Maui.Controls.DatePicker.DateProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Format<T>(this T self,
            string format)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FormatProperty, format);
            return self;
        }
        
        public static T Format<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FormatProperty, builder.GetValue());
            return self;
        }
        
        public static T Format<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<string>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.FormatProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Format<T>(this T self,
        //    System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.DatePicker.FormatProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T MaximumDate<T>(this T self,
            System.DateTime maximumDate)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, maximumDate);
            return self;
        }
        
        public static T MaximumDate<T>(this T self,
            System.Func<ValueBuilder<System.DateTime>, ValueBuilder<System.DateTime>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<System.DateTime>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, builder.GetValue());
            return self;
        }
        
        public static T MaximumDate<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<System.DateTime>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T MaximumDate<T>(this T self,
        //    System.Func<BindingBuilder<System.DateTime>, BindingBuilder<System.DateTime>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<System.DateTime>(self, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T MinimumDate<T>(this T self,
            System.DateTime minimumDate)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, minimumDate);
            return self;
        }
        
        public static T MinimumDate<T>(this T self,
            System.Func<ValueBuilder<System.DateTime>, ValueBuilder<System.DateTime>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<System.DateTime>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, builder.GetValue());
            return self;
        }
        
        public static T MinimumDate<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<System.DateTime>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T MinimumDate<T>(this T self,
        //    System.Func<BindingBuilder<System.DateTime>, BindingBuilder<System.DateTime>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<System.DateTime>(self, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T TextColor<T>(this T self,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.TextColorProperty, textColor);
            return self;
        }
        
        public static T TextColor<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.TextColorProperty, builder.GetValue());
            return self;
        }
        
        public static T TextColor<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<Microsoft.Maui.Graphics.Color>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.TextColorProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T TextColor<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.DatePicker.TextColorProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            Microsoft.Maui.Graphics.Color fromValue = self.TextColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.TextColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateTextColorTo", transform, callback, length, easing);
        }
        
        public static T CharacterSpacing<T>(this T self,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, characterSpacing);
            return self;
        }
        
        public static T CharacterSpacing<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, builder.GetValue());
            return self;
        }
        
        public static T CharacterSpacing<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T CharacterSpacing<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateCharacterSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            double fromValue = self.CharacterSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.CharacterSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateCharacterSpacingTo", transform, callback, length, easing);
        }
        
        public static T FontAttributes<T>(this T self,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, fontAttributes);
            return self;
        }
        
        public static T FontAttributes<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, builder.GetValue());
            return self;
        }
        
        public static T FontAttributes<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.FontAttributes>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontAttributes<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(self, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FontFamily<T>(this T self,
            string fontFamily)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, fontFamily);
            return self;
        }
        
        public static T FontFamily<T>(this T self,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, builder.GetValue());
            return self;
        }
        
        public static T FontFamily<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<string>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontFamily<T>(this T self,
        //    System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<string>(self, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FontSize<T>(this T self,
            double fontSize)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, fontSize);
            return self;
        }
        
        public static T FontSize<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, builder.GetValue());
            return self;
        }
        
        public static T FontSize<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.FontSizeProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontSize<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.DatePicker.FontSizeProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static Task<bool> AnimateFontSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            double fromValue = self.FontSize;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.FontSize = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateFontSizeTo", transform, callback, length, easing);
        }
        
        public static T FontAutoScalingEnabled<T>(this T self,
            bool fontAutoScalingEnabled)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
            return self;
        }
        
        public static T FontAutoScalingEnabled<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, builder.GetValue());
            return self;
        }
        
        public static T FontAutoScalingEnabled<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.DatePicker
            where TBuilder : PropertyBuilder<bool>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FontAutoScalingEnabled<T>(this T self,
        //    System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
        //    where T : Microsoft.Maui.Controls.DatePicker
        //{
        //    var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T OnDateSelected<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.DateChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.DateSelected += handler;
            return self;
        }
        
        public static T OnDateSelected<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.DatePicker
        {
            self.DateSelected += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
