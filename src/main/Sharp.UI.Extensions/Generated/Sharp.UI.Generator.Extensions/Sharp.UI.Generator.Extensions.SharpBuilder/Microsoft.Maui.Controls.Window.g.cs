//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class WindowExtension
    {
        public static T Title<T>(this T self,
            string? title)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.TitleProperty, title);
            return self;
        }
        
        public static T Title<T>(this T self,
            System.Func<ValueBuilder<string?>, ValueBuilder<string?>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<string?>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.TitleProperty, builder.GetValue());
            return self;
        }
        
        public static T Title<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<string?>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.TitleProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Title<T>(this T self,
        //    System.Func<BindingBuilder<string?>, BindingBuilder<string?>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<string?>(self, Microsoft.Maui.Controls.Window.TitleProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Page<T>(this T self,
            Microsoft.Maui.Controls.Page? page)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.PageProperty, page);
            return self;
        }
        
        public static T Page<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Page?>, ValueBuilder<Microsoft.Maui.Controls.Page?>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Page?>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.PageProperty, builder.GetValue());
            return self;
        }
        
        public static T Page<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<Microsoft.Maui.Controls.Page?>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.PageProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Page<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.Controls.Page?>, BindingBuilder<Microsoft.Maui.Controls.Page?>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Page?>(self, Microsoft.Maui.Controls.Window.PageProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T X<T>(this T self,
            double x)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.XProperty, x);
            return self;
        }
        
        public static T X<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.XProperty, builder.GetValue());
            return self;
        }
        
        public static T X<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.XProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T X<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.XProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Y<T>(this T self,
            double y)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.YProperty, y);
            return self;
        }
        
        public static T Y<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.YProperty, builder.GetValue());
            return self;
        }
        
        public static T Y<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.YProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Y<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.YProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Width<T>(this T self,
            double width)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.WidthProperty, width);
            return self;
        }
        
        public static T Width<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.WidthProperty, builder.GetValue());
            return self;
        }
        
        public static T Width<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.WidthProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Width<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.WidthProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T Height<T>(this T self,
            double height)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.HeightProperty, height);
            return self;
        }
        
        public static T Height<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.HeightProperty, builder.GetValue());
            return self;
        }
        
        public static T Height<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.HeightProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T Height<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.HeightProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T MaximumWidth<T>(this T self,
            double maximumWidth)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MaximumWidthProperty, maximumWidth);
            return self;
        }
        
        public static T MaximumWidth<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MaximumWidthProperty, builder.GetValue());
            return self;
        }
        
        public static T MaximumWidth<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.MaximumWidthProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T MaximumWidth<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.MaximumWidthProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T MaximumHeight<T>(this T self,
            double maximumHeight)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MaximumHeightProperty, maximumHeight);
            return self;
        }
        
        public static T MaximumHeight<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MaximumHeightProperty, builder.GetValue());
            return self;
        }
        
        public static T MaximumHeight<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.MaximumHeightProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T MaximumHeight<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.MaximumHeightProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T MinimumWidth<T>(this T self,
            double minimumWidth)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MinimumWidthProperty, minimumWidth);
            return self;
        }
        
        public static T MinimumWidth<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MinimumWidthProperty, builder.GetValue());
            return self;
        }
        
        public static T MinimumWidth<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.MinimumWidthProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T MinimumWidth<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.MinimumWidthProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T MinimumHeight<T>(this T self,
            double minimumHeight)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MinimumHeightProperty, minimumHeight);
            return self;
        }
        
        public static T MinimumHeight<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.MinimumHeightProperty, builder.GetValue());
            return self;
        }
        
        public static T MinimumHeight<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<double>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.MinimumHeightProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T MinimumHeight<T>(this T self,
        //    System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<double>(self, Microsoft.Maui.Controls.Window.MinimumHeightProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T FlowDirection<T>(this T self,
            Microsoft.Maui.FlowDirection flowDirection)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.FlowDirectionProperty, flowDirection);
            return self;
        }
        
        public static T FlowDirection<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.FlowDirection>, ValueBuilder<Microsoft.Maui.FlowDirection>> buildValue)
            where T : Microsoft.Maui.Controls.Window
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.FlowDirection>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.Window.FlowDirectionProperty, builder.GetValue());
            return self;
        }
        
        public static T FlowDirection<T, TBuilder>(this T self,System.Action<TBuilder> configure)
            where T : Microsoft.Maui.Controls.Window
            where TBuilder : PropertyBuilder<Microsoft.Maui.FlowDirection>
        {
            var builder = TBuilder(self, Microsoft.Maui.Controls.Window.FlowDirectionProperty);
            configure(builder);
            builder.Build();
            return self;

        }

        //public static T FlowDirection<T>(this T self,
        //    System.Func<BindingBuilder<Microsoft.Maui.FlowDirection>, BindingBuilder<Microsoft.Maui.FlowDirection>> buildBinding)
        //    where T : Microsoft.Maui.Controls.Window
        //{
        //    var builder = buildBinding(new BindingBuilder<Microsoft.Maui.FlowDirection>(self, Microsoft.Maui.Controls.Window.FlowDirectionProperty));
        //    builder.Build();
        //    return self;
        //}
        
        public static T OnSizeChanged<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SizeChanged += handler;
            return self;
        }
        
        public static T OnSizeChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.SizeChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnModalPopped<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPoppedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPopped += handler;
            return self;
        }
        
        public static T OnModalPopped<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPopped += (o, arg) => action(self);
            return self;
        }
        
        public static T OnModalPopping<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPoppingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPopping += handler;
            return self;
        }
        
        public static T OnModalPopping<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPopping += (o, arg) => action(self);
            return self;
        }
        
        public static T OnModalPushed<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPushedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPushed += handler;
            return self;
        }
        
        public static T OnModalPushed<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPushed += (o, arg) => action(self);
            return self;
        }
        
        public static T OnModalPushing<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPushingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPushing += handler;
            return self;
        }
        
        public static T OnModalPushing<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.ModalPushing += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPopCanceled<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.PopCanceled += handler;
            return self;
        }
        
        public static T OnPopCanceled<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.PopCanceled += (o, arg) => action(self);
            return self;
        }
        
        public static T OnCreated<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Created += handler;
            return self;
        }
        
        public static T OnCreated<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Created += (o, arg) => action(self);
            return self;
        }
        
        public static T OnResumed<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Resumed += handler;
            return self;
        }
        
        public static T OnResumed<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Resumed += (o, arg) => action(self);
            return self;
        }
        
        public static T OnActivated<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Activated += handler;
            return self;
        }
        
        public static T OnActivated<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Activated += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDeactivated<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Deactivated += handler;
            return self;
        }
        
        public static T OnDeactivated<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Deactivated += (o, arg) => action(self);
            return self;
        }
        
        public static T OnStopped<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Stopped += handler;
            return self;
        }
        
        public static T OnStopped<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Stopped += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDestroying<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Destroying += handler;
            return self;
        }
        
        public static T OnDestroying<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Destroying += (o, arg) => action(self);
            return self;
        }
        
        public static T OnBackgrounding<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.BackgroundingEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Backgrounding += handler;
            return self;
        }
        
        public static T OnBackgrounding<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.Backgrounding += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDisplayDensityChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.DisplayDensityChangedEventArgs>? handler)
            where T : Microsoft.Maui.Controls.Window
        {
            self.DisplayDensityChanged += handler;
            return self;
        }
        
        public static T OnDisplayDensityChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Window
        {
            self.DisplayDensityChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
