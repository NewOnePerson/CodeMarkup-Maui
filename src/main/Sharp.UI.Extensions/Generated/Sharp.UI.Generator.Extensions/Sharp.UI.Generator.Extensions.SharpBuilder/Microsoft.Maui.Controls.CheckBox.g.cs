//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class CheckBoxExtension
    {
        public static T Color<T>(this T self,
            Microsoft.Maui.Graphics.Color color)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.CheckBox.ColorProperty, color);
            return self;
        }
        
        public static T Color<T>(this T self,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.CheckBox.ColorProperty, builder.GetValue());
            return self;
        }
        
        public static T Color<T>(this T self,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.CheckBox.ColorProperty));
            builder.BindProperty();
            return self;
        }
        
        public static Task<bool> AnimateColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            Microsoft.Maui.Graphics.Color fromValue = self.Color;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.Color = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateColorTo", transform, callback, length, easing);
        }
        
        public static T IsChecked<T>(this T self,
            bool isChecked)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.CheckBox.IsCheckedProperty, isChecked);
            return self;
        }
        
        public static T IsChecked<T>(this T self,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(Microsoft.Maui.Controls.CheckBox.IsCheckedProperty, builder.GetValue());
            return self;
        }
        
        public static T IsChecked<T>(this T self,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            var builder = buildBinding(new BindingBuilder<bool>(self, Microsoft.Maui.Controls.CheckBox.IsCheckedProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T OnCheckedChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.CheckedChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            self.CheckedChanged += handler;
            return self;
        }
        
        public static T OnCheckedChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.CheckBox
        {
            self.CheckedChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
