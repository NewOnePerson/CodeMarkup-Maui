//
// <auto-generated> CodeMarkup.Maui.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace CodeMarkup.Maui
{
    using CodeMarkup.Maui.Internal;
    
    public static partial class VisualElementExtension
    {
        public static T Frame<T>(this T self,
            Microsoft.Maui.Graphics.Rect frame)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property Frame");
            self.Frame = frame;
            return self;
        }
        
        public static T Shadow<T>(this T self,
            Microsoft.Maui.Controls.Shadow shadow)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.ShadowProperty, shadow);
            return self;
        }
        
        public static T Shadow<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Shadow>, IPropertyBuilder<Microsoft.Maui.Controls.Shadow>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Shadow>(self, Microsoft.Maui.Controls.VisualElement.ShadowProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ZIndex<T>(this T self,
            int zIndex)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.ZIndexProperty, zIndex);
            return self;
        }
        
        public static T ZIndex<T>(this T self, Func<PropertyContext<int>, IPropertyBuilder<int>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<int>(self, Microsoft.Maui.Controls.VisualElement.ZIndexProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Visual<T>(this T self,
            Microsoft.Maui.Controls.IVisual visual)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.VisualProperty, visual);
            return self;
        }
        
        public static T Visual<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.IVisual>, IPropertyBuilder<Microsoft.Maui.Controls.IVisual>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.IVisual>(self, Microsoft.Maui.Controls.VisualElement.VisualProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlowDirection<T>(this T self,
            Microsoft.Maui.FlowDirection flowDirection)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty, flowDirection);
            return self;
        }
        
        public static T FlowDirection<T>(this T self, Func<PropertyContext<Microsoft.Maui.FlowDirection>, IPropertyBuilder<Microsoft.Maui.FlowDirection>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<Microsoft.Maui.FlowDirection>(self, Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty);
            configure(context).Build();
            return self;
        }
        
        public static T AnchorX<T>(this T self,
            double anchorX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, anchorX);
            return self;
        }
        
        public static T AnchorX<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.AnchorXProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateAnchorXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.AnchorX;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.AnchorX = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateAnchorXTo", transform, callback, length, easing);
        }
        
        public static T AnchorY<T>(this T self,
            double anchorY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, anchorY);
            return self;
        }
        
        public static T AnchorY<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.AnchorYProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateAnchorYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.AnchorY;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.AnchorY = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateAnchorYTo", transform, callback, length, easing);
        }
        
        public static T BackgroundColor<T>(this T self,
            Microsoft.Maui.Graphics.Color backgroundColor)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, backgroundColor);
            return self;
        }
        
        public static T BackgroundColor<T>(this T self, Func<PropertyContext<Microsoft.Maui.Graphics.Color>, IPropertyBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateBackgroundColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            Microsoft.Maui.Graphics.Color fromValue = self.BackgroundColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.BackgroundColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBackgroundColorTo", transform, callback, length, easing);
        }
        
        public static T Background<T>(this T self,
            Microsoft.Maui.Controls.Brush background)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.BackgroundProperty, background);
            return self;
        }
        
        public static T Background<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Brush>, IPropertyBuilder<Microsoft.Maui.Controls.Brush>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.VisualElement.BackgroundProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Behaviors<T>(this T self,
            IList<Microsoft.Maui.Controls.Behavior> behaviors)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in behaviors)
                self.Behaviors.Add(item);
            return self;
        }

        public static T Behaviors<T>(this T self,
            params Microsoft.Maui.Controls.Behavior[] behaviors)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in behaviors)
                self.Behaviors.Add(item);
            return self;
        }
        
        public static T Behaviors<T>(this T self, Func<PropertyContext<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>, IPropertyBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>(self, Microsoft.Maui.Controls.VisualElement.BehaviorsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T HeightRequest<T>(this T self,
            double heightRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, heightRequest);
            return self;
        }
        
        public static T HeightRequest<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.HeightRequestProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateHeightRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.HeightRequest;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.HeightRequest = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateHeightRequestTo", transform, callback, length, easing);
        }
        
        public static T InputTransparent<T>(this T self,
            bool inputTransparent)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.InputTransparentProperty, inputTransparent);
            return self;
        }
        
        public static T InputTransparent<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.VisualElement.InputTransparentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsEnabled<T>(this T self,
            bool isEnabled)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.IsEnabledProperty, isEnabled);
            return self;
        }
        
        public static T IsEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.VisualElement.IsEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsVisible<T>(this T self,
            bool isVisible)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.IsVisibleProperty, isVisible);
            return self;
        }
        
        public static T IsVisible<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.VisualElement.IsVisibleProperty);
            configure(context).Build();
            return self;
        }
        
        public static T MinimumHeightRequest<T>(this T self,
            double minimumHeightRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, minimumHeightRequest);
            return self;
        }
        
        public static T MinimumHeightRequest<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateMinimumHeightRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.MinimumHeightRequest;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.MinimumHeightRequest = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateMinimumHeightRequestTo", transform, callback, length, easing);
        }
        
        public static T MinimumWidthRequest<T>(this T self,
            double minimumWidthRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, minimumWidthRequest);
            return self;
        }
        
        public static T MinimumWidthRequest<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateMinimumWidthRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.MinimumWidthRequest;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.MinimumWidthRequest = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateMinimumWidthRequestTo", transform, callback, length, easing);
        }
        
        public static T MaximumHeightRequest<T>(this T self,
            double maximumHeightRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, maximumHeightRequest);
            return self;
        }
        
        public static T MaximumHeightRequest<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateMaximumHeightRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.MaximumHeightRequest;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.MaximumHeightRequest = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateMaximumHeightRequestTo", transform, callback, length, easing);
        }
        
        public static T MaximumWidthRequest<T>(this T self,
            double maximumWidthRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, maximumWidthRequest);
            return self;
        }
        
        public static T MaximumWidthRequest<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateMaximumWidthRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.MaximumWidthRequest;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.MaximumWidthRequest = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateMaximumWidthRequestTo", transform, callback, length, easing);
        }
        
        public static T Opacity<T>(this T self,
            double opacity)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.OpacityProperty, opacity);
            return self;
        }
        
        public static T Opacity<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.OpacityProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateOpacityTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.Opacity;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Opacity = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateOpacityTo", transform, callback, length, easing);
        }
        
        public static T Rotation<T>(this T self,
            double rotation)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.RotationProperty, rotation);
            return self;
        }
        
        public static T Rotation<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.RotationProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateRotationTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.Rotation;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Rotation = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateRotationTo", transform, callback, length, easing);
        }
        
        public static T RotationX<T>(this T self,
            double rotationX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.RotationXProperty, rotationX);
            return self;
        }
        
        public static T RotationX<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.RotationXProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateRotationXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.RotationX;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.RotationX = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateRotationXTo", transform, callback, length, easing);
        }
        
        public static T RotationY<T>(this T self,
            double rotationY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.RotationYProperty, rotationY);
            return self;
        }
        
        public static T RotationY<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.RotationYProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateRotationYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.RotationY;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.RotationY = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateRotationYTo", transform, callback, length, easing);
        }
        
        public static T Scale<T>(this T self,
            double scale)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.ScaleProperty, scale);
            return self;
        }
        
        public static T Scale<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.ScaleProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateScaleTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.Scale;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Scale = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateScaleTo", transform, callback, length, easing);
        }
        
        public static T ScaleX<T>(this T self,
            double scaleX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, scaleX);
            return self;
        }
        
        public static T ScaleX<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.ScaleXProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateScaleXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.ScaleX;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.ScaleX = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateScaleXTo", transform, callback, length, easing);
        }
        
        public static T ScaleY<T>(this T self,
            double scaleY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, scaleY);
            return self;
        }
        
        public static T ScaleY<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.ScaleYProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateScaleYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.ScaleY;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.ScaleY = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateScaleYTo", transform, callback, length, easing);
        }
        
        public static T TranslationX<T>(this T self,
            double translationX)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, translationX);
            return self;
        }
        
        public static T TranslationX<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.TranslationXProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateTranslationXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.TranslationX;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.TranslationX = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateTranslationXTo", transform, callback, length, easing);
        }
        
        public static T TranslationY<T>(this T self,
            double translationY)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, translationY);
            return self;
        }
        
        public static T TranslationY<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.TranslationYProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateTranslationYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.TranslationY;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.TranslationY = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateTranslationYTo", transform, callback, length, easing);
        }
        
        public static T Triggers<T>(this T self,
            IList<Microsoft.Maui.Controls.TriggerBase> triggers)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in triggers)
                self.Triggers.Add(item);
            return self;
        }

        public static T Triggers<T>(this T self,
            params Microsoft.Maui.Controls.TriggerBase[] triggers)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            foreach (var item in triggers)
                self.Triggers.Add(item);
            return self;
        }
        
        public static T Triggers<T>(this T self, Func<PropertyContext<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>, IPropertyBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>(self, Microsoft.Maui.Controls.VisualElement.TriggersProperty);
            configure(context).Build();
            return self;
        }
        
        public static T WidthRequest<T>(this T self,
            double widthRequest)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, widthRequest);
            return self;
        }
        
        public static T WidthRequest<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.VisualElement.WidthRequestProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateWidthRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            double fromValue = self.WidthRequest;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.WidthRequest = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateWidthRequestTo", transform, callback, length, easing);
        }
        
        public static T Clip<T>(this T self,
            Microsoft.Maui.Controls.Shapes.Geometry clip)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.VisualElement.ClipProperty, clip);
            return self;
        }
        
        public static T Clip<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Shapes.Geometry>, IPropertyBuilder<Microsoft.Maui.Controls.Shapes.Geometry>> configure)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Shapes.Geometry>(self, Microsoft.Maui.Controls.VisualElement.ClipProperty);
            configure(context).Build();
            return self;
        }
        
        public static T DisableLayout<T>(this T self,
            bool disableLayout)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property DisableLayout");
            self.DisableLayout = disableLayout;
            return self;
        }
        
        public static T IsInPlatformLayout<T>(this T self,
            bool isInPlatformLayout)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property IsInPlatformLayout");
            self.IsInPlatformLayout = isInPlatformLayout;
            return self;
        }
        
        public static T IsPlatformStateConsistent<T>(this T self,
            bool isPlatformStateConsistent)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property IsPlatformStateConsistent");
            self.IsPlatformStateConsistent = isPlatformStateConsistent;
            return self;
        }
        
        public static T IsPlatformEnabled<T>(this T self,
            bool isPlatformEnabled)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property IsPlatformEnabled");
            self.IsPlatformEnabled = isPlatformEnabled;
            return self;
        }
        
        public static T Resources<T>(this T self,
            Microsoft.Maui.Controls.ResourceDictionary resources)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property Resources");
            self.Resources = resources;
            return self;
        }
        
        public static T OnLoaded<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Loaded += handler;
            return self;
        }
        
        public static T OnLoaded<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Loaded += (o, arg) => action(self);
            return self;
        }
        
        public static T OnUnloaded<T>(this T self, System.EventHandler? handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Unloaded += handler;
            return self;
        }
        
        public static T OnUnloaded<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Unloaded += (o, arg) => action(self);
            return self;
        }
        
        public static T OnChildrenReordered<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.ChildrenReordered += handler;
            return self;
        }
        
        public static T OnChildrenReordered<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.ChildrenReordered += (o, arg) => action(self);
            return self;
        }
        
        public static T OnFocused<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Focused += handler;
            return self;
        }
        
        public static T OnFocused<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Focused += (o, arg) => action(self);
            return self;
        }
        
        public static T OnMeasureInvalidated<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.MeasureInvalidated += handler;
            return self;
        }
        
        public static T OnMeasureInvalidated<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.MeasureInvalidated += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSizeChanged<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SizeChanged += handler;
            return self;
        }
        
        public static T OnSizeChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.SizeChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnUnfocused<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Unfocused += handler;
            return self;
        }
        
        public static T OnUnfocused<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.Unfocused += (o, arg) => action(self);
            return self;
        }
        
        public static T OnBatchCommitted<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.Internals.EventArg<Microsoft.Maui.Controls.VisualElement>> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.BatchCommitted += handler;
            return self;
        }
        
        public static T OnBatchCommitted<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.BatchCommitted += (o, arg) => action(self);
            return self;
        }
        
        public static T OnFocusChangeRequested<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.VisualElement.FocusRequestArgs> handler)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.FocusChangeRequested += handler;
            return self;
        }
        
        public static T OnFocusChangeRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.VisualElement
        {
            self.FocusChangeRequested += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
