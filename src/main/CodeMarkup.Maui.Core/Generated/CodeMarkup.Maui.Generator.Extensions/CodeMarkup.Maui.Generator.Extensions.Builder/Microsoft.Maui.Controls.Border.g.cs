//
// <auto-generated> CodeMarkup.Maui.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace CodeMarkup.Maui
{
    using CodeMarkup.Maui.Internal;
    
    public static partial class BorderExtension
    {
        public static T Content<T>(this T self,
            Microsoft.Maui.Controls.View? content)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.ContentProperty, content);
            return self;
        }
        
        public static T Content<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.View?>, IPropertyBuilder<Microsoft.Maui.Controls.View?>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.View?>(self, Microsoft.Maui.Controls.Border.ContentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Padding<T>(this T self,
            Microsoft.Maui.Thickness padding)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.PaddingProperty, padding);
            return self;
        }
        
        public static T Padding<T>(this T self, Func<PropertyContext<Microsoft.Maui.Thickness>, IPropertyBuilder<Microsoft.Maui.Thickness>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<Microsoft.Maui.Thickness>(self, Microsoft.Maui.Controls.Border.PaddingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T StrokeShape<T>(this T self,
            Microsoft.Maui.Graphics.IShape? strokeShape)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.StrokeShapeProperty, strokeShape);
            return self;
        }
        
        public static T StrokeShape<T>(this T self, Func<PropertyContext<Microsoft.Maui.Graphics.IShape?>, IPropertyBuilder<Microsoft.Maui.Graphics.IShape?>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<Microsoft.Maui.Graphics.IShape?>(self, Microsoft.Maui.Controls.Border.StrokeShapeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Stroke<T>(this T self,
            Microsoft.Maui.Controls.Brush? stroke)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.StrokeProperty, stroke);
            return self;
        }
        
        public static T Stroke<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Brush?>, IPropertyBuilder<Microsoft.Maui.Controls.Brush?>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Brush?>(self, Microsoft.Maui.Controls.Border.StrokeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T StrokeThickness<T>(this T self,
            double strokeThickness)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.StrokeThicknessProperty, strokeThickness);
            return self;
        }
        
        public static T StrokeThickness<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.Border.StrokeThicknessProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateStrokeThicknessTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Border
        {
            double fromValue = self.StrokeThickness;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.StrokeThickness = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateStrokeThicknessTo", transform, callback, length, easing);
        }
        
        public static T StrokeDashArray<T>(this T self,
            IList<double> strokeDashArray)
            where T : Microsoft.Maui.Controls.Border
        {
            foreach (var item in strokeDashArray)
                self.StrokeDashArray?.Add(item);
            return self;
        }

        public static T StrokeDashArray<T>(this T self,
            params double[] strokeDashArray)
            where T : Microsoft.Maui.Controls.Border
        {
            foreach (var item in strokeDashArray)
                self.StrokeDashArray?.Add(item);
            return self;
        }
        
        public static T StrokeDashArray<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.DoubleCollection?>, IPropertyBuilder<Microsoft.Maui.Controls.DoubleCollection?>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.DoubleCollection?>(self, Microsoft.Maui.Controls.Border.StrokeDashArrayProperty);
            configure(context).Build();
            return self;
        }
        
        public static T StrokeDashOffset<T>(this T self,
            double strokeDashOffset)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.StrokeDashOffsetProperty, strokeDashOffset);
            return self;
        }
        
        public static T StrokeDashOffset<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.Border.StrokeDashOffsetProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateStrokeDashOffsetTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Border
        {
            double fromValue = self.StrokeDashOffset;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.StrokeDashOffset = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateStrokeDashOffsetTo", transform, callback, length, easing);
        }
        
        public static T StrokeLineCap<T>(this T self,
            Microsoft.Maui.Controls.Shapes.PenLineCap strokeLineCap)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.StrokeLineCapProperty, strokeLineCap);
            return self;
        }
        
        public static T StrokeLineCap<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Shapes.PenLineCap>, IPropertyBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Shapes.PenLineCap>(self, Microsoft.Maui.Controls.Border.StrokeLineCapProperty);
            configure(context).Build();
            return self;
        }
        
        public static T StrokeLineJoin<T>(this T self,
            Microsoft.Maui.Controls.Shapes.PenLineJoin strokeLineJoin)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.StrokeLineJoinProperty, strokeLineJoin);
            return self;
        }
        
        public static T StrokeLineJoin<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Shapes.PenLineJoin>, IPropertyBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Shapes.PenLineJoin>(self, Microsoft.Maui.Controls.Border.StrokeLineJoinProperty);
            configure(context).Build();
            return self;
        }
        
        public static T StrokeMiterLimit<T>(this T self,
            double strokeMiterLimit)
            where T : Microsoft.Maui.Controls.Border
        {
            self.SetValueOrAddSetter(Microsoft.Maui.Controls.Border.StrokeMiterLimitProperty, strokeMiterLimit);
            return self;
        }
        
        public static T StrokeMiterLimit<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Border
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.Border.StrokeMiterLimitProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateStrokeMiterLimitTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Border
        {
            double fromValue = self.StrokeMiterLimit;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.StrokeMiterLimit = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateStrokeMiterLimitTo", transform, callback, length, easing);
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
