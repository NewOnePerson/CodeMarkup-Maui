//
// <auto-generated>
//

#pragma warning disable CS0108
#pragma warning disable CS8625
#pragma warning disable CS8669


using System.Collections;
using System.Collections.ObjectModel;


namespace Sharp.UI
{
    public partial class GeometryGroup : Microsoft.Maui.Controls.Shapes.GeometryGroup, Sharp.UI.IGeometryGroup, IList<Microsoft.Maui.Controls.Shapes.Geometry>, IWrappedBindableObject
    {
        // ----- constructors -----
        

        public GeometryGroup() { }


        public GeometryGroup(out GeometryGroup geometryGroup) 
        {
            geometryGroup = this;
        }

        public GeometryGroup(Action<GeometryGroup> configure) 
        {
            configure(this);
        }

        public GeometryGroup(out GeometryGroup geometryGroup, Action<GeometryGroup> configure) 
        {
            geometryGroup = this;
            configure(this);
        }

        // ----- collection container -----

        public int Count => this.Children.Count;
        public Microsoft.Maui.Controls.Shapes.Geometry this[int index] { get => this.Children[index]; set => this.Children[index] = value; }
        public bool IsReadOnly => false;
        public void Add(Microsoft.Maui.Controls.Shapes.Geometry item) => this.Children.Add(item);
        public void Clear() => this.Children.Clear();
        public bool Contains(Microsoft.Maui.Controls.Shapes.Geometry item) => this.Children.Contains(item);
        public void CopyTo(Microsoft.Maui.Controls.Shapes.Geometry[] array, int arrayIndex) => this.Children.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Controls.Shapes.Geometry> GetEnumerator() => this.Children.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Controls.Shapes.Geometry item) => this.Children.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Controls.Shapes.Geometry item) => this.Children.Insert(index, item);
        public bool Remove(Microsoft.Maui.Controls.Shapes.Geometry item) => this.Children.Remove(item);
        public void RemoveAt(int index) => this.Children.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.Children.GetEnumerator();

        // ----- binding context -----

        public new object BindingContext
        {
            get => base.BindingContext;
            set
            {
                var mauiObject = MauiWrapper.GetObject<object>(value);
                base.BindingContext = mauiObject;
            }
        }
        

    }
    
    public static class IGeometryGroupGeneratedContainerExtension
    {
        // ----- collection container extension -----
        public static T Children<T>(this T obj, params Microsoft.Maui.Controls.Shapes.Geometry[] children) where T : Sharp.UI.IGeometryGroup
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Shapes.GeometryGroup>(obj);
            foreach (var item in children) mauiObject.Children.Add(item);
            return obj;
        }

        public static T Children<T>(this T obj,
            Func<CollectionDef<Microsoft.Maui.Controls.Shapes.Geometry>, CollectionDef<Microsoft.Maui.Controls.Shapes.Geometry>> definition)
            where T : Sharp.UI.IGeometryGroup
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Shapes.GeometryGroup>(obj);
            var def = definition(new CollectionDef<Microsoft.Maui.Controls.Shapes.Geometry>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) mauiObject.Children.Add(item);
            }
            return obj;
        }
    }

}

#pragma warning restore CS0108
#pragma warning restore CS8625
#pragma warning restore CS8669
