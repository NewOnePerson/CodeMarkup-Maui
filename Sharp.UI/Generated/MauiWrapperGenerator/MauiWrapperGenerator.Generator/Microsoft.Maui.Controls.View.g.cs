//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class IViewGeneratedExtension
    {
        public static T GestureRecognizers<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer> gestureRecognizers)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            foreach (var item in gestureRecognizers) mauiObject.GestureRecognizers.Add(item);
            return obj;
        }

        public static T GestureRecognizers<T>(this T obj,
            params Microsoft.Maui.Controls.IGestureRecognizer[] gestureRecognizers)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            foreach (var item in gestureRecognizers) mauiObject.GestureRecognizers.Add(item);
            return obj;
        }

        public static T GestureRecognizers<T>(this T obj,
            Func<Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer>>, Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer>>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) mauiObject.GestureRecognizers.Add(item);
            }
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? horizontalOptions)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            if (horizontalOptions != null) mauiObject.HorizontalOptions = (Microsoft.Maui.Controls.LayoutOptions)horizontalOptions;
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? horizontalOptions,
            Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            if (horizontalOptions != null) mauiObject.HorizontalOptions = (Microsoft.Maui.Controls.LayoutOptions)horizontalOptions;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.HorizontalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.HorizontalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            Microsoft.Maui.Thickness? margin)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            if (margin != null) mauiObject.Margin = (Microsoft.Maui.Thickness)margin;
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            Microsoft.Maui.Thickness? margin,
            Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            if (margin != null) mauiObject.Margin = (Microsoft.Maui.Thickness)margin;
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.View.MarginProperty));
            if (def.ValueIsSet()) mauiObject.Margin = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.View.MarginProperty));
            if (def.ValueIsSet()) mauiObject.Margin = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? verticalOptions)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            if (verticalOptions != null) mauiObject.VerticalOptions = (Microsoft.Maui.Controls.LayoutOptions)verticalOptions;
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? verticalOptions,
            Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            if (verticalOptions != null) mauiObject.VerticalOptions = (Microsoft.Maui.Controls.LayoutOptions)verticalOptions;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.VerticalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.VerticalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.VerticalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.VerticalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
