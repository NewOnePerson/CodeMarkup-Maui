//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class IElementGeneratedExtension
    {
        public static T AutomationId<T>(this T obj,
            string? automationId)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (automationId != null) mauiObject.AutomationId = (string)automationId;
            return obj;
        }
        
        public static T AutomationId<T>(this T obj,
            string? automationId,
            Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (automationId != null) mauiObject.AutomationId = (string)automationId;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Element.AutomationIdProperty));
            if (def.ValueIsSet()) mauiObject.AutomationId = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationId<T>(this T obj,
            Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Element.AutomationIdProperty));
            if (def.ValueIsSet()) mauiObject.AutomationId = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ClassId<T>(this T obj,
            string? classId)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (classId != null) mauiObject.ClassId = (string)classId;
            return obj;
        }
        
        public static T ClassId<T>(this T obj,
            string? classId,
            Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (classId != null) mauiObject.ClassId = (string)classId;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Element.ClassIdProperty));
            if (def.ValueIsSet()) mauiObject.ClassId = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ClassId<T>(this T obj,
            Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Element.ClassIdProperty));
            if (def.ValueIsSet()) mauiObject.ClassId = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Effects<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.Effect> effects)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            foreach (var item in effects) mauiObject.Effects.Add(item);
            return obj;
        }

        public static T Effects<T>(this T obj,
            params Microsoft.Maui.Controls.Effect[] effects)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            foreach (var item in effects) mauiObject.Effects.Add(item);
            return obj;
        }

        public static T Effects<T>(this T obj,
            Func<Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Effect>>, Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Effect>>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            var def = definition(new Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Effect>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) mauiObject.Effects.Add(item);
            }
            return obj;
        }
        
        public static T StyleId<T>(this T obj,
            string? styleId)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (styleId != null) mauiObject.StyleId = (string)styleId;
            return obj;
        }
        
        public static T StyleId<T>(this T obj,
            string? styleId,
            Func<ValueDef<string>, ValueDef<string>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (styleId != null) mauiObject.StyleId = (string)styleId;
            var def = definition(new ValueDef<string>());
            if (def.ValueIsSet()) mauiObject.StyleId = def.GetValue();
            return obj;
        }
        
        public static T StyleId<T>(this T obj,
            Func<ValueDef<string>, ValueDef<string>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            var def = definition(new ValueDef<string>());
            if (def.ValueIsSet()) mauiObject.StyleId = def.GetValue();
            return obj;
        }
        
        public static T Parent<T>(this T obj,
            Microsoft.Maui.Controls.Element? parent)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (parent != null) mauiObject.Parent = (Microsoft.Maui.Controls.Element)parent;
            return obj;
        }
        
        public static T Parent<T>(this T obj,
            Microsoft.Maui.Controls.Element? parent,
            Func<ValueDef<Microsoft.Maui.Controls.Element>, ValueDef<Microsoft.Maui.Controls.Element>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (parent != null) mauiObject.Parent = (Microsoft.Maui.Controls.Element)parent;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Element>());
            if (def.ValueIsSet()) mauiObject.Parent = def.GetValue();
            return obj;
        }
        
        public static T Parent<T>(this T obj,
            Func<ValueDef<Microsoft.Maui.Controls.Element>, ValueDef<Microsoft.Maui.Controls.Element>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Element>());
            if (def.ValueIsSet()) mauiObject.Parent = def.GetValue();
            return obj;
        }
        
        public static T EffectControlProvider<T>(this T obj,
            Microsoft.Maui.Controls.IEffectControlProvider? effectControlProvider)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (effectControlProvider != null) mauiObject.EffectControlProvider = (Microsoft.Maui.Controls.IEffectControlProvider)effectControlProvider;
            return obj;
        }
        
        public static T EffectControlProvider<T>(this T obj,
            Microsoft.Maui.Controls.IEffectControlProvider? effectControlProvider,
            Func<ValueDef<Microsoft.Maui.Controls.IEffectControlProvider>, ValueDef<Microsoft.Maui.Controls.IEffectControlProvider>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            if (effectControlProvider != null) mauiObject.EffectControlProvider = (Microsoft.Maui.Controls.IEffectControlProvider)effectControlProvider;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.IEffectControlProvider>());
            if (def.ValueIsSet()) mauiObject.EffectControlProvider = def.GetValue();
            return obj;
        }
        
        public static T EffectControlProvider<T>(this T obj,
            Func<ValueDef<Microsoft.Maui.Controls.IEffectControlProvider>, ValueDef<Microsoft.Maui.Controls.IEffectControlProvider>> definition)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.IEffectControlProvider>());
            if (def.ValueIsSet()) mauiObject.EffectControlProvider = def.GetValue();
            return obj;
        }
        
        public static T OnChildAdded<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ElementEventArgs> action)
            where T : Sharp.UI.IElement
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.ChildAdded += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnChildRemoved<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ElementEventArgs> action)
            where T : Sharp.UI.IElement
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.ChildRemoved += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnDescendantAdded<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ElementEventArgs> action)
            where T : Sharp.UI.IElement
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.DescendantAdded += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnDescendantRemoved<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ElementEventArgs> action)
            where T : Sharp.UI.IElement
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.DescendantRemoved += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnParentChanging<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ParentChangingEventArgs> action)
            where T : Sharp.UI.IElement
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.ParentChanging += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnParentChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.ParentChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnHandlerChanging<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.HandlerChangingEventArgs> action)
            where T : Sharp.UI.IElement
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.HandlerChanging += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnHandlerChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IElement
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.Element>(obj);
            mauiObject.HandlerChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
