//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ScrollViewGeneratedExtension
    {
        public static T LayoutAreaOverride<T>(this T obj,
            Microsoft.Maui.Graphics.Rect? layoutAreaOverride)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Rect>(layoutAreaOverride);
            if (layoutAreaOverride != null) mauiObject.LayoutAreaOverride = mauiValue;
            return obj;
        }
        
        public static T LayoutAreaOverride<T>(this T obj,
            Microsoft.Maui.Graphics.Rect? layoutAreaOverride,
            System.Func<ValueDef<Microsoft.Maui.Graphics.Rect>, ValueDef<Microsoft.Maui.Graphics.Rect>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Rect>(layoutAreaOverride);
            if (layoutAreaOverride != null) mauiObject.LayoutAreaOverride = mauiValue;
            var def = definition(new ValueDef<Microsoft.Maui.Graphics.Rect>());
            if (def.ValueIsSet()) mauiObject.LayoutAreaOverride = def.GetValue();
            return obj;
        }
        
        public static T LayoutAreaOverride<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Graphics.Rect>, ValueDef<Microsoft.Maui.Graphics.Rect>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Graphics.Rect>());
            if (def.ValueIsSet()) mauiObject.LayoutAreaOverride = def.GetValue();
            return obj;
        }
        
        public static T Content<T>(this T obj,
            Microsoft.Maui.Controls.View? content)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.View>(content);
            if (content != null) mauiObject.Content = mauiValue;
            return obj;
        }
        
        public static T Content<T>(this T obj,
            Microsoft.Maui.Controls.View? content,
            System.Func<ValueDef<Microsoft.Maui.Controls.View>, ValueDef<Microsoft.Maui.Controls.View>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.View>(content);
            if (content != null) mauiObject.Content = mauiValue;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.View>());
            if (def.ValueIsSet()) mauiObject.Content = def.GetValue();
            return obj;
        }
        
        public static T Content<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Controls.View>, ValueDef<Microsoft.Maui.Controls.View>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.View>());
            if (def.ValueIsSet()) mauiObject.Content = def.GetValue();
            return obj;
        }
        
        public static T Orientation<T>(this T obj,
            Microsoft.Maui.ScrollOrientation? orientation)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.ScrollOrientation>(orientation);
            if (orientation != null) mauiObject.Orientation = mauiValue;
            return obj;
        }
        
        public static T Orientation<T>(this T obj,
            Microsoft.Maui.ScrollOrientation? orientation,
            System.Func<BindableDef<Microsoft.Maui.ScrollOrientation>, BindableDef<Microsoft.Maui.ScrollOrientation>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.ScrollOrientation>(orientation);
            if (orientation != null) mauiObject.Orientation = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.ScrollOrientation>(mauiObject, Microsoft.Maui.Controls.ScrollView.OrientationProperty));
            if (def.ValueIsSet()) mauiObject.Orientation = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Orientation<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.ScrollOrientation>, BindableDef<Microsoft.Maui.ScrollOrientation>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.ScrollOrientation>(mauiObject, Microsoft.Maui.Controls.ScrollView.OrientationProperty));
            if (def.ValueIsSet()) mauiObject.Orientation = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? horizontalScrollBarVisibility)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.ScrollBarVisibility>(horizontalScrollBarVisibility);
            if (horizontalScrollBarVisibility != null) mauiObject.HorizontalScrollBarVisibility = mauiValue;
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? horizontalScrollBarVisibility,
            System.Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.ScrollBarVisibility>(horizontalScrollBarVisibility);
            if (horizontalScrollBarVisibility != null) mauiObject.HorizontalScrollBarVisibility = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ScrollView.HorizontalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ScrollView.HorizontalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? verticalScrollBarVisibility)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.ScrollBarVisibility>(verticalScrollBarVisibility);
            if (verticalScrollBarVisibility != null) mauiObject.VerticalScrollBarVisibility = mauiValue;
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? verticalScrollBarVisibility,
            System.Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.ScrollBarVisibility>(verticalScrollBarVisibility);
            if (verticalScrollBarVisibility != null) mauiObject.VerticalScrollBarVisibility = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ScrollView.VerticalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IScrollView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ScrollView.VerticalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ScrollToRequestedEventArgs> action)
            where T : Sharp.UI.IScrollView
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.ScrollToRequested += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ScrolledEventArgs> action)
            where T : Sharp.UI.IScrollView
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ScrollView>(obj);
            mauiObject.Scrolled += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
