//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class CarouselViewGeneratedExtension
    {
        public static T Loop<T>(this T obj,
            bool? loop)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(loop);
            if (loop != null) mauiObject.Loop = mauiValue;
            return obj;
        }
        
        public static T Loop<T>(this T obj,
            bool? loop,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(loop);
            if (loop != null) mauiObject.Loop = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.LoopProperty));
            if (def.ValueIsSet()) mauiObject.Loop = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Loop<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.LoopProperty));
            if (def.ValueIsSet()) mauiObject.Loop = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PeekAreaInsets<T>(this T obj,
            Microsoft.Maui.Thickness? peekAreaInsets)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Thickness>(peekAreaInsets);
            if (peekAreaInsets != null) mauiObject.PeekAreaInsets = mauiValue;
            return obj;
        }
        
        public static T PeekAreaInsets<T>(this T obj,
            Microsoft.Maui.Thickness? peekAreaInsets,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Thickness>(peekAreaInsets);
            if (peekAreaInsets != null) mauiObject.PeekAreaInsets = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.CarouselView.PeekAreaInsetsProperty));
            if (def.ValueIsSet()) mauiObject.PeekAreaInsets = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PeekAreaInsets<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.CarouselView.PeekAreaInsetsProperty));
            if (def.ValueIsSet()) mauiObject.PeekAreaInsets = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VisibleViews<T>(this T obj,
            System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View> visibleViews)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            foreach (var item in visibleViews)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.View>(item);
                mauiObject.VisibleViews.Add(mauiItem);
            }
            return obj;
        }

        public static T VisibleViews<T>(this T obj,
            params Microsoft.Maui.Controls.View[] visibleViews)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            foreach (var item in visibleViews)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.View>(item);
                mauiObject.VisibleViews.Add(mauiItem);
            }
            return obj;
        }

        public static T VisibleViews<T>(this T obj,
            System.Func<Def<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>, Def<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new Def<System.Collections.ObjectModel.ObservableCollection<Microsoft.Maui.Controls.View>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) 
                {
                    var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.View>(item);
                    mauiObject.VisibleViews.Add(mauiItem);
                }
            }
            return obj;
        }
        
        public static T IsBounceEnabled<T>(this T obj,
            bool? isBounceEnabled)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isBounceEnabled);
            if (isBounceEnabled != null) mauiObject.IsBounceEnabled = mauiValue;
            return obj;
        }
        
        public static T IsBounceEnabled<T>(this T obj,
            bool? isBounceEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isBounceEnabled);
            if (isBounceEnabled != null) mauiObject.IsBounceEnabled = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsBounceEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsBounceEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsBounceEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsBounceEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsBounceEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsSwipeEnabled<T>(this T obj,
            bool? isSwipeEnabled)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isSwipeEnabled);
            if (isSwipeEnabled != null) mauiObject.IsSwipeEnabled = mauiValue;
            return obj;
        }
        
        public static T IsSwipeEnabled<T>(this T obj,
            bool? isSwipeEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isSwipeEnabled);
            if (isSwipeEnabled != null) mauiObject.IsSwipeEnabled = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsSwipeEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsSwipeEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsSwipeEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsSwipeEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsSwipeEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsScrollAnimated<T>(this T obj,
            bool? isScrollAnimated)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isScrollAnimated);
            if (isScrollAnimated != null) mauiObject.IsScrollAnimated = mauiValue;
            return obj;
        }
        
        public static T IsScrollAnimated<T>(this T obj,
            bool? isScrollAnimated,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isScrollAnimated);
            if (isScrollAnimated != null) mauiObject.IsScrollAnimated = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsScrollAnimatedProperty));
            if (def.ValueIsSet()) mauiObject.IsScrollAnimated = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsScrollAnimated<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CarouselView.IsScrollAnimatedProperty));
            if (def.ValueIsSet()) mauiObject.IsScrollAnimated = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            object? currentItem)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<object>(currentItem);
            if (currentItem != null) mauiObject.CurrentItem = mauiValue;
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            object? currentItem,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<object>(currentItem);
            if (currentItem != null) mauiObject.CurrentItem = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemProperty));
            if (def.ValueIsSet()) mauiObject.CurrentItem = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CurrentItem<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemProperty));
            if (def.ValueIsSet()) mauiObject.CurrentItem = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CurrentItemChangedCommand<T>(this T obj,
            System.Windows.Input.ICommand? currentItemChangedCommand)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(currentItemChangedCommand);
            if (currentItemChangedCommand != null) mauiObject.CurrentItemChangedCommand = mauiValue;
            return obj;
        }
        
        public static T CurrentItemChangedCommand<T>(this T obj,
            System.Windows.Input.ICommand? currentItemChangedCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(currentItemChangedCommand);
            if (currentItemChangedCommand != null) mauiObject.CurrentItemChangedCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandProperty));
            if (def.ValueIsSet()) mauiObject.CurrentItemChangedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CurrentItemChangedCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandProperty));
            if (def.ValueIsSet()) mauiObject.CurrentItemChangedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T obj,
            object? currentItemChangedCommandParameter)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<object>(currentItemChangedCommandParameter);
            if (currentItemChangedCommandParameter != null) mauiObject.CurrentItemChangedCommandParameter = mauiValue;
            return obj;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T obj,
            object? currentItemChangedCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<object>(currentItemChangedCommandParameter);
            if (currentItemChangedCommandParameter != null) mauiObject.CurrentItemChangedCommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CurrentItemChangedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CurrentItemChangedCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.CurrentItemChangedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CurrentItemChangedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            int? position)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<int>(position);
            if (position != null) mauiObject.Position = mauiValue;
            return obj;
        }
        
        public static T Position<T>(this T obj,
            int? position,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<int>(position);
            if (position != null) mauiObject.Position = mauiValue;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionProperty));
            if (def.ValueIsSet()) mauiObject.Position = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Position<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionProperty));
            if (def.ValueIsSet()) mauiObject.Position = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PositionChangedCommand<T>(this T obj,
            System.Windows.Input.ICommand? positionChangedCommand)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(positionChangedCommand);
            if (positionChangedCommand != null) mauiObject.PositionChangedCommand = mauiValue;
            return obj;
        }
        
        public static T PositionChangedCommand<T>(this T obj,
            System.Windows.Input.ICommand? positionChangedCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(positionChangedCommand);
            if (positionChangedCommand != null) mauiObject.PositionChangedCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandProperty));
            if (def.ValueIsSet()) mauiObject.PositionChangedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PositionChangedCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandProperty));
            if (def.ValueIsSet()) mauiObject.PositionChangedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PositionChangedCommandParameter<T>(this T obj,
            object? positionChangedCommandParameter)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<object>(positionChangedCommandParameter);
            if (positionChangedCommandParameter != null) mauiObject.PositionChangedCommandParameter = mauiValue;
            return obj;
        }
        
        public static T PositionChangedCommandParameter<T>(this T obj,
            object? positionChangedCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<object>(positionChangedCommandParameter);
            if (positionChangedCommandParameter != null) mauiObject.PositionChangedCommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PositionChangedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PositionChangedCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.CarouselView.PositionChangedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PositionChangedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            Microsoft.Maui.Controls.LinearItemsLayout? itemsLayout)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.LinearItemsLayout>(itemsLayout);
            if (itemsLayout != null) mauiObject.ItemsLayout = mauiValue;
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            Microsoft.Maui.Controls.LinearItemsLayout? itemsLayout,
            System.Func<BindableDef<Microsoft.Maui.Controls.LinearItemsLayout>, BindableDef<Microsoft.Maui.Controls.LinearItemsLayout>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.LinearItemsLayout>(itemsLayout);
            if (itemsLayout != null) mauiObject.ItemsLayout = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LinearItemsLayout>(mauiObject, Microsoft.Maui.Controls.CarouselView.ItemsLayoutProperty));
            if (def.ValueIsSet()) mauiObject.ItemsLayout = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ItemsLayout<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.LinearItemsLayout>, BindableDef<Microsoft.Maui.Controls.LinearItemsLayout>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LinearItemsLayout>(mauiObject, Microsoft.Maui.Controls.CarouselView.ItemsLayoutProperty));
            if (def.ValueIsSet()) mauiObject.ItemsLayout = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IndicatorView<T>(this T obj,
            Microsoft.Maui.Controls.IndicatorView? indicatorView)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.IndicatorView>(indicatorView);
            if (indicatorView != null) mauiObject.IndicatorView = mauiValue;
            return obj;
        }
        
        public static T IndicatorView<T>(this T obj,
            Microsoft.Maui.Controls.IndicatorView? indicatorView,
            System.Func<ValueDef<Microsoft.Maui.Controls.IndicatorView>, ValueDef<Microsoft.Maui.Controls.IndicatorView>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.IndicatorView>(indicatorView);
            if (indicatorView != null) mauiObject.IndicatorView = mauiValue;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.IndicatorView>());
            if (def.ValueIsSet()) mauiObject.IndicatorView = def.GetValue();
            return obj;
        }
        
        public static T IndicatorView<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Controls.IndicatorView>, ValueDef<Microsoft.Maui.Controls.IndicatorView>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.IndicatorView>());
            if (def.ValueIsSet()) mauiObject.IndicatorView = def.GetValue();
            return obj;
        }
        
        public static T IsScrolling<T>(this T obj,
            bool? isScrolling)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isScrolling);
            if (isScrolling != null) mauiObject.IsScrolling = mauiValue;
            return obj;
        }
        
        public static T IsScrolling<T>(this T obj,
            bool? isScrolling,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isScrolling);
            if (isScrolling != null) mauiObject.IsScrolling = mauiValue;
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsScrolling = def.GetValue();
            return obj;
        }
        
        public static T IsScrolling<T>(this T obj,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.ICarouselView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsScrolling = def.GetValue();
            return obj;
        }
        
        public static T OnCurrentItemChanged<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.CurrentItemChangedEventArgs> action)
            where T : Sharp.UI.ICarouselView
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.CurrentItemChanged += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnPositionChanged<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.PositionChangedEventArgs> action)
            where T : Sharp.UI.ICarouselView
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CarouselView>(obj);
            mauiObject.PositionChanged += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
