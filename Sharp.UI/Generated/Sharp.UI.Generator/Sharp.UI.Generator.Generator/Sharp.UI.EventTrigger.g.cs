//
// <auto-generated>
//

#pragma warning disable CS8669


using System.Collections;
using System.Collections.ObjectModel;


namespace Sharp.UI
{
    public partial class EventTrigger : Sharp.UI.IEventTrigger, ISealedMauiWrapper, IList<Microsoft.Maui.Controls.TriggerAction>, IWrappedBindableObject
    {
        // ----- maui object -----

        public object _maui_RawObject { get; set; }

        public Microsoft.Maui.Controls.EventTrigger MauiObject { get => (Microsoft.Maui.Controls.EventTrigger)_maui_RawObject; set => _maui_RawObject = value; }

        // ----- constructors -----

        protected EventTrigger(Microsoft.Maui.Controls.EventTrigger eventTrigger)
        {
            MauiObject = eventTrigger;
        }

        public EventTrigger()
        {
            MauiObject = new Microsoft.Maui.Controls.EventTrigger();
        }

        public EventTrigger(out EventTrigger eventTrigger) : this()
        {
            eventTrigger = this;
        }

        public EventTrigger(System.Action<EventTrigger> configure) : this()
        {
            configure(this);
        }

        public EventTrigger(out EventTrigger eventTrigger, System.Action<EventTrigger> configure) : this()
        {
            eventTrigger = this;
            configure(this);
        }

        // ----- operators -----

        public static implicit operator EventTrigger(Microsoft.Maui.Controls.EventTrigger mauiObject) => new EventTrigger(mauiObject);
        public static implicit operator Microsoft.Maui.Controls.EventTrigger(EventTrigger obj) => obj.MauiObject;

        // ----- collection container -----

        public int Count => this.MauiObject.Actions.Count;
        public Microsoft.Maui.Controls.TriggerAction this[int index] { get => this.MauiObject.Actions[index]; set => this.MauiObject.Actions[index] = value; }
        public bool IsReadOnly => false;
        public void Add(Microsoft.Maui.Controls.TriggerAction item) => this.MauiObject.Actions.Add(item);
        public void Clear() => this.MauiObject.Actions.Clear();
        public bool Contains(Microsoft.Maui.Controls.TriggerAction item) => this.MauiObject.Actions.Contains(item);
        public void CopyTo(Microsoft.Maui.Controls.TriggerAction[] array, int arrayIndex) => this.MauiObject.Actions.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Controls.TriggerAction> GetEnumerator() => this.MauiObject.Actions.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Controls.TriggerAction item) => this.MauiObject.Actions.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Controls.TriggerAction item) => this.MauiObject.Actions.Insert(index, item);
        public bool Remove(Microsoft.Maui.Controls.TriggerAction item) => this.MauiObject.Actions.Remove(item);
        public void RemoveAt(int index) => this.MauiObject.Actions.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.MauiObject.Actions.GetEnumerator();

        // ----- bindable properties -----

        public static Microsoft.Maui.Controls.BindableProperty BindingContextProperty => Microsoft.Maui.Controls.BindableObject.BindingContextProperty;

        // ----- properties / events -----

        public System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerAction> Actions { get => MauiObject.Actions; }
        public string Event { get => MauiObject.Event; set => MauiObject.Event = value; }
        public System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerAction> EnterActions { get => MauiObject.EnterActions; }
        public System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerAction> ExitActions { get => MauiObject.ExitActions; }
        public bool IsSealed { get => MauiObject.IsSealed; }
        public System.Type TargetType { get => MauiObject.TargetType; }
        public Microsoft.Maui.Dispatching.IDispatcher Dispatcher { get => MauiObject.Dispatcher; }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add => MauiObject.PropertyChanged += value; remove => MauiObject.PropertyChanged -= value; }
        public event Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging { add => MauiObject.PropertyChanging += value; remove => MauiObject.PropertyChanging -= value; }
        public event System.EventHandler BindingContextChanged { add => MauiObject.BindingContextChanged += value; remove => MauiObject.BindingContextChanged -= value; }
        // ----- binding context -----

        public object BindingContext
        {
            get => MauiObject.BindingContext;
            set
            {
                var mauiObject = MauiWrapper.GetObject<object>(value);
                MauiObject.BindingContext = mauiObject;
            }
        }
        

    }
}

#pragma warning restore CS8669
