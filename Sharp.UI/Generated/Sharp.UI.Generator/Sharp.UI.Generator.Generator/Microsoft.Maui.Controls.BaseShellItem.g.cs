//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class BaseShellItemGeneratedExtension
    {
        public static T FlyoutIcon<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource? flyoutIcon)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (flyoutIcon != null) mauiObject.FlyoutIcon = (Microsoft.Maui.Controls.ImageSource)flyoutIcon;
            return obj;
        }
        
        public static T FlyoutIcon<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource? flyoutIcon,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);         
            if (flyoutIcon != null) mauiObject.FlyoutIcon = (Microsoft.Maui.Controls.ImageSource)flyoutIcon;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.FlyoutIconProperty));
            if (def.ValueIsSet()) mauiObject.FlyoutIcon = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FlyoutIcon<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.FlyoutIconProperty));
            if (def.ValueIsSet()) mauiObject.FlyoutIcon = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Icon<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource? icon)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (icon != null) mauiObject.Icon = (Microsoft.Maui.Controls.ImageSource)icon;
            return obj;
        }
        
        public static T Icon<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource? icon,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);         
            if (icon != null) mauiObject.Icon = (Microsoft.Maui.Controls.ImageSource)icon;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.IconProperty));
            if (def.ValueIsSet()) mauiObject.Icon = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Icon<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.IconProperty));
            if (def.ValueIsSet()) mauiObject.Icon = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            bool? isEnabled)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (isEnabled != null) mauiObject.IsEnabled = (bool)isEnabled;
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            bool? isEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);         
            if (isEnabled != null) mauiObject.IsEnabled = (bool)isEnabled;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.IsEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.IsEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Route<T>(this T obj,
            string? route)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (route != null) mauiObject.Route = (string)route;
            return obj;
        }
        
        public static T Route<T>(this T obj,
            string? route,
            System.Func<ValueDef<string>, ValueDef<string>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (route != null) mauiObject.Route = (string)route;
            var def = definition(new ValueDef<string>());
            if (def.ValueIsSet()) mauiObject.Route = def.GetValue();
            return obj;
        }
        
        public static T Route<T>(this T obj,
            System.Func<ValueDef<string>, ValueDef<string>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new ValueDef<string>());
            if (def.ValueIsSet()) mauiObject.Route = def.GetValue();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            string? title)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (title != null) mauiObject.Title = (string)title;
            return obj;
        }
        
        public static T Title<T>(this T obj,
            string? title,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);         
            if (title != null) mauiObject.Title = (string)title;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.TitleProperty));
            if (def.ValueIsSet()) mauiObject.Title = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Title<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.TitleProperty));
            if (def.ValueIsSet()) mauiObject.Title = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            bool? isVisible)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (isVisible != null) mauiObject.IsVisible = (bool)isVisible;
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            bool? isVisible,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);         
            if (isVisible != null) mauiObject.IsVisible = (bool)isVisible;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.IsVisibleProperty));
            if (def.ValueIsSet()) mauiObject.IsVisible = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.BaseShellItem.IsVisibleProperty));
            if (def.ValueIsSet()) mauiObject.IsVisible = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FlyoutItemIsVisible<T>(this T obj,
            bool? flyoutItemIsVisible)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (flyoutItemIsVisible != null) mauiObject.FlyoutItemIsVisible = (bool)flyoutItemIsVisible;
            return obj;
        }
        
        public static T FlyoutItemIsVisible<T>(this T obj,
            bool? flyoutItemIsVisible,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (flyoutItemIsVisible != null) mauiObject.FlyoutItemIsVisible = (bool)flyoutItemIsVisible;
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.FlyoutItemIsVisible = def.GetValue();
            return obj;
        }
        
        public static T FlyoutItemIsVisible<T>(this T obj,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.FlyoutItemIsVisible = def.GetValue();
            return obj;
        }
        
        public static T OnAppearing<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            mauiObject.Appearing += handler;
            return obj;
        }
        
        public static T OnAppearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            mauiObject.Appearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDisappearing<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            mauiObject.Disappearing += handler;
            return obj;
        }
        
        public static T OnDisappearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            mauiObject.Disappearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T ShellItemTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? itemTemplate)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            if (itemTemplate != null) mauiObject.SetValue(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, (Microsoft.Maui.Controls.DataTemplate)itemTemplate);
            return obj;
        }
        
        public static T ShellItemTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? itemTemplate,
            System.Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);         
            if (itemTemplate != null) mauiObject.SetValue(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, (Microsoft.Maui.Controls.DataTemplate)itemTemplate);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.Shell.ItemTemplateProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T ShellItemTemplate<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.Shell.ItemTemplateProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T ShellItemTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IBaseShellItem
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.BaseShellItem>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, new Microsoft.Maui.Controls.DataTemplate(loadTemplate));
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
