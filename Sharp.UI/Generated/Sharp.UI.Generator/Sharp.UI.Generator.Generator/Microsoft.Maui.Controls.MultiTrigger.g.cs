//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class MultiTriggerGeneratedExtension
    {
        public static T Conditions<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.Condition> conditions)
            where T : Sharp.UI.IMultiTrigger
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.MultiTrigger>(obj);
            foreach (var item in conditions) mauiObject.Conditions.Add(item);
            return obj;
        }

        public static T Conditions<T>(this T obj,
            params Microsoft.Maui.Controls.Condition[] conditions)
            where T : Sharp.UI.IMultiTrigger
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.MultiTrigger>(obj);
            foreach (var item in conditions) mauiObject.Conditions.Add(item);
            return obj;
        }

        public static T Conditions<T>(this T obj,
            Func<Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Condition>>, Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Condition>>> definition)
            where T : Sharp.UI.IMultiTrigger
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.MultiTrigger>(obj);
            var def = definition(new Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Condition>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) mauiObject.Conditions.Add(item);
            }
            return obj;
        }
        
        public static T Setters<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.Setter> setters)
            where T : Sharp.UI.IMultiTrigger
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.MultiTrigger>(obj);
            foreach (var item in setters) mauiObject.Setters.Add(item);
            return obj;
        }

        public static T Setters<T>(this T obj,
            params Microsoft.Maui.Controls.Setter[] setters)
            where T : Sharp.UI.IMultiTrigger
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.MultiTrigger>(obj);
            foreach (var item in setters) mauiObject.Setters.Add(item);
            return obj;
        }

        public static T Setters<T>(this T obj,
            Func<Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Setter>>, Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Setter>>> definition)
            where T : Sharp.UI.IMultiTrigger
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.MultiTrigger>(obj);
            var def = definition(new Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Setter>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) mauiObject.Setters.Add(item);
            }
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
