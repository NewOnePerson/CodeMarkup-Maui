//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class TextCellGeneratedExtension
    {
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand command)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            mauiObject.Command = (System.Windows.Input.ICommand)command;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.TextCell.CommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object commandParameter)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            mauiObject.CommandParameter = (object)commandParameter;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.TextCell.CommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            string detail)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            mauiObject.Detail = (string)detail;
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Detail = builder.GetValue();
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Detail = builder.GetValue();
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.TextCell.DetailProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DetailColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color detailColor)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            mauiObject.DetailColor = (Microsoft.Maui.Graphics.Color)detailColor;
            return obj;
        }
        
        public static T DetailColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.DetailColor = builder.GetValue();
            return obj;
        }
        
        public static T DetailColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.DetailColor = builder.GetValue();
            return obj;
        }
        
        public static T DetailColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.TextCell.DetailColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            mauiObject.Text = (string)text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.TextCell.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.ITextCell
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TextCell>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.TextCell.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
