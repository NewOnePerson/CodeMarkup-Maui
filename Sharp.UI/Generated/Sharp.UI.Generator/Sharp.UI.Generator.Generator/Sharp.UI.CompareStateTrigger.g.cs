//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public partial class CompareStateTrigger : Sharp.UI.ICompareStateTrigger, ISealedMauiWrapper, IWrappedBindableObject
    {
        // ----- maui object -----

        public object _maui_RawObject { get; set; }

        public Microsoft.Maui.Controls.CompareStateTrigger MauiObject { get => (Microsoft.Maui.Controls.CompareStateTrigger)_maui_RawObject; set => _maui_RawObject = value; }

        // ----- constructors -----

        protected CompareStateTrigger(Microsoft.Maui.Controls.CompareStateTrigger compareStateTrigger)
        {
            MauiObject = compareStateTrigger;
        }

        public CompareStateTrigger()
        {
            MauiObject = new Microsoft.Maui.Controls.CompareStateTrigger();
        }

        public CompareStateTrigger(out CompareStateTrigger compareStateTrigger) : this()
        {
            compareStateTrigger = this;
        }

        public CompareStateTrigger(System.Action<CompareStateTrigger> configure) : this()
        {
            configure(this);
        }

        public CompareStateTrigger(out CompareStateTrigger compareStateTrigger, System.Action<CompareStateTrigger> configure) : this()
        {
            compareStateTrigger = this;
            configure(this);
        }

        // ----- operators -----

        public static implicit operator CompareStateTrigger(Microsoft.Maui.Controls.CompareStateTrigger mauiObject) => new CompareStateTrigger(mauiObject);
        public static implicit operator Microsoft.Maui.Controls.CompareStateTrigger(CompareStateTrigger obj) => obj.MauiObject;

        // ----- bindable properties -----

        public static Microsoft.Maui.Controls.BindableProperty PropertyProperty => Microsoft.Maui.Controls.CompareStateTrigger.PropertyProperty;
        public static Microsoft.Maui.Controls.BindableProperty ValueProperty => Microsoft.Maui.Controls.CompareStateTrigger.ValueProperty;
        public static Microsoft.Maui.Controls.BindableProperty BindingContextProperty => Microsoft.Maui.Controls.BindableObject.BindingContextProperty;

        // ----- properties / events -----

        public object Property { get => MauiObject.Property; set => MauiObject.Property = value; }
        public object Value { get => MauiObject.Value; set => MauiObject.Value = value; }
        public bool IsActive { get => MauiObject.IsActive; }
        public bool IsAttached { get => MauiObject.IsAttached; }
        public event System.EventHandler IsActiveChanged { add => MauiObject.IsActiveChanged += value; remove => MauiObject.IsActiveChanged -= value; }
        public Microsoft.Maui.Dispatching.IDispatcher Dispatcher { get => MauiObject.Dispatcher; }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add => MauiObject.PropertyChanged += value; remove => MauiObject.PropertyChanged -= value; }
        public event Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging { add => MauiObject.PropertyChanging += value; remove => MauiObject.PropertyChanging -= value; }
        public event System.EventHandler BindingContextChanged { add => MauiObject.BindingContextChanged += value; remove => MauiObject.BindingContextChanged -= value; }
        // ----- binding context -----

        public object BindingContext
        {
            get => MauiObject.BindingContext;
            set
            {
                var mauiObject = MauiWrapper.Value<object>(value);
                MauiObject.BindingContext = mauiObject;
            }
        }
        

    }
}

#pragma warning restore CS8669
