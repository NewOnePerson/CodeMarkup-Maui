//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class VisualElementGeneratedExtension
    {
        public static T Frame<T>(this T obj,
            Microsoft.Maui.Graphics.Rect frame)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Frame = (Microsoft.Maui.Graphics.Rect)frame;
            return obj;
        }
        
        public static T Frame<T>(this T obj,
            Microsoft.Maui.Graphics.Rect frame,
            System.Func<ValueDef<Microsoft.Maui.Graphics.Rect>, ValueDef<Microsoft.Maui.Graphics.Rect>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Frame = (Microsoft.Maui.Graphics.Rect)frame;
            var def = definition(new ValueDef<Microsoft.Maui.Graphics.Rect>());
            if (def.ValueIsSet()) mauiObject.Frame = def.GetValue();
            return obj;
        }
        
        public static T Frame<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Graphics.Rect>, ValueDef<Microsoft.Maui.Graphics.Rect>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Graphics.Rect>());
            if (def.ValueIsSet()) mauiObject.Frame = def.GetValue();
            return obj;
        }
        
        public static T Shadow<T>(this T obj,
            Microsoft.Maui.Controls.Shadow shadow)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Shadow = (Microsoft.Maui.Controls.Shadow)shadow;
            return obj;
        }
        
        public static T Shadow<T>(this T obj,
            Microsoft.Maui.Controls.Shadow shadow,
            System.Func<BindableDef<Microsoft.Maui.Controls.Shadow>, BindableDef<Microsoft.Maui.Controls.Shadow>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.Shadow = (Microsoft.Maui.Controls.Shadow)shadow;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Shadow>(mauiObject, Microsoft.Maui.Controls.VisualElement.ShadowProperty));
            if (def.ValueIsSet()) mauiObject.Shadow = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Shadow<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.Shadow>, BindableDef<Microsoft.Maui.Controls.Shadow>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Shadow>(mauiObject, Microsoft.Maui.Controls.VisualElement.ShadowProperty));
            if (def.ValueIsSet()) mauiObject.Shadow = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ZIndex<T>(this T obj,
            int zIndex)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.ZIndex = (int)zIndex;
            return obj;
        }
        
        public static T ZIndex<T>(this T obj,
            int zIndex,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.ZIndex = (int)zIndex;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.VisualElement.ZIndexProperty));
            if (def.ValueIsSet()) mauiObject.ZIndex = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ZIndex<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.VisualElement.ZIndexProperty));
            if (def.ValueIsSet()) mauiObject.ZIndex = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Visual<T>(this T obj,
            Microsoft.Maui.Controls.IVisual visual)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Visual = (Microsoft.Maui.Controls.IVisual)visual;
            return obj;
        }
        
        public static T Visual<T>(this T obj,
            Microsoft.Maui.Controls.IVisual visual,
            System.Func<BindableDef<Microsoft.Maui.Controls.IVisual>, BindableDef<Microsoft.Maui.Controls.IVisual>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.Visual = (Microsoft.Maui.Controls.IVisual)visual;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.IVisual>(mauiObject, Microsoft.Maui.Controls.VisualElement.VisualProperty));
            if (def.ValueIsSet()) mauiObject.Visual = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Visual<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.IVisual>, BindableDef<Microsoft.Maui.Controls.IVisual>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.IVisual>(mauiObject, Microsoft.Maui.Controls.VisualElement.VisualProperty));
            if (def.ValueIsSet()) mauiObject.Visual = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            Microsoft.Maui.FlowDirection flowDirection)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.FlowDirection = (Microsoft.Maui.FlowDirection)flowDirection;
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            Microsoft.Maui.FlowDirection flowDirection,
            System.Func<BindableDef<Microsoft.Maui.FlowDirection>, BindableDef<Microsoft.Maui.FlowDirection>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.FlowDirection = (Microsoft.Maui.FlowDirection)flowDirection;
            var def = definition(new BindableDef<Microsoft.Maui.FlowDirection>(mauiObject, Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty));
            if (def.ValueIsSet()) mauiObject.FlowDirection = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FlowDirection<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.FlowDirection>, BindableDef<Microsoft.Maui.FlowDirection>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.FlowDirection>(mauiObject, Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty));
            if (def.ValueIsSet()) mauiObject.FlowDirection = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AnchorX<T>(this T obj,
            double anchorX)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.AnchorX = (double)anchorX;
            return obj;
        }
        
        public static T AnchorX<T>(this T obj,
            double anchorX,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.AnchorX = (double)anchorX;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.AnchorXProperty));
            if (def.ValueIsSet()) mauiObject.AnchorX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AnchorX<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.AnchorXProperty));
            if (def.ValueIsSet()) mauiObject.AnchorX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AnchorY<T>(this T obj,
            double anchorY)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.AnchorY = (double)anchorY;
            return obj;
        }
        
        public static T AnchorY<T>(this T obj,
            double anchorY,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.AnchorY = (double)anchorY;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.AnchorYProperty));
            if (def.ValueIsSet()) mauiObject.AnchorY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AnchorY<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.AnchorYProperty));
            if (def.ValueIsSet()) mauiObject.AnchorY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BackgroundColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color backgroundColor)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.BackgroundColor = (Microsoft.Maui.Graphics.Color)backgroundColor;
            return obj;
        }
        
        public static T BackgroundColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color backgroundColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.BackgroundColor = (Microsoft.Maui.Graphics.Color)backgroundColor;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty));
            if (def.ValueIsSet()) mauiObject.BackgroundColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BackgroundColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty));
            if (def.ValueIsSet()) mauiObject.BackgroundColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Background<T>(this T obj,
            Microsoft.Maui.Controls.Brush background)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Background = (Microsoft.Maui.Controls.Brush)background;
            return obj;
        }
        
        public static T Background<T>(this T obj,
            Microsoft.Maui.Controls.Brush background,
            System.Func<BindableDef<Microsoft.Maui.Controls.Brush>, BindableDef<Microsoft.Maui.Controls.Brush>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.Background = (Microsoft.Maui.Controls.Brush)background;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Brush>(mauiObject, Microsoft.Maui.Controls.VisualElement.BackgroundProperty));
            if (def.ValueIsSet()) mauiObject.Background = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Background<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.Brush>, BindableDef<Microsoft.Maui.Controls.Brush>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Brush>(mauiObject, Microsoft.Maui.Controls.VisualElement.BackgroundProperty));
            if (def.ValueIsSet()) mauiObject.Background = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Behaviors<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior> behaviors)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            foreach (var item in behaviors)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.Behavior>(item);
                mauiObject.Behaviors.Add(mauiItem);
            }
            return obj;
        }

        public static T Behaviors<T>(this T obj,
            params Microsoft.Maui.Controls.Behavior[] behaviors)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            foreach (var item in behaviors)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.Behavior>(item);
                mauiObject.Behaviors.Add(mauiItem);
            }
            return obj;
        }

        public static T Behaviors<T>(this T obj,
            System.Func<Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>, Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) 
                {
                    var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.Behavior>(item);
                    mauiObject.Behaviors.Add(mauiItem);
                }
            }
            return obj;
        }
        
        public static T HeightRequest<T>(this T obj,
            double heightRequest)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.HeightRequest = (double)heightRequest;
            return obj;
        }
        
        public static T HeightRequest<T>(this T obj,
            double heightRequest,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.HeightRequest = (double)heightRequest;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.HeightRequestProperty));
            if (def.ValueIsSet()) mauiObject.HeightRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HeightRequest<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.HeightRequestProperty));
            if (def.ValueIsSet()) mauiObject.HeightRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T InputTransparent<T>(this T obj,
            bool inputTransparent)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.InputTransparent = (bool)inputTransparent;
            return obj;
        }
        
        public static T InputTransparent<T>(this T obj,
            bool inputTransparent,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.InputTransparent = (bool)inputTransparent;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.VisualElement.InputTransparentProperty));
            if (def.ValueIsSet()) mauiObject.InputTransparent = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T InputTransparent<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.VisualElement.InputTransparentProperty));
            if (def.ValueIsSet()) mauiObject.InputTransparent = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            bool isEnabled)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsEnabled = (bool)isEnabled;
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            bool isEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.IsEnabled = (bool)isEnabled;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.VisualElement.IsEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.VisualElement.IsEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            bool isVisible)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsVisible = (bool)isVisible;
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            bool isVisible,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.IsVisible = (bool)isVisible;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.VisualElement.IsVisibleProperty));
            if (def.ValueIsSet()) mauiObject.IsVisible = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsVisible<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.VisualElement.IsVisibleProperty));
            if (def.ValueIsSet()) mauiObject.IsVisible = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MinimumHeightRequest<T>(this T obj,
            double minimumHeightRequest)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.MinimumHeightRequest = (double)minimumHeightRequest;
            return obj;
        }
        
        public static T MinimumHeightRequest<T>(this T obj,
            double minimumHeightRequest,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.MinimumHeightRequest = (double)minimumHeightRequest;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty));
            if (def.ValueIsSet()) mauiObject.MinimumHeightRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MinimumHeightRequest<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty));
            if (def.ValueIsSet()) mauiObject.MinimumHeightRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MinimumWidthRequest<T>(this T obj,
            double minimumWidthRequest)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.MinimumWidthRequest = (double)minimumWidthRequest;
            return obj;
        }
        
        public static T MinimumWidthRequest<T>(this T obj,
            double minimumWidthRequest,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.MinimumWidthRequest = (double)minimumWidthRequest;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty));
            if (def.ValueIsSet()) mauiObject.MinimumWidthRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MinimumWidthRequest<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty));
            if (def.ValueIsSet()) mauiObject.MinimumWidthRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MaximumHeightRequest<T>(this T obj,
            double maximumHeightRequest)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.MaximumHeightRequest = (double)maximumHeightRequest;
            return obj;
        }
        
        public static T MaximumHeightRequest<T>(this T obj,
            double maximumHeightRequest,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.MaximumHeightRequest = (double)maximumHeightRequest;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty));
            if (def.ValueIsSet()) mauiObject.MaximumHeightRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MaximumHeightRequest<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty));
            if (def.ValueIsSet()) mauiObject.MaximumHeightRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MaximumWidthRequest<T>(this T obj,
            double maximumWidthRequest)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.MaximumWidthRequest = (double)maximumWidthRequest;
            return obj;
        }
        
        public static T MaximumWidthRequest<T>(this T obj,
            double maximumWidthRequest,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.MaximumWidthRequest = (double)maximumWidthRequest;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty));
            if (def.ValueIsSet()) mauiObject.MaximumWidthRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MaximumWidthRequest<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty));
            if (def.ValueIsSet()) mauiObject.MaximumWidthRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Opacity<T>(this T obj,
            double opacity)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Opacity = (double)opacity;
            return obj;
        }
        
        public static T Opacity<T>(this T obj,
            double opacity,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.Opacity = (double)opacity;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.OpacityProperty));
            if (def.ValueIsSet()) mauiObject.Opacity = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Opacity<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.OpacityProperty));
            if (def.ValueIsSet()) mauiObject.Opacity = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Rotation<T>(this T obj,
            double rotation)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Rotation = (double)rotation;
            return obj;
        }
        
        public static T Rotation<T>(this T obj,
            double rotation,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.Rotation = (double)rotation;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.RotationProperty));
            if (def.ValueIsSet()) mauiObject.Rotation = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Rotation<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.RotationProperty));
            if (def.ValueIsSet()) mauiObject.Rotation = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RotationX<T>(this T obj,
            double rotationX)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.RotationX = (double)rotationX;
            return obj;
        }
        
        public static T RotationX<T>(this T obj,
            double rotationX,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.RotationX = (double)rotationX;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.RotationXProperty));
            if (def.ValueIsSet()) mauiObject.RotationX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RotationX<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.RotationXProperty));
            if (def.ValueIsSet()) mauiObject.RotationX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RotationY<T>(this T obj,
            double rotationY)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.RotationY = (double)rotationY;
            return obj;
        }
        
        public static T RotationY<T>(this T obj,
            double rotationY,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.RotationY = (double)rotationY;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.RotationYProperty));
            if (def.ValueIsSet()) mauiObject.RotationY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RotationY<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.RotationYProperty));
            if (def.ValueIsSet()) mauiObject.RotationY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Scale<T>(this T obj,
            double scale)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Scale = (double)scale;
            return obj;
        }
        
        public static T Scale<T>(this T obj,
            double scale,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.Scale = (double)scale;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.ScaleProperty));
            if (def.ValueIsSet()) mauiObject.Scale = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Scale<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.ScaleProperty));
            if (def.ValueIsSet()) mauiObject.Scale = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ScaleX<T>(this T obj,
            double scaleX)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.ScaleX = (double)scaleX;
            return obj;
        }
        
        public static T ScaleX<T>(this T obj,
            double scaleX,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.ScaleX = (double)scaleX;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.ScaleXProperty));
            if (def.ValueIsSet()) mauiObject.ScaleX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ScaleX<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.ScaleXProperty));
            if (def.ValueIsSet()) mauiObject.ScaleX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ScaleY<T>(this T obj,
            double scaleY)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.ScaleY = (double)scaleY;
            return obj;
        }
        
        public static T ScaleY<T>(this T obj,
            double scaleY,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.ScaleY = (double)scaleY;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.ScaleYProperty));
            if (def.ValueIsSet()) mauiObject.ScaleY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ScaleY<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.ScaleYProperty));
            if (def.ValueIsSet()) mauiObject.ScaleY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TranslationX<T>(this T obj,
            double translationX)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.TranslationX = (double)translationX;
            return obj;
        }
        
        public static T TranslationX<T>(this T obj,
            double translationX,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.TranslationX = (double)translationX;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.TranslationXProperty));
            if (def.ValueIsSet()) mauiObject.TranslationX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TranslationX<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.TranslationXProperty));
            if (def.ValueIsSet()) mauiObject.TranslationX = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TranslationY<T>(this T obj,
            double translationY)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.TranslationY = (double)translationY;
            return obj;
        }
        
        public static T TranslationY<T>(this T obj,
            double translationY,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.TranslationY = (double)translationY;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.TranslationYProperty));
            if (def.ValueIsSet()) mauiObject.TranslationY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TranslationY<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.TranslationYProperty));
            if (def.ValueIsSet()) mauiObject.TranslationY = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Triggers<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase> triggers)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            foreach (var item in triggers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.TriggerBase>(item);
                mauiObject.Triggers.Add(mauiItem);
            }
            return obj;
        }

        public static T Triggers<T>(this T obj,
            params Microsoft.Maui.Controls.TriggerBase[] triggers)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            foreach (var item in triggers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.TriggerBase>(item);
                mauiObject.Triggers.Add(mauiItem);
            }
            return obj;
        }

        public static T Triggers<T>(this T obj,
            System.Func<Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>, Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) 
                {
                    var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.TriggerBase>(item);
                    mauiObject.Triggers.Add(mauiItem);
                }
            }
            return obj;
        }
        
        public static T WidthRequest<T>(this T obj,
            double widthRequest)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.WidthRequest = (double)widthRequest;
            return obj;
        }
        
        public static T WidthRequest<T>(this T obj,
            double widthRequest,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.WidthRequest = (double)widthRequest;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.WidthRequestProperty));
            if (def.ValueIsSet()) mauiObject.WidthRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T WidthRequest<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.VisualElement.WidthRequestProperty));
            if (def.ValueIsSet()) mauiObject.WidthRequest = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Clip<T>(this T obj,
            Microsoft.Maui.Controls.Shapes.Geometry clip)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Clip = (Microsoft.Maui.Controls.Shapes.Geometry)clip;
            return obj;
        }
        
        public static T Clip<T>(this T obj,
            Microsoft.Maui.Controls.Shapes.Geometry clip,
            System.Func<BindableDef<Microsoft.Maui.Controls.Shapes.Geometry>, BindableDef<Microsoft.Maui.Controls.Shapes.Geometry>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.Clip = (Microsoft.Maui.Controls.Shapes.Geometry)clip;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Shapes.Geometry>(mauiObject, Microsoft.Maui.Controls.VisualElement.ClipProperty));
            if (def.ValueIsSet()) mauiObject.Clip = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Clip<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.Shapes.Geometry>, BindableDef<Microsoft.Maui.Controls.Shapes.Geometry>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Shapes.Geometry>(mauiObject, Microsoft.Maui.Controls.VisualElement.ClipProperty));
            if (def.ValueIsSet()) mauiObject.Clip = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DisableLayout<T>(this T obj,
            bool disableLayout)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.DisableLayout = (bool)disableLayout;
            return obj;
        }
        
        public static T DisableLayout<T>(this T obj,
            bool disableLayout,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.DisableLayout = (bool)disableLayout;
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.DisableLayout = def.GetValue();
            return obj;
        }
        
        public static T DisableLayout<T>(this T obj,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.DisableLayout = def.GetValue();
            return obj;
        }
        
        public static T IsInPlatformLayout<T>(this T obj,
            bool isInPlatformLayout)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsInPlatformLayout = (bool)isInPlatformLayout;
            return obj;
        }
        
        public static T IsInPlatformLayout<T>(this T obj,
            bool isInPlatformLayout,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsInPlatformLayout = (bool)isInPlatformLayout;
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsInPlatformLayout = def.GetValue();
            return obj;
        }
        
        public static T IsInPlatformLayout<T>(this T obj,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsInPlatformLayout = def.GetValue();
            return obj;
        }
        
        public static T IsPlatformStateConsistent<T>(this T obj,
            bool isPlatformStateConsistent)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsPlatformStateConsistent = (bool)isPlatformStateConsistent;
            return obj;
        }
        
        public static T IsPlatformStateConsistent<T>(this T obj,
            bool isPlatformStateConsistent,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsPlatformStateConsistent = (bool)isPlatformStateConsistent;
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsPlatformStateConsistent = def.GetValue();
            return obj;
        }
        
        public static T IsPlatformStateConsistent<T>(this T obj,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsPlatformStateConsistent = def.GetValue();
            return obj;
        }
        
        public static T IsPlatformEnabled<T>(this T obj,
            bool isPlatformEnabled)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsPlatformEnabled = (bool)isPlatformEnabled;
            return obj;
        }
        
        public static T IsPlatformEnabled<T>(this T obj,
            bool isPlatformEnabled,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.IsPlatformEnabled = (bool)isPlatformEnabled;
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsPlatformEnabled = def.GetValue();
            return obj;
        }
        
        public static T IsPlatformEnabled<T>(this T obj,
            System.Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.IsPlatformEnabled = def.GetValue();
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            Microsoft.Maui.Controls.ResourceDictionary resources)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Resources = (Microsoft.Maui.Controls.ResourceDictionary)resources;
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            Microsoft.Maui.Controls.ResourceDictionary resources,
            System.Func<ValueDef<Microsoft.Maui.Controls.ResourceDictionary>, ValueDef<Microsoft.Maui.Controls.ResourceDictionary>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Resources = (Microsoft.Maui.Controls.ResourceDictionary)resources;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.ResourceDictionary>());
            if (def.ValueIsSet()) mauiObject.Resources = def.GetValue();
            return obj;
        }
        
        public static T Resources<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Controls.ResourceDictionary>, ValueDef<Microsoft.Maui.Controls.ResourceDictionary>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.ResourceDictionary>());
            if (def.ValueIsSet()) mauiObject.Resources = def.GetValue();
            return obj;
        }
        
        public static T OnLoaded<T>(this T obj, System.EventHandler? handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Loaded += handler;
            return obj;
        }
        
        public static T OnLoaded<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Loaded += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnUnloaded<T>(this T obj, System.EventHandler? handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Unloaded += handler;
            return obj;
        }
        
        public static T OnUnloaded<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Unloaded += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnChildrenReordered<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.ChildrenReordered += handler;
            return obj;
        }
        
        public static T OnChildrenReordered<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.ChildrenReordered += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnFocused<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Focused += handler;
            return obj;
        }
        
        public static T OnFocused<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Focused += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnMeasureInvalidated<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.MeasureInvalidated += handler;
            return obj;
        }
        
        public static T OnMeasureInvalidated<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.MeasureInvalidated += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnSizeChanged<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SizeChanged += handler;
            return obj;
        }
        
        public static T OnSizeChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SizeChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnUnfocused<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Unfocused += handler;
            return obj;
        }
        
        public static T OnUnfocused<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.Unfocused += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnBatchCommitted<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.Internals.EventArg<Microsoft.Maui.Controls.VisualElement>> handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.BatchCommitted += handler;
            return obj;
        }
        
        public static T OnBatchCommitted<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.BatchCommitted += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnFocusChangeRequested<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.VisualElement.FocusRequestArgs> handler)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.FocusChangeRequested += handler;
            return obj;
        }
        
        public static T OnFocusChangeRequested<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.FocusChangeRequested += (o, arg) => action(obj);
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            Microsoft.Maui.Controls.VisualStateGroupList visualStateGroups)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, (Microsoft.Maui.Controls.VisualStateGroupList)visualStateGroups);
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            Microsoft.Maui.Controls.VisualStateGroupList visualStateGroups,
            System.Func<BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>, BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, (Microsoft.Maui.Controls.VisualStateGroupList)visualStateGroups);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>(mauiObject, Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>, BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>(mauiObject, Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
