//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ButtonGeneratedExtension
    {
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Padding = (Microsoft.Maui.Thickness)padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Thickness>, LazyValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Button.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode lineBreakMode)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.LineBreakMode = (Microsoft.Maui.LineBreakMode)lineBreakMode;
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.LineBreakMode>, ValueBuilder<Microsoft.Maui.LineBreakMode>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) mauiObject.LineBreakMode = builder.GetValue();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.LineBreakMode>, LazyValueBuilder<Microsoft.Maui.LineBreakMode>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) mauiObject.LineBreakMode = builder.GetValue();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.LineBreakMode>, BindingBuilder<Microsoft.Maui.LineBreakMode>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.LineBreakMode>(mauiObject, Microsoft.Maui.Controls.Button.LineBreakModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color borderColor)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.BorderColor = (Microsoft.Maui.Graphics.Color)borderColor;
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.BorderColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int cornerRadius)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.CornerRadius = (int)cornerRadius;
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.Button.CornerRadiusProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double borderWidth)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.BorderWidth = (double)borderWidth;
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Button.BorderWidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            Microsoft.Maui.Controls.Button.ButtonContentLayout contentLayout)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.ContentLayout = (Microsoft.Maui.Controls.Button.ButtonContentLayout)contentLayout;
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>, ValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>());
            if (builder.ValueIsSet()) mauiObject.ContentLayout = builder.GetValue();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>, LazyValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>());
            if (builder.ValueIsSet()) mauiObject.ContentLayout = builder.GetValue();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>, BindingBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Button.ButtonContentLayout>(mauiObject, Microsoft.Maui.Controls.Button.ContentLayoutProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand command)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Command = (System.Windows.Input.ICommand)command;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.Button.CommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object commandParameter)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.CommandParameter = (object)commandParameter;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.Button.CommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource imageSource)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.ImageSource = (Microsoft.Maui.Controls.ImageSource)imageSource;
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.ImageSource = builder.GetValue();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>, LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.ImageSource = builder.GetValue();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Button.ImageSourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Text = (string)text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Button.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.CharacterSpacing = (double)characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Button.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) mauiObject.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>, LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) mauiObject.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Button.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontFamily = (string)fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Button.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontSize = (double)fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Button.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform textTransform)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.TextTransform = (Microsoft.Maui.TextTransform)textTransform;
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextTransform>, ValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) mauiObject.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextTransform>, LazyValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) mauiObject.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextTransform>, BindingBuilder<Microsoft.Maui.TextTransform>> buildBinding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.Button.TextTransformProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Clicked += handler;
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Clicked += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Pressed += handler;
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Pressed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Released += handler;
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Released += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
