//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ButtonGeneratedExtension
    {
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Padding = (Microsoft.Maui.Thickness)padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.Padding = (Microsoft.Maui.Thickness)padding;
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Button.PaddingProperty));
            if (def.ValueIsSet()) mauiObject.Padding = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Button.PaddingProperty));
            if (def.ValueIsSet()) mauiObject.Padding = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode lineBreakMode)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.LineBreakMode = (Microsoft.Maui.LineBreakMode)lineBreakMode;
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode lineBreakMode,
            System.Func<BindableDef<Microsoft.Maui.LineBreakMode>, BindableDef<Microsoft.Maui.LineBreakMode>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.LineBreakMode = (Microsoft.Maui.LineBreakMode)lineBreakMode;
            var def = definition(new BindableDef<Microsoft.Maui.LineBreakMode>(mauiObject, Microsoft.Maui.Controls.Button.LineBreakModeProperty));
            if (def.ValueIsSet()) mauiObject.LineBreakMode = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.LineBreakMode>, BindableDef<Microsoft.Maui.LineBreakMode>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.LineBreakMode>(mauiObject, Microsoft.Maui.Controls.Button.LineBreakModeProperty));
            if (def.ValueIsSet()) mauiObject.LineBreakMode = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color borderColor)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.BorderColor = (Microsoft.Maui.Graphics.Color)borderColor;
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color borderColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.BorderColor = (Microsoft.Maui.Graphics.Color)borderColor;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.BorderColorProperty));
            if (def.ValueIsSet()) mauiObject.BorderColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.BorderColorProperty));
            if (def.ValueIsSet()) mauiObject.BorderColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int cornerRadius)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.CornerRadius = (int)cornerRadius;
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int cornerRadius,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.CornerRadius = (int)cornerRadius;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Button.CornerRadiusProperty));
            if (def.ValueIsSet()) mauiObject.CornerRadius = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Button.CornerRadiusProperty));
            if (def.ValueIsSet()) mauiObject.CornerRadius = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double borderWidth)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.BorderWidth = (double)borderWidth;
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double borderWidth,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.BorderWidth = (double)borderWidth;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.BorderWidthProperty));
            if (def.ValueIsSet()) mauiObject.BorderWidth = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.BorderWidthProperty));
            if (def.ValueIsSet()) mauiObject.BorderWidth = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            Microsoft.Maui.Controls.Button.ButtonContentLayout contentLayout)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.ContentLayout = (Microsoft.Maui.Controls.Button.ButtonContentLayout)contentLayout;
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            Microsoft.Maui.Controls.Button.ButtonContentLayout contentLayout,
            System.Func<BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>, BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.ContentLayout = (Microsoft.Maui.Controls.Button.ButtonContentLayout)contentLayout;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>(mauiObject, Microsoft.Maui.Controls.Button.ContentLayoutProperty));
            if (def.ValueIsSet()) mauiObject.ContentLayout = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>, BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>(mauiObject, Microsoft.Maui.Controls.Button.ContentLayoutProperty));
            if (def.ValueIsSet()) mauiObject.ContentLayout = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand command)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Command = (System.Windows.Input.ICommand)command;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand command,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.Command = (System.Windows.Input.ICommand)command;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.Button.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.Button.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object commandParameter)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.CommandParameter = (object)commandParameter;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object commandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.CommandParameter = (object)commandParameter;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.Button.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.Button.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource imageSource)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.ImageSource = (Microsoft.Maui.Controls.ImageSource)imageSource;
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource imageSource,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.ImageSource = (Microsoft.Maui.Controls.ImageSource)imageSource;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Button.ImageSourceProperty));
            if (def.ValueIsSet()) mauiObject.ImageSource = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Button.ImageSourceProperty));
            if (def.ValueIsSet()) mauiObject.ImageSource = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Text = (string)text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.Text = (string)text;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.TextProperty));
            if (def.ValueIsSet()) mauiObject.Text = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.TextProperty));
            if (def.ValueIsSet()) mauiObject.Text = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.CharacterSpacing = (double)characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.CharacterSpacing = (double)characterSpacing;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Button.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Button.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontFamily = (string)fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.FontFamily = (string)fontFamily;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontSize = (double)fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.FontSize = (double)fontSize;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform textTransform)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.TextTransform = (Microsoft.Maui.TextTransform)textTransform;
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform textTransform,
            System.Func<BindableDef<Microsoft.Maui.TextTransform>, BindableDef<Microsoft.Maui.TextTransform>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);         
            mauiObject.TextTransform = (Microsoft.Maui.TextTransform)textTransform;
            var def = definition(new BindableDef<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.Button.TextTransformProperty));
            if (def.ValueIsSet()) mauiObject.TextTransform = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.TextTransform>, BindableDef<Microsoft.Maui.TextTransform>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.Button.TextTransformProperty));
            if (def.ValueIsSet()) mauiObject.TextTransform = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Clicked += handler;
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Clicked += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Pressed += handler;
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Pressed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Released += handler;
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Released += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
