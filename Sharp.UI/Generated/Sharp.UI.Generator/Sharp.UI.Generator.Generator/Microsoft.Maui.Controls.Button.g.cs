//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ButtonGeneratedExtension
    {
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness? padding)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Thickness>(padding);
            if (padding != null) mauiObject.Padding = mauiValue;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness? padding,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Thickness>(padding);
            if (padding != null) mauiObject.Padding = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Button.PaddingProperty));
            if (def.ValueIsSet()) mauiObject.Padding = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Button.PaddingProperty));
            if (def.ValueIsSet()) mauiObject.Padding = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode? lineBreakMode)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.LineBreakMode>(lineBreakMode);
            if (lineBreakMode != null) mauiObject.LineBreakMode = mauiValue;
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode? lineBreakMode,
            System.Func<BindableDef<Microsoft.Maui.LineBreakMode>, BindableDef<Microsoft.Maui.LineBreakMode>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.LineBreakMode>(lineBreakMode);
            if (lineBreakMode != null) mauiObject.LineBreakMode = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.LineBreakMode>(mauiObject, Microsoft.Maui.Controls.Button.LineBreakModeProperty));
            if (def.ValueIsSet()) mauiObject.LineBreakMode = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.LineBreakMode>, BindableDef<Microsoft.Maui.LineBreakMode>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.LineBreakMode>(mauiObject, Microsoft.Maui.Controls.Button.LineBreakModeProperty));
            if (def.ValueIsSet()) mauiObject.LineBreakMode = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? borderColor)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(borderColor);
            if (borderColor != null) mauiObject.BorderColor = mauiValue;
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? borderColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(borderColor);
            if (borderColor != null) mauiObject.BorderColor = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.BorderColorProperty));
            if (def.ValueIsSet()) mauiObject.BorderColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.BorderColorProperty));
            if (def.ValueIsSet()) mauiObject.BorderColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int? cornerRadius)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<int>(cornerRadius);
            if (cornerRadius != null) mauiObject.CornerRadius = mauiValue;
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int? cornerRadius,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<int>(cornerRadius);
            if (cornerRadius != null) mauiObject.CornerRadius = mauiValue;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Button.CornerRadiusProperty));
            if (def.ValueIsSet()) mauiObject.CornerRadius = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Button.CornerRadiusProperty));
            if (def.ValueIsSet()) mauiObject.CornerRadius = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double? borderWidth)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<double>(borderWidth);
            if (borderWidth != null) mauiObject.BorderWidth = mauiValue;
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double? borderWidth,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<double>(borderWidth);
            if (borderWidth != null) mauiObject.BorderWidth = mauiValue;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.BorderWidthProperty));
            if (def.ValueIsSet()) mauiObject.BorderWidth = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.BorderWidthProperty));
            if (def.ValueIsSet()) mauiObject.BorderWidth = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            Microsoft.Maui.Controls.Button.ButtonContentLayout? contentLayout)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.Button.ButtonContentLayout>(contentLayout);
            if (contentLayout != null) mauiObject.ContentLayout = mauiValue;
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            Microsoft.Maui.Controls.Button.ButtonContentLayout? contentLayout,
            System.Func<BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>, BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.Button.ButtonContentLayout>(contentLayout);
            if (contentLayout != null) mauiObject.ContentLayout = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>(mauiObject, Microsoft.Maui.Controls.Button.ContentLayoutProperty));
            if (def.ValueIsSet()) mauiObject.ContentLayout = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ContentLayout<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>, BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.Button.ButtonContentLayout>(mauiObject, Microsoft.Maui.Controls.Button.ContentLayoutProperty));
            if (def.ValueIsSet()) mauiObject.ContentLayout = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand? command)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(command);
            if (command != null) mauiObject.Command = mauiValue;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand? command,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(command);
            if (command != null) mauiObject.Command = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.Button.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.Button.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object? commandParameter)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<object>(commandParameter);
            if (commandParameter != null) mauiObject.CommandParameter = mauiValue;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object? commandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<object>(commandParameter);
            if (commandParameter != null) mauiObject.CommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.Button.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.Button.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource? imageSource)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.ImageSource>(imageSource);
            if (imageSource != null) mauiObject.ImageSource = mauiValue;
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource? imageSource,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.ImageSource>(imageSource);
            if (imageSource != null) mauiObject.ImageSource = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Button.ImageSourceProperty));
            if (def.ValueIsSet()) mauiObject.ImageSource = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T ImageSource<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.ImageSource>, BindableDef<Microsoft.Maui.Controls.ImageSource>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.Button.ImageSourceProperty));
            if (def.ValueIsSet()) mauiObject.ImageSource = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string? text)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<string>(text);
            if (text != null) mauiObject.Text = mauiValue;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string? text,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<string>(text);
            if (text != null) mauiObject.Text = mauiValue;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.TextProperty));
            if (def.ValueIsSet()) mauiObject.Text = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.TextProperty));
            if (def.ValueIsSet()) mauiObject.Text = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? textColor)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(textColor);
            if (textColor != null) mauiObject.TextColor = mauiValue;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? textColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(textColor);
            if (textColor != null) mauiObject.TextColor = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Button.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double? characterSpacing)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<double>(characterSpacing);
            if (characterSpacing != null) mauiObject.CharacterSpacing = mauiValue;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double? characterSpacing,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<double>(characterSpacing);
            if (characterSpacing != null) mauiObject.CharacterSpacing = mauiValue;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes? fontAttributes)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.FontAttributes>(fontAttributes);
            if (fontAttributes != null) mauiObject.FontAttributes = mauiValue;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes? fontAttributes,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.FontAttributes>(fontAttributes);
            if (fontAttributes != null) mauiObject.FontAttributes = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Button.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Button.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string? fontFamily)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<string>(fontFamily);
            if (fontFamily != null) mauiObject.FontFamily = mauiValue;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string? fontFamily,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<string>(fontFamily);
            if (fontFamily != null) mauiObject.FontFamily = mauiValue;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Button.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double? fontSize)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<double>(fontSize);
            if (fontSize != null) mauiObject.FontSize = mauiValue;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double? fontSize,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<double>(fontSize);
            if (fontSize != null) mauiObject.FontSize = mauiValue;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Button.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool? fontAutoScalingEnabled)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<bool>(fontAutoScalingEnabled);
            if (fontAutoScalingEnabled != null) mauiObject.FontAutoScalingEnabled = mauiValue;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool? fontAutoScalingEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<bool>(fontAutoScalingEnabled);
            if (fontAutoScalingEnabled != null) mauiObject.FontAutoScalingEnabled = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform? textTransform)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextTransform>(textTransform);
            if (textTransform != null) mauiObject.TextTransform = mauiValue;
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform? textTransform,
            System.Func<BindableDef<Microsoft.Maui.TextTransform>, BindableDef<Microsoft.Maui.TextTransform>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextTransform>(textTransform);
            if (textTransform != null) mauiObject.TextTransform = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.Button.TextTransformProperty));
            if (def.ValueIsSet()) mauiObject.TextTransform = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.TextTransform>, BindableDef<Microsoft.Maui.TextTransform>> definition)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.Button.TextTransformProperty));
            if (def.ValueIsSet()) mauiObject.TextTransform = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Clicked += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Pressed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Button>(obj);
            mauiObject.Released += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
