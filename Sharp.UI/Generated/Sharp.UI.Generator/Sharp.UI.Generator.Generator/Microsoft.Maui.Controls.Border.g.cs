//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class BorderGeneratedExtension
    {
        public static T Content<T>(this T obj,
            Microsoft.Maui.Controls.View? content)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.Content = (Microsoft.Maui.Controls.View?)content;
            return obj;
        }
        
        public static T Content<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.View?>, ValueBuilder<Microsoft.Maui.Controls.View?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.View?>());
            if (builder.ValueIsSet()) mauiObject.Content = builder.GetValue();
            return obj;
        }
        
        public static T Content<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.View?>, LazyValueBuilder<Microsoft.Maui.Controls.View?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.View?>());
            if (builder.ValueIsSet()) mauiObject.Content = builder.GetValue();
            return obj;
        }
        
        public static T Content<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.View?>, BindingBuilder<Microsoft.Maui.Controls.View?>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.View?>(mauiObject, Microsoft.Maui.Controls.Border.ContentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.Padding = (Microsoft.Maui.Thickness)padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Thickness>, LazyValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Border.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeShape<T>(this T obj,
            Microsoft.Maui.Graphics.IShape? strokeShape)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.StrokeShape = (Microsoft.Maui.Graphics.IShape?)strokeShape;
            return obj;
        }
        
        public static T StrokeShape<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.IShape?>, ValueBuilder<Microsoft.Maui.Graphics.IShape?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.IShape?>());
            if (builder.ValueIsSet()) mauiObject.StrokeShape = builder.GetValue();
            return obj;
        }
        
        public static T StrokeShape<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.IShape?>, LazyValueBuilder<Microsoft.Maui.Graphics.IShape?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.IShape?>());
            if (builder.ValueIsSet()) mauiObject.StrokeShape = builder.GetValue();
            return obj;
        }
        
        public static T StrokeShape<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.IShape?>, BindingBuilder<Microsoft.Maui.Graphics.IShape?>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.IShape?>(mauiObject, Microsoft.Maui.Controls.Border.StrokeShapeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Stroke<T>(this T obj,
            Microsoft.Maui.Controls.Brush? stroke)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.Stroke = (Microsoft.Maui.Controls.Brush?)stroke;
            return obj;
        }
        
        public static T Stroke<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Brush?>, ValueBuilder<Microsoft.Maui.Controls.Brush?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Brush?>());
            if (builder.ValueIsSet()) mauiObject.Stroke = builder.GetValue();
            return obj;
        }
        
        public static T Stroke<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Brush?>, LazyValueBuilder<Microsoft.Maui.Controls.Brush?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Brush?>());
            if (builder.ValueIsSet()) mauiObject.Stroke = builder.GetValue();
            return obj;
        }
        
        public static T Stroke<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Brush?>, BindingBuilder<Microsoft.Maui.Controls.Brush?>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Brush?>(mauiObject, Microsoft.Maui.Controls.Border.StrokeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeThickness<T>(this T obj,
            double strokeThickness)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.StrokeThickness = (double)strokeThickness;
            return obj;
        }
        
        public static T StrokeThickness<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeThickness = builder.GetValue();
            return obj;
        }
        
        public static T StrokeThickness<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeThickness = builder.GetValue();
            return obj;
        }
        
        public static T StrokeThickness<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Border.StrokeThicknessProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeDashArray<T>(this T obj,
            Microsoft.Maui.Controls.DoubleCollection? strokeDashArray)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.StrokeDashArray = (Microsoft.Maui.Controls.DoubleCollection?)strokeDashArray;
            return obj;
        }
        
        public static T StrokeDashArray<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DoubleCollection?>, ValueBuilder<Microsoft.Maui.Controls.DoubleCollection?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DoubleCollection?>());
            if (builder.ValueIsSet()) mauiObject.StrokeDashArray = builder.GetValue();
            return obj;
        }
        
        public static T StrokeDashArray<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DoubleCollection?>, LazyValueBuilder<Microsoft.Maui.Controls.DoubleCollection?>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DoubleCollection?>());
            if (builder.ValueIsSet()) mauiObject.StrokeDashArray = builder.GetValue();
            return obj;
        }
        
        public static T StrokeDashArray<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DoubleCollection?>, BindingBuilder<Microsoft.Maui.Controls.DoubleCollection?>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DoubleCollection?>(mauiObject, Microsoft.Maui.Controls.Border.StrokeDashArrayProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeDashOffset<T>(this T obj,
            double strokeDashOffset)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.StrokeDashOffset = (double)strokeDashOffset;
            return obj;
        }
        
        public static T StrokeDashOffset<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeDashOffset = builder.GetValue();
            return obj;
        }
        
        public static T StrokeDashOffset<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeDashOffset = builder.GetValue();
            return obj;
        }
        
        public static T StrokeDashOffset<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Border.StrokeDashOffsetProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeLineCap<T>(this T obj,
            Microsoft.Maui.Controls.Shapes.PenLineCap strokeLineCap)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.StrokeLineCap = (Microsoft.Maui.Controls.Shapes.PenLineCap)strokeLineCap;
            return obj;
        }
        
        public static T StrokeLineCap<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>, ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>());
            if (builder.ValueIsSet()) mauiObject.StrokeLineCap = builder.GetValue();
            return obj;
        }
        
        public static T StrokeLineCap<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>, LazyValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>());
            if (builder.ValueIsSet()) mauiObject.StrokeLineCap = builder.GetValue();
            return obj;
        }
        
        public static T StrokeLineCap<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>, BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineCap>(mauiObject, Microsoft.Maui.Controls.Border.StrokeLineCapProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeLineJoin<T>(this T obj,
            Microsoft.Maui.Controls.Shapes.PenLineJoin strokeLineJoin)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.StrokeLineJoin = (Microsoft.Maui.Controls.Shapes.PenLineJoin)strokeLineJoin;
            return obj;
        }
        
        public static T StrokeLineJoin<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>, ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>());
            if (builder.ValueIsSet()) mauiObject.StrokeLineJoin = builder.GetValue();
            return obj;
        }
        
        public static T StrokeLineJoin<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>, LazyValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>());
            if (builder.ValueIsSet()) mauiObject.StrokeLineJoin = builder.GetValue();
            return obj;
        }
        
        public static T StrokeLineJoin<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>, BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.Shapes.PenLineJoin>(mauiObject, Microsoft.Maui.Controls.Border.StrokeLineJoinProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T StrokeMiterLimit<T>(this T obj,
            double strokeMiterLimit)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            mauiObject.StrokeMiterLimit = (double)strokeMiterLimit;
            return obj;
        }
        
        public static T StrokeMiterLimit<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeMiterLimit = builder.GetValue();
            return obj;
        }
        
        public static T StrokeMiterLimit<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.StrokeMiterLimit = builder.GetValue();
            return obj;
        }
        
        public static T StrokeMiterLimit<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IBorder
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Border>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Border.StrokeMiterLimitProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
