//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class PointerGestureRecognizerGeneratedExtension
    {
        public static T PointerEnteredCommand<T>(this T obj,
            System.Windows.Input.ICommand? pointerEnteredCommand)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerEnteredCommand);
            if (pointerEnteredCommand != null) mauiObject.PointerEnteredCommand = mauiValue;
            return obj;
        }
        
        public static T PointerEnteredCommand<T>(this T obj,
            System.Windows.Input.ICommand? pointerEnteredCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerEnteredCommand);
            if (pointerEnteredCommand != null) mauiObject.PointerEnteredCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandProperty));
            if (def.ValueIsSet()) mauiObject.PointerEnteredCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerEnteredCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandProperty));
            if (def.ValueIsSet()) mauiObject.PointerEnteredCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerEnteredCommandParameter<T>(this T obj,
            System.Windows.Input.ICommand? pointerEnteredCommandParameter)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerEnteredCommandParameter);
            if (pointerEnteredCommandParameter != null) mauiObject.PointerEnteredCommandParameter = mauiValue;
            return obj;
        }
        
        public static T PointerEnteredCommandParameter<T>(this T obj,
            System.Windows.Input.ICommand? pointerEnteredCommandParameter,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerEnteredCommandParameter);
            if (pointerEnteredCommandParameter != null) mauiObject.PointerEnteredCommandParameter = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PointerEnteredCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerEnteredCommandParameter<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PointerEnteredCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerExitedCommand<T>(this T obj,
            System.Windows.Input.ICommand? pointerExitedCommand)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerExitedCommand);
            if (pointerExitedCommand != null) mauiObject.PointerExitedCommand = mauiValue;
            return obj;
        }
        
        public static T PointerExitedCommand<T>(this T obj,
            System.Windows.Input.ICommand? pointerExitedCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerExitedCommand);
            if (pointerExitedCommand != null) mauiObject.PointerExitedCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandProperty));
            if (def.ValueIsSet()) mauiObject.PointerExitedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerExitedCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandProperty));
            if (def.ValueIsSet()) mauiObject.PointerExitedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerExitedCommandParameter<T>(this T obj,
            System.Windows.Input.ICommand? pointerExitedCommandParameter)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerExitedCommandParameter);
            if (pointerExitedCommandParameter != null) mauiObject.PointerExitedCommandParameter = mauiValue;
            return obj;
        }
        
        public static T PointerExitedCommandParameter<T>(this T obj,
            System.Windows.Input.ICommand? pointerExitedCommandParameter,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerExitedCommandParameter);
            if (pointerExitedCommandParameter != null) mauiObject.PointerExitedCommandParameter = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PointerExitedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerExitedCommandParameter<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PointerExitedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerMovedCommand<T>(this T obj,
            System.Windows.Input.ICommand? pointerMovedCommand)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerMovedCommand);
            if (pointerMovedCommand != null) mauiObject.PointerMovedCommand = mauiValue;
            return obj;
        }
        
        public static T PointerMovedCommand<T>(this T obj,
            System.Windows.Input.ICommand? pointerMovedCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerMovedCommand);
            if (pointerMovedCommand != null) mauiObject.PointerMovedCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandProperty));
            if (def.ValueIsSet()) mauiObject.PointerMovedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerMovedCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandProperty));
            if (def.ValueIsSet()) mauiObject.PointerMovedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerMovedCommandParameter<T>(this T obj,
            System.Windows.Input.ICommand? pointerMovedCommandParameter)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerMovedCommandParameter);
            if (pointerMovedCommandParameter != null) mauiObject.PointerMovedCommandParameter = mauiValue;
            return obj;
        }
        
        public static T PointerMovedCommandParameter<T>(this T obj,
            System.Windows.Input.ICommand? pointerMovedCommandParameter,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(pointerMovedCommandParameter);
            if (pointerMovedCommandParameter != null) mauiObject.PointerMovedCommandParameter = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PointerMovedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PointerMovedCommandParameter<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IPointerGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.PointerMovedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnPointerEntered<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.PointerEventArgs> action)
            where T : Sharp.UI.IPointerGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            mauiObject.PointerEntered += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnPointerExited<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.PointerEventArgs> action)
            where T : Sharp.UI.IPointerGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            mauiObject.PointerExited += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnPointerMoved<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.PointerEventArgs> action)
            where T : Sharp.UI.IPointerGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.PointerGestureRecognizer>(obj);
            mauiObject.PointerMoved += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
