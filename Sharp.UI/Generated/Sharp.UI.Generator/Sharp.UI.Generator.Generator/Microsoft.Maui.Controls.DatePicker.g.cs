//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class DatePickerGeneratedExtension
    {
        public static T Date<T>(this T obj,
            System.DateTime? date)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (date != null) mauiObject.Date = (System.DateTime)date;
            return obj;
        }
        
        public static T Date<T>(this T obj,
            System.DateTime? date,
            System.Func<BindableDef<System.DateTime>, BindableDef<System.DateTime>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (date != null) mauiObject.Date = (System.DateTime)date;
            var def = definition(new BindableDef<System.DateTime>(mauiObject, Microsoft.Maui.Controls.DatePicker.DateProperty));
            if (def.ValueIsSet()) mauiObject.Date = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Date<T>(this T obj,
            System.Func<BindableDef<System.DateTime>, BindableDef<System.DateTime>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<System.DateTime>(mauiObject, Microsoft.Maui.Controls.DatePicker.DateProperty));
            if (def.ValueIsSet()) mauiObject.Date = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Format<T>(this T obj,
            string? format)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (format != null) mauiObject.Format = (string)format;
            return obj;
        }
        
        public static T Format<T>(this T obj,
            string? format,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (format != null) mauiObject.Format = (string)format;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.DatePicker.FormatProperty));
            if (def.ValueIsSet()) mauiObject.Format = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Format<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.DatePicker.FormatProperty));
            if (def.ValueIsSet()) mauiObject.Format = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MaximumDate<T>(this T obj,
            System.DateTime? maximumDate)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (maximumDate != null) mauiObject.MaximumDate = (System.DateTime)maximumDate;
            return obj;
        }
        
        public static T MaximumDate<T>(this T obj,
            System.DateTime? maximumDate,
            System.Func<BindableDef<System.DateTime>, BindableDef<System.DateTime>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (maximumDate != null) mauiObject.MaximumDate = (System.DateTime)maximumDate;
            var def = definition(new BindableDef<System.DateTime>(mauiObject, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty));
            if (def.ValueIsSet()) mauiObject.MaximumDate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MaximumDate<T>(this T obj,
            System.Func<BindableDef<System.DateTime>, BindableDef<System.DateTime>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<System.DateTime>(mauiObject, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty));
            if (def.ValueIsSet()) mauiObject.MaximumDate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MinimumDate<T>(this T obj,
            System.DateTime? minimumDate)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (minimumDate != null) mauiObject.MinimumDate = (System.DateTime)minimumDate;
            return obj;
        }
        
        public static T MinimumDate<T>(this T obj,
            System.DateTime? minimumDate,
            System.Func<BindableDef<System.DateTime>, BindableDef<System.DateTime>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (minimumDate != null) mauiObject.MinimumDate = (System.DateTime)minimumDate;
            var def = definition(new BindableDef<System.DateTime>(mauiObject, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty));
            if (def.ValueIsSet()) mauiObject.MinimumDate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MinimumDate<T>(this T obj,
            System.Func<BindableDef<System.DateTime>, BindableDef<System.DateTime>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<System.DateTime>(mauiObject, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty));
            if (def.ValueIsSet()) mauiObject.MinimumDate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? textColor)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (textColor != null) mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? textColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (textColor != null) mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.DatePicker.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.DatePicker.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double? characterSpacing)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (characterSpacing != null) mauiObject.CharacterSpacing = (double)characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double? characterSpacing,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (characterSpacing != null) mauiObject.CharacterSpacing = (double)characterSpacing;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes? fontAttributes)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontAttributes != null) mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes? fontAttributes,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontAttributes != null) mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string? fontFamily)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontFamily != null) mauiObject.FontFamily = (string)fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string? fontFamily,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontFamily != null) mauiObject.FontFamily = (string)fontFamily;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double? fontSize)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontSize != null) mauiObject.FontSize = (double)fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double? fontSize,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontSize != null) mauiObject.FontSize = (double)fontSize;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool? fontAutoScalingEnabled)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontAutoScalingEnabled != null) mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool? fontAutoScalingEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            if (fontAutoScalingEnabled != null) mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDatePicker
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnDateSelected<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.DateChangedEventArgs> action)
            where T : Sharp.UI.IDatePicker
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.DatePicker>(obj);
            mauiObject.DateSelected += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
