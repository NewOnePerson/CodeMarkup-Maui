//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class InputViewGeneratedExtension
    {
        public static T MaxLength<T>(this T obj,
            int? maxLength)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<int>(maxLength);
            if (maxLength != null) mauiObject.MaxLength = mauiValue;
            return obj;
        }
        
        public static T MaxLength<T>(this T obj,
            int? maxLength,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<int>(maxLength);
            if (maxLength != null) mauiObject.MaxLength = mauiValue;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.InputView.MaxLengthProperty));
            if (def.ValueIsSet()) mauiObject.MaxLength = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T MaxLength<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.InputView.MaxLengthProperty));
            if (def.ValueIsSet()) mauiObject.MaxLength = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string? text)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<string>(text);
            if (text != null) mauiObject.Text = mauiValue;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string? text,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<string>(text);
            if (text != null) mauiObject.Text = mauiValue;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.InputView.TextProperty));
            if (def.ValueIsSet()) mauiObject.Text = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.InputView.TextProperty));
            if (def.ValueIsSet()) mauiObject.Text = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            Microsoft.Maui.Keyboard? keyboard)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Keyboard>(keyboard);
            if (keyboard != null) mauiObject.Keyboard = mauiValue;
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            Microsoft.Maui.Keyboard? keyboard,
            System.Func<BindableDef<Microsoft.Maui.Keyboard>, BindableDef<Microsoft.Maui.Keyboard>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Keyboard>(keyboard);
            if (keyboard != null) mauiObject.Keyboard = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Keyboard>(mauiObject, Microsoft.Maui.Controls.InputView.KeyboardProperty));
            if (def.ValueIsSet()) mauiObject.Keyboard = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Keyboard<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Keyboard>, BindableDef<Microsoft.Maui.Keyboard>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Keyboard>(mauiObject, Microsoft.Maui.Controls.InputView.KeyboardProperty));
            if (def.ValueIsSet()) mauiObject.Keyboard = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsSpellCheckEnabled<T>(this T obj,
            bool? isSpellCheckEnabled)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isSpellCheckEnabled);
            if (isSpellCheckEnabled != null) mauiObject.IsSpellCheckEnabled = mauiValue;
            return obj;
        }
        
        public static T IsSpellCheckEnabled<T>(this T obj,
            bool? isSpellCheckEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isSpellCheckEnabled);
            if (isSpellCheckEnabled != null) mauiObject.IsSpellCheckEnabled = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsSpellCheckEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsSpellCheckEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsSpellCheckEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsReadOnly<T>(this T obj,
            bool? isReadOnly)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isReadOnly);
            if (isReadOnly != null) mauiObject.IsReadOnly = mauiValue;
            return obj;
        }
        
        public static T IsReadOnly<T>(this T obj,
            bool? isReadOnly,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isReadOnly);
            if (isReadOnly != null) mauiObject.IsReadOnly = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.InputView.IsReadOnlyProperty));
            if (def.ValueIsSet()) mauiObject.IsReadOnly = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsReadOnly<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.InputView.IsReadOnlyProperty));
            if (def.ValueIsSet()) mauiObject.IsReadOnly = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            string? placeholder)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<string>(placeholder);
            if (placeholder != null) mauiObject.Placeholder = mauiValue;
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            string? placeholder,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<string>(placeholder);
            if (placeholder != null) mauiObject.Placeholder = mauiValue;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.InputView.PlaceholderProperty));
            if (def.ValueIsSet()) mauiObject.Placeholder = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Placeholder<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.InputView.PlaceholderProperty));
            if (def.ValueIsSet()) mauiObject.Placeholder = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PlaceholderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? placeholderColor)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(placeholderColor);
            if (placeholderColor != null) mauiObject.PlaceholderColor = mauiValue;
            return obj;
        }
        
        public static T PlaceholderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? placeholderColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(placeholderColor);
            if (placeholderColor != null) mauiObject.PlaceholderColor = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.InputView.PlaceholderColorProperty));
            if (def.ValueIsSet()) mauiObject.PlaceholderColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T PlaceholderColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.InputView.PlaceholderColorProperty));
            if (def.ValueIsSet()) mauiObject.PlaceholderColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? textColor)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(textColor);
            if (textColor != null) mauiObject.TextColor = mauiValue;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? textColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(textColor);
            if (textColor != null) mauiObject.TextColor = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.InputView.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.InputView.TextColorProperty));
            if (def.ValueIsSet()) mauiObject.TextColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double? characterSpacing)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<double>(characterSpacing);
            if (characterSpacing != null) mauiObject.CharacterSpacing = mauiValue;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double? characterSpacing,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<double>(characterSpacing);
            if (characterSpacing != null) mauiObject.CharacterSpacing = mauiValue;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.InputView.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.InputView.CharacterSpacingProperty));
            if (def.ValueIsSet()) mauiObject.CharacterSpacing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform? textTransform)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextTransform>(textTransform);
            if (textTransform != null) mauiObject.TextTransform = mauiValue;
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform? textTransform,
            System.Func<BindableDef<Microsoft.Maui.TextTransform>, BindableDef<Microsoft.Maui.TextTransform>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextTransform>(textTransform);
            if (textTransform != null) mauiObject.TextTransform = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.InputView.TextTransformProperty));
            if (def.ValueIsSet()) mauiObject.TextTransform = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.TextTransform>, BindableDef<Microsoft.Maui.TextTransform>> definition)
            where T : Sharp.UI.IInputView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.InputView.TextTransformProperty));
            if (def.ValueIsSet()) mauiObject.TextTransform = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnTextChanged<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.TextChangedEventArgs> action)
            where T : Sharp.UI.IInputView
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.InputView>(obj);
            mauiObject.TextChanged += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
