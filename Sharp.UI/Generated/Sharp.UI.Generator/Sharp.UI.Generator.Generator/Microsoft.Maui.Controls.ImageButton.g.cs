//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ImageButtonGeneratedExtension
    {
        public static T BorderColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color borderColor)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.BorderColor = (Microsoft.Maui.Graphics.Color)borderColor;
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.BorderColor = builder.GetValue();
            return obj;
        }
        
        public static T BorderColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.ImageButton.BorderColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            int cornerRadius)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.CornerRadius = (int)cornerRadius;
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.CornerRadius = builder.GetValue();
            return obj;
        }
        
        public static T CornerRadius<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.ImageButton.CornerRadiusProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            double borderWidth)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.BorderWidth = (double)borderWidth;
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.BorderWidth = builder.GetValue();
            return obj;
        }
        
        public static T BorderWidth<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.ImageButton.BorderWidthProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            Microsoft.Maui.Aspect aspect)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Aspect = (Microsoft.Maui.Aspect)aspect;
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Aspect>, ValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) mauiObject.Aspect = builder.GetValue();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Aspect>, LazyValueBuilder<Microsoft.Maui.Aspect>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Aspect>());
            if (builder.ValueIsSet()) mauiObject.Aspect = builder.GetValue();
            return obj;
        }
        
        public static T Aspect<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Aspect>, BindingBuilder<Microsoft.Maui.Aspect>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Aspect>(mauiObject, Microsoft.Maui.Controls.ImageButton.AspectProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            bool isOpaque)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.IsOpaque = (bool)isOpaque;
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsOpaque = builder.GetValue();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsOpaque = builder.GetValue();
            return obj;
        }
        
        public static T IsOpaque<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.ImageButton.IsOpaqueProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand command)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Command = (System.Windows.Input.ICommand)command;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.Command = builder.GetValue();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.ImageButton.CommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object commandParameter)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.CommandParameter = (object)commandParameter;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.CommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.ImageButton.CommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            Microsoft.Maui.Controls.ImageSource source)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Source = (Microsoft.Maui.Controls.ImageSource)source;
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ImageSource>, ValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.Source = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>, LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ImageSource>());
            if (builder.ValueIsSet()) mauiObject.Source = builder.GetValue();
            return obj;
        }
        
        public static T Source<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ImageSource>, BindingBuilder<Microsoft.Maui.Controls.ImageSource>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ImageSource>(mauiObject, Microsoft.Maui.Controls.ImageButton.SourceProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Padding = (Microsoft.Maui.Thickness)padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Thickness>, LazyValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.ImageButton.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Clicked += handler;
            return obj;
        }
        
        public static T OnClicked<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Clicked += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Pressed += handler;
            return obj;
        }
        
        public static T OnPressed<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Pressed += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Released += handler;
            return obj;
        }
        
        public static T OnReleased<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IImageButton
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ImageButton>(obj);
            mauiObject.Released += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
