//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ViewGeneratedExtension
    {
        public static T GestureRecognizers<T>(this T obj,
            System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer> gestureRecognizers)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            foreach (var item in gestureRecognizers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.IGestureRecognizer>(item);
                mauiObject.GestureRecognizers.Add(mauiItem);
            }
            return obj;
        }

        public static T GestureRecognizers<T>(this T obj,
            params Microsoft.Maui.Controls.IGestureRecognizer[] gestureRecognizers)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            foreach (var item in gestureRecognizers)
            {
                var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.IGestureRecognizer>(item);
                mauiObject.GestureRecognizers.Add(mauiItem);
            }
            return obj;
        }

        public static T GestureRecognizers<T>(this T obj,
            System.Func<Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer>>, Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer>>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new Def<System.Collections.Generic.IList<Microsoft.Maui.Controls.IGestureRecognizer>>());
            if (def.ValueIsSet())
            {
                var items = def.GetValue();
                foreach (var item in items) 
                {
                    var mauiItem = MauiWrapper.Value<Microsoft.Maui.Controls.IGestureRecognizer>(item);
                    mauiObject.GestureRecognizers.Add(mauiItem);
                }
            }
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? horizontalOptions)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.LayoutOptions>(horizontalOptions);
            if (horizontalOptions != null) mauiObject.HorizontalOptions = mauiValue;
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? horizontalOptions,
            System.Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.LayoutOptions>(horizontalOptions);
            if (horizontalOptions != null) mauiObject.HorizontalOptions = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.HorizontalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalOptions<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.HorizontalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            Microsoft.Maui.Thickness? margin)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Thickness>(margin);
            if (margin != null) mauiObject.Margin = mauiValue;
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            Microsoft.Maui.Thickness? margin,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Thickness>(margin);
            if (margin != null) mauiObject.Margin = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.View.MarginProperty));
            if (def.ValueIsSet()) mauiObject.Margin = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Margin<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Thickness>, BindableDef<Microsoft.Maui.Thickness>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.View.MarginProperty));
            if (def.ValueIsSet()) mauiObject.Margin = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? verticalOptions)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.LayoutOptions>(verticalOptions);
            if (verticalOptions != null) mauiObject.VerticalOptions = mauiValue;
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            Microsoft.Maui.Controls.LayoutOptions? verticalOptions,
            System.Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.LayoutOptions>(verticalOptions);
            if (verticalOptions != null) mauiObject.VerticalOptions = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.VerticalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.VerticalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalOptions<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.LayoutOptions>, BindableDef<Microsoft.Maui.Controls.LayoutOptions>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.LayoutOptions>(mauiObject, Microsoft.Maui.Controls.View.VerticalOptionsProperty));
            if (def.ValueIsSet()) mauiObject.VerticalOptions = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Column<T>(this T obj,
            int? column)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(column);
            if (column != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnProperty, mauiValue);
            return obj;
        }
        
        public static T Column<T>(this T obj,
            int? column,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(column);
            if (column != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnProperty, mauiValue);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.ColumnProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T Column<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.ColumnProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T Row<T>(this T obj,
            int? row)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(row);
            if (row != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowProperty, mauiValue);
            return obj;
        }
        
        public static T Row<T>(this T obj,
            int? row,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(row);
            if (row != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowProperty, mauiValue);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.RowProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T Row<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.RowProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T ColumnSpan<T>(this T obj,
            int? columnSpan)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(columnSpan);
            if (columnSpan != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnSpanProperty, mauiValue);
            return obj;
        }
        
        public static T ColumnSpan<T>(this T obj,
            int? columnSpan,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(columnSpan);
            if (columnSpan != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnSpanProperty, mauiValue);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.ColumnSpanProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnSpanProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T ColumnSpan<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.ColumnSpanProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.ColumnSpanProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T RowSpan<T>(this T obj,
            int? rowSpan)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(rowSpan);
            if (rowSpan != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowSpanProperty, mauiValue);
            return obj;
        }
        
        public static T RowSpan<T>(this T obj,
            int? rowSpan,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var mauiValue = MauiWrapper.Value<int>(rowSpan);
            if (rowSpan != null) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowSpanProperty, mauiValue);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.RowSpanProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowSpanProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T RowSpan<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.View>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Grid.RowSpanProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.Grid.RowSpanProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
