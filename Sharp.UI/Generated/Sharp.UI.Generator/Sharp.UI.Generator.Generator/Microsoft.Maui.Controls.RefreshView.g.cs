//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class RefreshViewGeneratedExtension
    {
        public static T IsRefreshing<T>(this T obj,
            bool? isRefreshing)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isRefreshing);
            if (isRefreshing != null) mauiObject.IsRefreshing = mauiValue;
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            bool? isRefreshing,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isRefreshing);
            if (isRefreshing != null) mauiObject.IsRefreshing = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.RefreshView.IsRefreshingProperty));
            if (def.ValueIsSet()) mauiObject.IsRefreshing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.RefreshView.IsRefreshingProperty));
            if (def.ValueIsSet()) mauiObject.IsRefreshing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand? command)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(command);
            if (command != null) mauiObject.Command = mauiValue;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand? command,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(command);
            if (command != null) mauiObject.Command = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.RefreshView.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.RefreshView.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object? commandParameter)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<object>(commandParameter);
            if (commandParameter != null) mauiObject.CommandParameter = mauiValue;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object? commandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<object>(commandParameter);
            if (commandParameter != null) mauiObject.CommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.RefreshView.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.RefreshView.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RefreshColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? refreshColor)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(refreshColor);
            if (refreshColor != null) mauiObject.RefreshColor = mauiValue;
            return obj;
        }
        
        public static T RefreshColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? refreshColor,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Graphics.Color>(refreshColor);
            if (refreshColor != null) mauiObject.RefreshColor = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.RefreshView.RefreshColorProperty));
            if (def.ValueIsSet()) mauiObject.RefreshColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RefreshColor<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.RefreshView.RefreshColorProperty));
            if (def.ValueIsSet()) mauiObject.RefreshColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnRefreshing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IRefreshView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.RefreshView>(obj);
            mauiObject.Refreshing += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
