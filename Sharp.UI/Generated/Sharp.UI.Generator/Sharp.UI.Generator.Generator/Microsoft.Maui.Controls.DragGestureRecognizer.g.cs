//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class DragGestureRecognizerGeneratedExtension
    {
        public static T CanDrag<T>(this T obj,
            bool? canDrag)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<bool>(canDrag);
            if (canDrag != null) mauiObject.CanDrag = mauiValue;
            return obj;
        }
        
        public static T CanDrag<T>(this T obj,
            bool? canDrag,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<bool>(canDrag);
            if (canDrag != null) mauiObject.CanDrag = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.CanDragProperty));
            if (def.ValueIsSet()) mauiObject.CanDrag = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CanDrag<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.CanDragProperty));
            if (def.ValueIsSet()) mauiObject.CanDrag = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCompletedCommand<T>(this T obj,
            System.Windows.Input.ICommand? dropCompletedCommand)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dropCompletedCommand);
            if (dropCompletedCommand != null) mauiObject.DropCompletedCommand = mauiValue;
            return obj;
        }
        
        public static T DropCompletedCommand<T>(this T obj,
            System.Windows.Input.ICommand? dropCompletedCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dropCompletedCommand);
            if (dropCompletedCommand != null) mauiObject.DropCompletedCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DropCompletedCommandProperty));
            if (def.ValueIsSet()) mauiObject.DropCompletedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCompletedCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DropCompletedCommandProperty));
            if (def.ValueIsSet()) mauiObject.DropCompletedCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCompletedCommandParameter<T>(this T obj,
            object? dropCompletedCommandParameter)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dropCompletedCommandParameter);
            if (dropCompletedCommandParameter != null) mauiObject.DropCompletedCommandParameter = mauiValue;
            return obj;
        }
        
        public static T DropCompletedCommandParameter<T>(this T obj,
            object? dropCompletedCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dropCompletedCommandParameter);
            if (dropCompletedCommandParameter != null) mauiObject.DropCompletedCommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DropCompletedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DropCompletedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCompletedCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DropCompletedCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DropCompletedCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragStartingCommand<T>(this T obj,
            System.Windows.Input.ICommand? dragStartingCommand)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dragStartingCommand);
            if (dragStartingCommand != null) mauiObject.DragStartingCommand = mauiValue;
            return obj;
        }
        
        public static T DragStartingCommand<T>(this T obj,
            System.Windows.Input.ICommand? dragStartingCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dragStartingCommand);
            if (dragStartingCommand != null) mauiObject.DragStartingCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DragStartingCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragStartingCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragStartingCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DragStartingCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragStartingCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragStartingCommandParameter<T>(this T obj,
            object? dragStartingCommandParameter)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dragStartingCommandParameter);
            if (dragStartingCommandParameter != null) mauiObject.DragStartingCommandParameter = mauiValue;
            return obj;
        }
        
        public static T DragStartingCommandParameter<T>(this T obj,
            object? dragStartingCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dragStartingCommandParameter);
            if (dragStartingCommandParameter != null) mauiObject.DragStartingCommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DragStartingCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragStartingCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragStartingCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDragGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DragGestureRecognizer.DragStartingCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragStartingCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnDropCompleted<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.DropCompletedEventArgs> action)
            where T : Sharp.UI.IDragGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            mauiObject.DropCompleted += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnDragStarting<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.DragStartingEventArgs> action)
            where T : Sharp.UI.IDragGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DragGestureRecognizer>(obj);
            mauiObject.DragStarting += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
