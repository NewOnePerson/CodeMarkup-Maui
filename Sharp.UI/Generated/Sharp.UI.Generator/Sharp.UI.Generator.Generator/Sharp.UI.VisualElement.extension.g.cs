//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class VisualElementGeneratedSharpObjectExtension
    {
        public static T VisualStateGroups<T>(this T obj,
            Microsoft.Maui.Controls.VisualStateGroupList visualStateGroups)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, (Microsoft.Maui.Controls.VisualStateGroupList)visualStateGroups);
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>, ValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, builder.GetValue());
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>, LazyValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.VisualStateGroupList>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, builder.GetValue());
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.VisualStateGroupList>, BindingBuilder<Microsoft.Maui.Controls.VisualStateGroupList>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.VisualStateGroupList>(mauiObject, Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T obj,
            bool? excludedWithChildren)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, (bool?)excludedWithChildren);
            return obj;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T obj,
            System.Func<ValueBuilder<bool?>, ValueBuilder<bool?>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<bool?>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T obj,
            System.Func<LazyValueBuilder<bool?>, LazyValueBuilder<bool?>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<bool?>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T obj,
            System.Func<BindingBuilder<bool?>, BindingBuilder<bool?>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<bool?>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T obj,
            bool? isInAccessibleTree)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, (bool?)isInAccessibleTree);
            return obj;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T obj,
            System.Func<ValueBuilder<bool?>, ValueBuilder<bool?>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<bool?>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T obj,
            System.Func<LazyValueBuilder<bool?>, LazyValueBuilder<bool?>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<bool?>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T obj,
            System.Func<BindingBuilder<bool?>, BindingBuilder<bool?>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<bool?>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AutomationName<T>(this T obj,
            string name)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty, (string)name);
            return obj;
        }
        
        public static T AutomationName<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationName<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationName<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.NameProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AutomationHelpText<T>(this T obj,
            string helpText)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, (string)helpText);
            return obj;
        }
        
        public static T AutomationHelpText<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationHelpText<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationHelpText<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T AutomationLabeledBy<T>(this T obj,
            Microsoft.Maui.Controls.VisualElement labeledBy)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, (Microsoft.Maui.Controls.VisualElement)labeledBy);
            return obj;
        }
        
        public static T AutomationLabeledBy<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.VisualElement>, ValueBuilder<Microsoft.Maui.Controls.VisualElement>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.VisualElement>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationLabeledBy<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.VisualElement>, LazyValueBuilder<Microsoft.Maui.Controls.VisualElement>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.VisualElement>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, builder.GetValue());
            return obj;
        }
        
        public static T AutomationLabeledBy<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.VisualElement>, BindingBuilder<Microsoft.Maui.Controls.VisualElement>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.VisualElement>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SemanticHint<T>(this T obj,
            string hint)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty, (string)hint);
            return obj;
        }
        
        public static T SemanticHint<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty, builder.GetValue());
            return obj;
        }
        
        public static T SemanticHint<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty, builder.GetValue());
            return obj;
        }
        
        public static T SemanticHint<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.HintProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SemanticDescription<T>(this T obj,
            string description)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, (string)description);
            return obj;
        }
        
        public static T SemanticDescription<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, builder.GetValue());
            return obj;
        }
        
        public static T SemanticDescription<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, builder.GetValue());
            return obj;
        }
        
        public static T SemanticDescription<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SemanticHeadingLevel<T>(this T obj,
            Microsoft.Maui.SemanticHeadingLevel headingLevel)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, (Microsoft.Maui.SemanticHeadingLevel)headingLevel);
            return obj;
        }
        
        public static T SemanticHeadingLevel<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.SemanticHeadingLevel>, ValueBuilder<Microsoft.Maui.SemanticHeadingLevel>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.SemanticHeadingLevel>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, builder.GetValue());
            return obj;
        }
        
        public static T SemanticHeadingLevel<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.SemanticHeadingLevel>, LazyValueBuilder<Microsoft.Maui.SemanticHeadingLevel>> buildValue)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.SemanticHeadingLevel>());
            if (builder.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, builder.GetValue());
            return obj;
        }
        
        public static T SemanticHeadingLevel<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.SemanticHeadingLevel>, BindingBuilder<Microsoft.Maui.SemanticHeadingLevel>> buildBinding)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.SemanticHeadingLevel>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
