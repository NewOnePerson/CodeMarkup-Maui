//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class VisualElementGeneratedSharpObjectExtension
    {
        public static T VisualStateGroups<T>(this T obj,
            Microsoft.Maui.Controls.VisualStateGroupList visualStateGroups)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, (Microsoft.Maui.Controls.VisualStateGroupList)visualStateGroups);
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            Microsoft.Maui.Controls.VisualStateGroupList visualStateGroups,
            System.Func<BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>, BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, (Microsoft.Maui.Controls.VisualStateGroupList)visualStateGroups);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>(mauiObject, Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T VisualStateGroups<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>, BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.VisualStateGroupList>(mauiObject, Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.VisualStateManager.VisualStateGroupsProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T obj,
            bool? excludedWithChildren)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, (bool?)excludedWithChildren);
            return obj;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T obj,
            bool? excludedWithChildren,
            System.Func<BindableDef<bool?>, BindableDef<bool?>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, (bool?)excludedWithChildren);
            var def = definition(new BindableDef<bool?>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationExcludedWithChildren<T>(this T obj,
            System.Func<BindableDef<bool?>, BindableDef<bool?>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<bool?>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.ExcludedWithChildrenProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T obj,
            bool? isInAccessibleTree)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, (bool?)isInAccessibleTree);
            return obj;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T obj,
            bool? isInAccessibleTree,
            System.Func<BindableDef<bool?>, BindableDef<bool?>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, (bool?)isInAccessibleTree);
            var def = definition(new BindableDef<bool?>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationIsInAccessibleTree<T>(this T obj,
            System.Func<BindableDef<bool?>, BindableDef<bool?>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<bool?>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.IsInAccessibleTreeProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationName<T>(this T obj,
            string name)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty, (string)name);
            return obj;
        }
        
        public static T AutomationName<T>(this T obj,
            string name,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty, (string)name);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.NameProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationName<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.NameProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.NameProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationHelpText<T>(this T obj,
            string helpText)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, (string)helpText);
            return obj;
        }
        
        public static T AutomationHelpText<T>(this T obj,
            string helpText,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, (string)helpText);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationHelpText<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.HelpTextProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationLabeledBy<T>(this T obj,
            Microsoft.Maui.Controls.VisualElement labeledBy)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, (Microsoft.Maui.Controls.VisualElement)labeledBy);
            return obj;
        }
        
        public static T AutomationLabeledBy<T>(this T obj,
            Microsoft.Maui.Controls.VisualElement labeledBy,
            System.Func<BindableDef<Microsoft.Maui.Controls.VisualElement>, BindableDef<Microsoft.Maui.Controls.VisualElement>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, (Microsoft.Maui.Controls.VisualElement)labeledBy);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.VisualElement>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T AutomationLabeledBy<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.VisualElement>, BindableDef<Microsoft.Maui.Controls.VisualElement>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.VisualElement>(mauiObject, Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T SemanticHint<T>(this T obj,
            string hint)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty, (string)hint);
            return obj;
        }
        
        public static T SemanticHint<T>(this T obj,
            string hint,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty, (string)hint);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.HintProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T SemanticHint<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.HintProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HintProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T SemanticDescription<T>(this T obj,
            string description)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, (string)description);
            return obj;
        }
        
        public static T SemanticDescription<T>(this T obj,
            string description,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, (string)description);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T SemanticDescription<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.DescriptionProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T SemanticHeadingLevel<T>(this T obj,
            Microsoft.Maui.SemanticHeadingLevel headingLevel)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, (Microsoft.Maui.SemanticHeadingLevel)headingLevel);
            return obj;
        }
        
        public static T SemanticHeadingLevel<T>(this T obj,
            Microsoft.Maui.SemanticHeadingLevel headingLevel,
            System.Func<BindableDef<Microsoft.Maui.SemanticHeadingLevel>, BindableDef<Microsoft.Maui.SemanticHeadingLevel>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);         
            mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, (Microsoft.Maui.SemanticHeadingLevel)headingLevel);
            var def = definition(new BindableDef<Microsoft.Maui.SemanticHeadingLevel>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
        public static T SemanticHeadingLevel<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.SemanticHeadingLevel>, BindableDef<Microsoft.Maui.SemanticHeadingLevel>> definition)
            where T : Sharp.UI.IVisualElement
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.VisualElement>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.SemanticHeadingLevel>(mauiObject, Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty));
            if (def.ValueIsSet()) mauiObject.SetValue(Microsoft.Maui.Controls.SemanticProperties.HeadingLevelProperty, def.GetValue());
            def.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
