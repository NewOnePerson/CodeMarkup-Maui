//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class EditorGeneratedExtension
    {
        public static T AutoSize<T>(this T obj,
            Microsoft.Maui.Controls.EditorAutoSizeOption? autoSize)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.EditorAutoSizeOption>(autoSize);
            if (autoSize != null) mauiObject.AutoSize = mauiValue;
            return obj;
        }
        
        public static T AutoSize<T>(this T obj,
            Microsoft.Maui.Controls.EditorAutoSizeOption? autoSize,
            System.Func<BindableDef<Microsoft.Maui.Controls.EditorAutoSizeOption>, BindableDef<Microsoft.Maui.Controls.EditorAutoSizeOption>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.EditorAutoSizeOption>(autoSize);
            if (autoSize != null) mauiObject.AutoSize = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.EditorAutoSizeOption>(mauiObject, Microsoft.Maui.Controls.Editor.AutoSizeProperty));
            if (def.ValueIsSet()) mauiObject.AutoSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AutoSize<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.EditorAutoSizeOption>, BindableDef<Microsoft.Maui.Controls.EditorAutoSizeOption>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.EditorAutoSizeOption>(mauiObject, Microsoft.Maui.Controls.Editor.AutoSizeProperty));
            if (def.ValueIsSet()) mauiObject.AutoSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes? fontAttributes)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.FontAttributes>(fontAttributes);
            if (fontAttributes != null) mauiObject.FontAttributes = mauiValue;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes? fontAttributes,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.FontAttributes>(fontAttributes);
            if (fontAttributes != null) mauiObject.FontAttributes = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Editor.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.FontAttributes>, BindableDef<Microsoft.Maui.Controls.FontAttributes>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Editor.FontAttributesProperty));
            if (def.ValueIsSet()) mauiObject.FontAttributes = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsTextPredictionEnabled<T>(this T obj,
            bool? isTextPredictionEnabled)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isTextPredictionEnabled);
            if (isTextPredictionEnabled != null) mauiObject.IsTextPredictionEnabled = mauiValue;
            return obj;
        }
        
        public static T IsTextPredictionEnabled<T>(this T obj,
            bool? isTextPredictionEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<bool>(isTextPredictionEnabled);
            if (isTextPredictionEnabled != null) mauiObject.IsTextPredictionEnabled = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Editor.IsTextPredictionEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsTextPredictionEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsTextPredictionEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Editor.IsTextPredictionEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsTextPredictionEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CursorPosition<T>(this T obj,
            int? cursorPosition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<int>(cursorPosition);
            if (cursorPosition != null) mauiObject.CursorPosition = mauiValue;
            return obj;
        }
        
        public static T CursorPosition<T>(this T obj,
            int? cursorPosition,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<int>(cursorPosition);
            if (cursorPosition != null) mauiObject.CursorPosition = mauiValue;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Editor.CursorPositionProperty));
            if (def.ValueIsSet()) mauiObject.CursorPosition = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CursorPosition<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Editor.CursorPositionProperty));
            if (def.ValueIsSet()) mauiObject.CursorPosition = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SelectionLength<T>(this T obj,
            int? selectionLength)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<int>(selectionLength);
            if (selectionLength != null) mauiObject.SelectionLength = mauiValue;
            return obj;
        }
        
        public static T SelectionLength<T>(this T obj,
            int? selectionLength,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<int>(selectionLength);
            if (selectionLength != null) mauiObject.SelectionLength = mauiValue;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Editor.SelectionLengthProperty));
            if (def.ValueIsSet()) mauiObject.SelectionLength = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SelectionLength<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.Editor.SelectionLengthProperty));
            if (def.ValueIsSet()) mauiObject.SelectionLength = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string? fontFamily)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<string>(fontFamily);
            if (fontFamily != null) mauiObject.FontFamily = mauiValue;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string? fontFamily,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<string>(fontFamily);
            if (fontFamily != null) mauiObject.FontFamily = mauiValue;
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Editor.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindableDef<string>, BindableDef<string>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<string>(mauiObject, Microsoft.Maui.Controls.Editor.FontFamilyProperty));
            if (def.ValueIsSet()) mauiObject.FontFamily = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double? fontSize)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<double>(fontSize);
            if (fontSize != null) mauiObject.FontSize = mauiValue;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double? fontSize,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<double>(fontSize);
            if (fontSize != null) mauiObject.FontSize = mauiValue;
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Editor.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindableDef<double>, BindableDef<double>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<double>(mauiObject, Microsoft.Maui.Controls.Editor.FontSizeProperty));
            if (def.ValueIsSet()) mauiObject.FontSize = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment? horizontalTextAlignment)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextAlignment>(horizontalTextAlignment);
            if (horizontalTextAlignment != null) mauiObject.HorizontalTextAlignment = mauiValue;
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment? horizontalTextAlignment,
            System.Func<BindableDef<Microsoft.Maui.TextAlignment>, BindableDef<Microsoft.Maui.TextAlignment>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextAlignment>(horizontalTextAlignment);
            if (horizontalTextAlignment != null) mauiObject.HorizontalTextAlignment = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Editor.HorizontalTextAlignmentProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalTextAlignment = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.TextAlignment>, BindableDef<Microsoft.Maui.TextAlignment>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Editor.HorizontalTextAlignmentProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalTextAlignment = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment? verticalTextAlignment)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextAlignment>(verticalTextAlignment);
            if (verticalTextAlignment != null) mauiObject.VerticalTextAlignment = mauiValue;
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment? verticalTextAlignment,
            System.Func<BindableDef<Microsoft.Maui.TextAlignment>, BindableDef<Microsoft.Maui.TextAlignment>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.TextAlignment>(verticalTextAlignment);
            if (verticalTextAlignment != null) mauiObject.VerticalTextAlignment = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Editor.VerticalTextAlignmentProperty));
            if (def.ValueIsSet()) mauiObject.VerticalTextAlignment = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.TextAlignment>, BindableDef<Microsoft.Maui.TextAlignment>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Editor.VerticalTextAlignmentProperty));
            if (def.ValueIsSet()) mauiObject.VerticalTextAlignment = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool? fontAutoScalingEnabled)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<bool>(fontAutoScalingEnabled);
            if (fontAutoScalingEnabled != null) mauiObject.FontAutoScalingEnabled = mauiValue;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool? fontAutoScalingEnabled,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var mauiValue = MauiWrapper.Value<bool>(fontAutoScalingEnabled);
            if (fontAutoScalingEnabled != null) mauiObject.FontAutoScalingEnabled = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Editor.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.Editor.FontAutoScalingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.FontAutoScalingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnCompleted<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IEditor
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Editor>(obj);
            mauiObject.Completed += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
