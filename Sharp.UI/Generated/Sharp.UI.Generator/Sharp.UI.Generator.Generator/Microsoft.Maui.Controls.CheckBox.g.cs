//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class CheckBoxGeneratedExtension
    {
        public static T Color<T>(this T obj,
            Microsoft.Maui.Graphics.Color color)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);
            mauiObject.Color = (Microsoft.Maui.Graphics.Color)color;
            return obj;
        }
        
        public static T Color<T>(this T obj,
            Microsoft.Maui.Graphics.Color color,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);         
            mauiObject.Color = (Microsoft.Maui.Graphics.Color)color;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.CheckBox.ColorProperty));
            if (def.ValueIsSet()) mauiObject.Color = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Color<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.CheckBox.ColorProperty));
            if (def.ValueIsSet()) mauiObject.Color = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsChecked<T>(this T obj,
            bool isChecked)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);
            mauiObject.IsChecked = (bool)isChecked;
            return obj;
        }
        
        public static T IsChecked<T>(this T obj,
            bool isChecked,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);         
            mauiObject.IsChecked = (bool)isChecked;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CheckBox.IsCheckedProperty));
            if (def.ValueIsSet()) mauiObject.IsChecked = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsChecked<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.CheckBox.IsCheckedProperty));
            if (def.ValueIsSet()) mauiObject.IsChecked = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnCheckedChanged<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.CheckedChangedEventArgs> handler)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);
            mauiObject.CheckedChanged += handler;
            return obj;
        }
        
        public static T OnCheckedChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ICheckBox
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.CheckBox>(obj);
            mauiObject.CheckedChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
