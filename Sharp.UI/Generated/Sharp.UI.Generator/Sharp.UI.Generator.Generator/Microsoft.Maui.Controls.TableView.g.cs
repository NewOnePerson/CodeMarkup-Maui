//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class TableViewGeneratedExtension
    {
        public static T HasUnevenRows<T>(this T obj,
            bool? hasUnevenRows)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (hasUnevenRows != null) mauiObject.HasUnevenRows = (bool)hasUnevenRows;
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            bool? hasUnevenRows,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);         
            if (hasUnevenRows != null) mauiObject.HasUnevenRows = (bool)hasUnevenRows;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.TableView.HasUnevenRowsProperty));
            if (def.ValueIsSet()) mauiObject.HasUnevenRows = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.TableView.HasUnevenRowsProperty));
            if (def.ValueIsSet()) mauiObject.HasUnevenRows = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Intent<T>(this T obj,
            Microsoft.Maui.Controls.TableIntent? intent)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (intent != null) mauiObject.Intent = (Microsoft.Maui.Controls.TableIntent)intent;
            return obj;
        }
        
        public static T Intent<T>(this T obj,
            Microsoft.Maui.Controls.TableIntent? intent,
            System.Func<ValueDef<Microsoft.Maui.Controls.TableIntent>, ValueDef<Microsoft.Maui.Controls.TableIntent>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (intent != null) mauiObject.Intent = (Microsoft.Maui.Controls.TableIntent)intent;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.TableIntent>());
            if (def.ValueIsSet()) mauiObject.Intent = def.GetValue();
            return obj;
        }
        
        public static T Intent<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Controls.TableIntent>, ValueDef<Microsoft.Maui.Controls.TableIntent>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.TableIntent>());
            if (def.ValueIsSet()) mauiObject.Intent = def.GetValue();
            return obj;
        }
        
        public static T Root<T>(this T obj,
            Microsoft.Maui.Controls.TableRoot? root)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (root != null) mauiObject.Root = (Microsoft.Maui.Controls.TableRoot)root;
            return obj;
        }
        
        public static T Root<T>(this T obj,
            Microsoft.Maui.Controls.TableRoot? root,
            System.Func<ValueDef<Microsoft.Maui.Controls.TableRoot>, ValueDef<Microsoft.Maui.Controls.TableRoot>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (root != null) mauiObject.Root = (Microsoft.Maui.Controls.TableRoot)root;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.TableRoot>());
            if (def.ValueIsSet()) mauiObject.Root = def.GetValue();
            return obj;
        }
        
        public static T Root<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Controls.TableRoot>, ValueDef<Microsoft.Maui.Controls.TableRoot>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.TableRoot>());
            if (def.ValueIsSet()) mauiObject.Root = def.GetValue();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            int? rowHeight)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (rowHeight != null) mauiObject.RowHeight = (int)rowHeight;
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            int? rowHeight,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);         
            if (rowHeight != null) mauiObject.RowHeight = (int)rowHeight;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.TableView.RowHeightProperty));
            if (def.ValueIsSet()) mauiObject.RowHeight = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.TableView.RowHeightProperty));
            if (def.ValueIsSet()) mauiObject.RowHeight = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Model<T>(this T obj,
            Microsoft.Maui.Controls.Internals.TableModel? model)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (model != null) mauiObject.Model = (Microsoft.Maui.Controls.Internals.TableModel)model;
            return obj;
        }
        
        public static T Model<T>(this T obj,
            Microsoft.Maui.Controls.Internals.TableModel? model,
            System.Func<ValueDef<Microsoft.Maui.Controls.Internals.TableModel>, ValueDef<Microsoft.Maui.Controls.Internals.TableModel>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            if (model != null) mauiObject.Model = (Microsoft.Maui.Controls.Internals.TableModel)model;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Internals.TableModel>());
            if (def.ValueIsSet()) mauiObject.Model = def.GetValue();
            return obj;
        }
        
        public static T Model<T>(this T obj,
            System.Func<ValueDef<Microsoft.Maui.Controls.Internals.TableModel>, ValueDef<Microsoft.Maui.Controls.Internals.TableModel>> definition)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Internals.TableModel>());
            if (def.ValueIsSet()) mauiObject.Model = def.GetValue();
            return obj;
        }
        
        public static T OnModelChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.ITableView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TableView>(obj);
            mauiObject.ModelChanged += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
