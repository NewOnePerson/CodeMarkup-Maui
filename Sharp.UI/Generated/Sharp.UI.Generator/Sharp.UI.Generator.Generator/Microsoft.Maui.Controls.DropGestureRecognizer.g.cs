//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class DropGestureRecognizerGeneratedExtension
    {
        public static T AllowDrop<T>(this T obj,
            bool? allowDrop)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<bool>(allowDrop);
            if (allowDrop != null) mauiObject.AllowDrop = mauiValue;
            return obj;
        }
        
        public static T AllowDrop<T>(this T obj,
            bool? allowDrop,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<bool>(allowDrop);
            if (allowDrop != null) mauiObject.AllowDrop = mauiValue;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.AllowDropProperty));
            if (def.ValueIsSet()) mauiObject.AllowDrop = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AllowDrop<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.AllowDropProperty));
            if (def.ValueIsSet()) mauiObject.AllowDrop = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Windows.Input.ICommand? dragOverCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dragOverCommand);
            if (dragOverCommand != null) mauiObject.DragOverCommand = mauiValue;
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Windows.Input.ICommand? dragOverCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dragOverCommand);
            if (dragOverCommand != null) mauiObject.DragOverCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            object? dragOverCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dragOverCommandParameter);
            if (dragOverCommandParameter != null) mauiObject.DragOverCommandParameter = mauiValue;
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            object? dragOverCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dragOverCommandParameter);
            if (dragOverCommandParameter != null) mauiObject.DragOverCommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Windows.Input.ICommand? dragLeaveCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dragLeaveCommand);
            if (dragLeaveCommand != null) mauiObject.DragLeaveCommand = mauiValue;
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Windows.Input.ICommand? dragLeaveCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dragLeaveCommand);
            if (dragLeaveCommand != null) mauiObject.DragLeaveCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            object? dragLeaveCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dragLeaveCommandParameter);
            if (dragLeaveCommandParameter != null) mauiObject.DragLeaveCommandParameter = mauiValue;
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            object? dragLeaveCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dragLeaveCommandParameter);
            if (dragLeaveCommandParameter != null) mauiObject.DragLeaveCommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Windows.Input.ICommand? dropCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dropCommand);
            if (dropCommand != null) mauiObject.DropCommand = mauiValue;
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Windows.Input.ICommand? dropCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand>(dropCommand);
            if (dropCommand != null) mauiObject.DropCommand = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandProperty));
            if (def.ValueIsSet()) mauiObject.DropCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandProperty));
            if (def.ValueIsSet()) mauiObject.DropCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            object? dropCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dropCommandParameter);
            if (dropCommandParameter != null) mauiObject.DropCommandParameter = mauiValue;
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            object? dropCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object>(dropCommandParameter);
            if (dropCommandParameter != null) mauiObject.DropCommandParameter = mauiValue;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DropCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DropCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnDragLeave<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.DragEventArgs> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeave += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnDragOver<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.DragEventArgs> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOver += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnDrop<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.DropEventArgs> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.Drop += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
