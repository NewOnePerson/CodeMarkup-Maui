//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class DropGestureRecognizerGeneratedExtension
    {
        public static T AllowDrop<T>(this T obj,
            bool allowDrop)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.AllowDrop = (bool)allowDrop;
            return obj;
        }
        
        public static T AllowDrop<T>(this T obj,
            bool allowDrop,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);         
            mauiObject.AllowDrop = (bool)allowDrop;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.AllowDropProperty));
            if (def.ValueIsSet()) mauiObject.AllowDrop = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T AllowDrop<T>(this T obj,
            System.Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.AllowDropProperty));
            if (def.ValueIsSet()) mauiObject.AllowDrop = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Windows.Input.ICommand dragOverCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOverCommand = (System.Windows.Input.ICommand)dragOverCommand;
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Windows.Input.ICommand dragOverCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);         
            mauiObject.DragOverCommand = (System.Windows.Input.ICommand)dragOverCommand;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            object dragOverCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOverCommandParameter = (object)dragOverCommandParameter;
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            object dragOverCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);         
            mauiObject.DragOverCommandParameter = (object)dragOverCommandParameter;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragOverCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Windows.Input.ICommand dragLeaveCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeaveCommand = (System.Windows.Input.ICommand)dragLeaveCommand;
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Windows.Input.ICommand dragLeaveCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);         
            mauiObject.DragLeaveCommand = (System.Windows.Input.ICommand)dragLeaveCommand;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            object dragLeaveCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeaveCommandParameter = (object)dragLeaveCommandParameter;
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            object dragLeaveCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);         
            mauiObject.DragLeaveCommandParameter = (object)dragLeaveCommandParameter;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DragLeaveCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Windows.Input.ICommand dropCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DropCommand = (System.Windows.Input.ICommand)dropCommand;
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Windows.Input.ICommand dropCommand,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);         
            mauiObject.DropCommand = (System.Windows.Input.ICommand)dropCommand;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandProperty));
            if (def.ValueIsSet()) mauiObject.DropCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandProperty));
            if (def.ValueIsSet()) mauiObject.DropCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            object dropCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DropCommandParameter = (object)dropCommandParameter;
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            object dropCommandParameter,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);         
            mauiObject.DropCommandParameter = (object)dropCommandParameter;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DropCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            System.Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.DropCommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnDragLeave<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DragEventArgs> handler)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeave += handler;
            return obj;
        }
        
        public static T OnDragLeave<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeave += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDragOver<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DragEventArgs> handler)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOver += handler;
            return obj;
        }
        
        public static T OnDragOver<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOver += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDrop<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DropEventArgs> handler)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.Drop += handler;
            return obj;
        }
        
        public static T OnDrop<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.Drop += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
