//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class DropGestureRecognizerGeneratedExtension
    {
        public static T AllowDrop<T>(this T obj,
            bool allowDrop)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.AllowDrop = (bool)allowDrop;
            return obj;
        }
        
        public static T AllowDrop<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.AllowDrop = builder.GetValue();
            return obj;
        }
        
        public static T AllowDrop<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.AllowDrop = builder.GetValue();
            return obj;
        }
        
        public static T AllowDrop<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.AllowDropProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Windows.Input.ICommand dragOverCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOverCommand = (System.Windows.Input.ICommand)dragOverCommand;
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DragOverCommand = builder.GetValue();
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DragOverCommand = builder.GetValue();
            return obj;
        }
        
        public static T DragOverCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            object dragOverCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOverCommandParameter = (object)dragOverCommandParameter;
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.DragOverCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.DragOverCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T DragOverCommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragOverCommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Windows.Input.ICommand dragLeaveCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeaveCommand = (System.Windows.Input.ICommand)dragLeaveCommand;
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DragLeaveCommand = builder.GetValue();
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DragLeaveCommand = builder.GetValue();
            return obj;
        }
        
        public static T DragLeaveCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            object dragLeaveCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeaveCommandParameter = (object)dragLeaveCommandParameter;
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.DragLeaveCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.DragLeaveCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T DragLeaveCommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DragLeaveCommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Windows.Input.ICommand dropCommand)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DropCommand = (System.Windows.Input.ICommand)dropCommand;
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DropCommand = builder.GetValue();
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.DropCommand = builder.GetValue();
            return obj;
        }
        
        public static T DropCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            object dropCommandParameter)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DropCommandParameter = (object)dropCommandParameter;
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.DropCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.DropCommandParameter = builder.GetValue();
            return obj;
        }
        
        public static T DropCommandParameter<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.DropGestureRecognizer.DropCommandParameterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnDragLeave<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DragEventArgs> handler)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeave += handler;
            return obj;
        }
        
        public static T OnDragLeave<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragLeave += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDragOver<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DragEventArgs> handler)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOver += handler;
            return obj;
        }
        
        public static T OnDragOver<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.DragOver += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnDrop<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.DropEventArgs> handler)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.Drop += handler;
            return obj;
        }
        
        public static T OnDrop<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IDropGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.DropGestureRecognizer>(obj);
            mauiObject.Drop += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
