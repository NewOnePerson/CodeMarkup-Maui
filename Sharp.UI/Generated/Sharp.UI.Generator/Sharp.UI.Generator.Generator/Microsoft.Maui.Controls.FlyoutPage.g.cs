//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class FlyoutPageGeneratedExtension
    {
        public static T Detail<T>(this T obj,
            Microsoft.Maui.Controls.Page? detail)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (detail != null) mauiObject.Detail = (Microsoft.Maui.Controls.Page)detail;
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            Microsoft.Maui.Controls.Page? detail,
            Func<ValueDef<Microsoft.Maui.Controls.Page>, ValueDef<Microsoft.Maui.Controls.Page>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (detail != null) mauiObject.Detail = (Microsoft.Maui.Controls.Page)detail;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Page>());
            if (def.ValueIsSet()) mauiObject.Detail = def.GetValue();
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            Func<ValueDef<Microsoft.Maui.Controls.Page>, ValueDef<Microsoft.Maui.Controls.Page>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Page>());
            if (def.ValueIsSet()) mauiObject.Detail = def.GetValue();
            return obj;
        }
        
        public static T IsGestureEnabled<T>(this T obj,
            bool? isGestureEnabled)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (isGestureEnabled != null) mauiObject.IsGestureEnabled = (bool)isGestureEnabled;
            return obj;
        }
        
        public static T IsGestureEnabled<T>(this T obj,
            bool? isGestureEnabled,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (isGestureEnabled != null) mauiObject.IsGestureEnabled = (bool)isGestureEnabled;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsGestureEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsGestureEnabled<T>(this T obj,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsGestureEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsPresented<T>(this T obj,
            bool? isPresented)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (isPresented != null) mauiObject.IsPresented = (bool)isPresented;
            return obj;
        }
        
        public static T IsPresented<T>(this T obj,
            bool? isPresented,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (isPresented != null) mauiObject.IsPresented = (bool)isPresented;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty));
            if (def.ValueIsSet()) mauiObject.IsPresented = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsPresented<T>(this T obj,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty));
            if (def.ValueIsSet()) mauiObject.IsPresented = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Flyout<T>(this T obj,
            Microsoft.Maui.Controls.Page? flyout)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (flyout != null) mauiObject.Flyout = (Microsoft.Maui.Controls.Page)flyout;
            return obj;
        }
        
        public static T Flyout<T>(this T obj,
            Microsoft.Maui.Controls.Page? flyout,
            Func<ValueDef<Microsoft.Maui.Controls.Page>, ValueDef<Microsoft.Maui.Controls.Page>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (flyout != null) mauiObject.Flyout = (Microsoft.Maui.Controls.Page)flyout;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Page>());
            if (def.ValueIsSet()) mauiObject.Flyout = def.GetValue();
            return obj;
        }
        
        public static T Flyout<T>(this T obj,
            Func<ValueDef<Microsoft.Maui.Controls.Page>, ValueDef<Microsoft.Maui.Controls.Page>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.Page>());
            if (def.ValueIsSet()) mauiObject.Flyout = def.GetValue();
            return obj;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T obj,
            Microsoft.Maui.Controls.FlyoutLayoutBehavior? flyoutLayoutBehavior)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (flyoutLayoutBehavior != null) mauiObject.FlyoutLayoutBehavior = (Microsoft.Maui.Controls.FlyoutLayoutBehavior)flyoutLayoutBehavior;
            return obj;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T obj,
            Microsoft.Maui.Controls.FlyoutLayoutBehavior? flyoutLayoutBehavior,
            Func<BindableDef<Microsoft.Maui.Controls.FlyoutLayoutBehavior>, BindableDef<Microsoft.Maui.Controls.FlyoutLayoutBehavior>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            if (flyoutLayoutBehavior != null) mauiObject.FlyoutLayoutBehavior = (Microsoft.Maui.Controls.FlyoutLayoutBehavior)flyoutLayoutBehavior;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FlyoutLayoutBehavior>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty));
            if (def.ValueIsSet()) mauiObject.FlyoutLayoutBehavior = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.FlyoutLayoutBehavior>, BindableDef<Microsoft.Maui.Controls.FlyoutLayoutBehavior>> definition)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.FlyoutLayoutBehavior>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty));
            if (def.ValueIsSet()) mauiObject.FlyoutLayoutBehavior = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnIsPresentedChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.IsPresentedChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnBackButtonPressed<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.BackButtonPressedEventArgs> action)
            where T : Sharp.UI.IFlyoutPage
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.BackButtonPressed += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
