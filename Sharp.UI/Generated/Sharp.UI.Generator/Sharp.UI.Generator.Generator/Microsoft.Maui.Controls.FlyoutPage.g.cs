//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class FlyoutPageGeneratedExtension
    {
        public static T Detail<T>(this T obj,
            Microsoft.Maui.Controls.Page detail)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.Detail = (Microsoft.Maui.Controls.Page)detail;
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Page>, ValueBuilder<Microsoft.Maui.Controls.Page>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Page>());
            if (builder.ValueIsSet()) mauiObject.Detail = builder.GetValue();
            return obj;
        }
        
        public static T Detail<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Page>, LazyValueBuilder<Microsoft.Maui.Controls.Page>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Page>());
            if (builder.ValueIsSet()) mauiObject.Detail = builder.GetValue();
            return obj;
        }
        
        public static T IsGestureEnabled<T>(this T obj,
            bool isGestureEnabled)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.IsGestureEnabled = (bool)isGestureEnabled;
            return obj;
        }
        
        public static T IsGestureEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsGestureEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsGestureEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsGestureEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsGestureEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsPresented<T>(this T obj,
            bool isPresented)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.IsPresented = (bool)isPresented;
            return obj;
        }
        
        public static T IsPresented<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsPresented = builder.GetValue();
            return obj;
        }
        
        public static T IsPresented<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsPresented = builder.GetValue();
            return obj;
        }
        
        public static T IsPresented<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Flyout<T>(this T obj,
            Microsoft.Maui.Controls.Page flyout)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.Flyout = (Microsoft.Maui.Controls.Page)flyout;
            return obj;
        }
        
        public static T Flyout<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.Page>, ValueBuilder<Microsoft.Maui.Controls.Page>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.Page>());
            if (builder.ValueIsSet()) mauiObject.Flyout = builder.GetValue();
            return obj;
        }
        
        public static T Flyout<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.Page>, LazyValueBuilder<Microsoft.Maui.Controls.Page>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.Page>());
            if (builder.ValueIsSet()) mauiObject.Flyout = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T obj,
            Microsoft.Maui.Controls.FlyoutLayoutBehavior flyoutLayoutBehavior)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.FlyoutLayoutBehavior = (Microsoft.Maui.Controls.FlyoutLayoutBehavior)flyoutLayoutBehavior;
            return obj;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>, ValueBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>());
            if (builder.ValueIsSet()) mauiObject.FlyoutLayoutBehavior = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>, LazyValueBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>> buildValue)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>());
            if (builder.ValueIsSet()) mauiObject.FlyoutLayoutBehavior = builder.GetValue();
            return obj;
        }
        
        public static T FlyoutLayoutBehavior<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>, BindingBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>> buildBinding)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FlyoutLayoutBehavior>(mauiObject, Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T OnIsPresentedChanged<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.IsPresentedChanged += handler;
            return obj;
        }
        
        public static T OnIsPresentedChanged<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.IsPresentedChanged += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnBackButtonPressed<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.BackButtonPressedEventArgs> handler)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.BackButtonPressed += handler;
            return obj;
        }
        
        public static T OnBackButtonPressed<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IFlyoutPage
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.FlyoutPage>(obj);
            mauiObject.BackButtonPressed += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
