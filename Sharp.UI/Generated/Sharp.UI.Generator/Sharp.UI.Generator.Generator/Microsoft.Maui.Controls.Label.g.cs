//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class LabelGeneratedExtension
    {
        public static T TextTransform<T>(this T obj,
            Microsoft.Maui.TextTransform textTransform)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.TextTransform = (Microsoft.Maui.TextTransform)textTransform;
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextTransform>, ValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) mauiObject.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextTransform>, LazyValueBuilder<Microsoft.Maui.TextTransform>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.TextTransform>());
            if (builder.ValueIsSet()) mauiObject.TextTransform = builder.GetValue();
            return obj;
        }
        
        public static T TextTransform<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextTransform>, BindingBuilder<Microsoft.Maui.TextTransform>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextTransform>(mauiObject, Microsoft.Maui.Controls.Label.TextTransformProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FormattedText<T>(this T obj,
            Microsoft.Maui.Controls.FormattedString formattedText)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.FormattedText = (Microsoft.Maui.Controls.FormattedString)formattedText;
            return obj;
        }
        
        public static T FormattedText<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FormattedString>, ValueBuilder<Microsoft.Maui.Controls.FormattedString>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FormattedString>());
            if (builder.ValueIsSet()) mauiObject.FormattedText = builder.GetValue();
            return obj;
        }
        
        public static T FormattedText<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.FormattedString>, LazyValueBuilder<Microsoft.Maui.Controls.FormattedString>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.FormattedString>());
            if (builder.ValueIsSet()) mauiObject.FormattedText = builder.GetValue();
            return obj;
        }
        
        public static T FormattedText<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FormattedString>, BindingBuilder<Microsoft.Maui.Controls.FormattedString>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FormattedString>(mauiObject, Microsoft.Maui.Controls.Label.FormattedTextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment horizontalTextAlignment)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.HorizontalTextAlignment = (Microsoft.Maui.TextAlignment)horizontalTextAlignment;
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.HorizontalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextAlignment>, LazyValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.HorizontalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Label.HorizontalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            Microsoft.Maui.LineBreakMode lineBreakMode)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.LineBreakMode = (Microsoft.Maui.LineBreakMode)lineBreakMode;
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.LineBreakMode>, ValueBuilder<Microsoft.Maui.LineBreakMode>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) mauiObject.LineBreakMode = builder.GetValue();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.LineBreakMode>, LazyValueBuilder<Microsoft.Maui.LineBreakMode>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.LineBreakMode>());
            if (builder.ValueIsSet()) mauiObject.LineBreakMode = builder.GetValue();
            return obj;
        }
        
        public static T LineBreakMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.LineBreakMode>, BindingBuilder<Microsoft.Maui.LineBreakMode>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.LineBreakMode>(mauiObject, Microsoft.Maui.Controls.Label.LineBreakModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            string text)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.Text = (string)text;
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.Text = builder.GetValue();
            return obj;
        }
        
        public static T Text<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Label.TextProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.TextColor = (Microsoft.Maui.Graphics.Color)textColor;
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.TextColor = builder.GetValue();
            return obj;
        }
        
        public static T TextColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.Label.TextColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            double characterSpacing)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.CharacterSpacing = (double)characterSpacing;
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.CharacterSpacing = builder.GetValue();
            return obj;
        }
        
        public static T CharacterSpacing<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Label.CharacterSpacingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            Microsoft.Maui.TextAlignment verticalTextAlignment)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.VerticalTextAlignment = (Microsoft.Maui.TextAlignment)verticalTextAlignment;
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextAlignment>, ValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.VerticalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextAlignment>, LazyValueBuilder<Microsoft.Maui.TextAlignment>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.TextAlignment>());
            if (builder.ValueIsSet()) mauiObject.VerticalTextAlignment = builder.GetValue();
            return obj;
        }
        
        public static T VerticalTextAlignment<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextAlignment>, BindingBuilder<Microsoft.Maui.TextAlignment>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextAlignment>(mauiObject, Microsoft.Maui.Controls.Label.VerticalTextAlignmentProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            Microsoft.Maui.Controls.FontAttributes fontAttributes)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.FontAttributes = (Microsoft.Maui.Controls.FontAttributes)fontAttributes;
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.FontAttributes>, ValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) mauiObject.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>, LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.FontAttributes>());
            if (builder.ValueIsSet()) mauiObject.FontAttributes = builder.GetValue();
            return obj;
        }
        
        public static T FontAttributes<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.FontAttributes>, BindingBuilder<Microsoft.Maui.Controls.FontAttributes>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.FontAttributes>(mauiObject, Microsoft.Maui.Controls.Label.FontAttributesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextDecorations<T>(this T obj,
            Microsoft.Maui.TextDecorations textDecorations)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.TextDecorations = (Microsoft.Maui.TextDecorations)textDecorations;
            return obj;
        }
        
        public static T TextDecorations<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextDecorations>, ValueBuilder<Microsoft.Maui.TextDecorations>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextDecorations>());
            if (builder.ValueIsSet()) mauiObject.TextDecorations = builder.GetValue();
            return obj;
        }
        
        public static T TextDecorations<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextDecorations>, LazyValueBuilder<Microsoft.Maui.TextDecorations>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.TextDecorations>());
            if (builder.ValueIsSet()) mauiObject.TextDecorations = builder.GetValue();
            return obj;
        }
        
        public static T TextDecorations<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextDecorations>, BindingBuilder<Microsoft.Maui.TextDecorations>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextDecorations>(mauiObject, Microsoft.Maui.Controls.Label.TextDecorationsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            string fontFamily)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.FontFamily = (string)fontFamily;
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.FontFamily = builder.GetValue();
            return obj;
        }
        
        public static T FontFamily<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, Microsoft.Maui.Controls.Label.FontFamilyProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            double fontSize)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.FontSize = (double)fontSize;
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.FontSize = builder.GetValue();
            return obj;
        }
        
        public static T FontSize<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Label.FontSizeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            bool fontAutoScalingEnabled)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.FontAutoScalingEnabled = (bool)fontAutoScalingEnabled;
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.FontAutoScalingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T FontAutoScalingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.Label.FontAutoScalingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T LineHeight<T>(this T obj,
            double lineHeight)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.LineHeight = (double)lineHeight;
            return obj;
        }
        
        public static T LineHeight<T>(this T obj,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.LineHeight = builder.GetValue();
            return obj;
        }
        
        public static T LineHeight<T>(this T obj,
            System.Func<LazyValueBuilder<double>, LazyValueBuilder<double>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<double>());
            if (builder.ValueIsSet()) mauiObject.LineHeight = builder.GetValue();
            return obj;
        }
        
        public static T LineHeight<T>(this T obj,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<double>(mauiObject, Microsoft.Maui.Controls.Label.LineHeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T MaxLines<T>(this T obj,
            int maxLines)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.MaxLines = (int)maxLines;
            return obj;
        }
        
        public static T MaxLines<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.MaxLines = builder.GetValue();
            return obj;
        }
        
        public static T MaxLines<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.MaxLines = builder.GetValue();
            return obj;
        }
        
        public static T MaxLines<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.Label.MaxLinesProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            Microsoft.Maui.Thickness padding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.Padding = (Microsoft.Maui.Thickness)padding;
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Thickness>, ValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Thickness>, LazyValueBuilder<Microsoft.Maui.Thickness>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Thickness>());
            if (builder.ValueIsSet()) mauiObject.Padding = builder.GetValue();
            return obj;
        }
        
        public static T Padding<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Thickness>, BindingBuilder<Microsoft.Maui.Thickness>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Thickness>(mauiObject, Microsoft.Maui.Controls.Label.PaddingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T TextType<T>(this T obj,
            Microsoft.Maui.TextType textType)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            mauiObject.TextType = (Microsoft.Maui.TextType)textType;
            return obj;
        }
        
        public static T TextType<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.TextType>, ValueBuilder<Microsoft.Maui.TextType>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.TextType>());
            if (builder.ValueIsSet()) mauiObject.TextType = builder.GetValue();
            return obj;
        }
        
        public static T TextType<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.TextType>, LazyValueBuilder<Microsoft.Maui.TextType>> buildValue)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.TextType>());
            if (builder.ValueIsSet()) mauiObject.TextType = builder.GetValue();
            return obj;
        }
        
        public static T TextType<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.TextType>, BindingBuilder<Microsoft.Maui.TextType>> buildBinding)
            where T : Sharp.UI.ILabel
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.Label>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.TextType>(mauiObject, Microsoft.Maui.Controls.Label.TextTypeProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
