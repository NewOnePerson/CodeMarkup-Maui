//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class TapGestureRecognizerGeneratedExtension
    {
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand? command)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand?>(command);
            if (command != null) mauiObject.Command = mauiValue;
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Windows.Input.ICommand? command,
            System.Func<BindableDef<System.Windows.Input.ICommand?>, BindableDef<System.Windows.Input.ICommand?>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<System.Windows.Input.ICommand?>(command);
            if (command != null) mauiObject.Command = mauiValue;
            var def = definition(new BindableDef<System.Windows.Input.ICommand?>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Command<T>(this T obj,
            System.Func<BindableDef<System.Windows.Input.ICommand?>, BindableDef<System.Windows.Input.ICommand?>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand?>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.CommandProperty));
            if (def.ValueIsSet()) mauiObject.Command = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object? commandParameter)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object?>(commandParameter);
            if (commandParameter != null) mauiObject.CommandParameter = mauiValue;
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            object? commandParameter,
            System.Func<BindableDef<object?>, BindableDef<object?>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<object?>(commandParameter);
            if (commandParameter != null) mauiObject.CommandParameter = mauiValue;
            var def = definition(new BindableDef<object?>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T CommandParameter<T>(this T obj,
            System.Func<BindableDef<object?>, BindableDef<object?>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var def = definition(new BindableDef<object?>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.CommandParameterProperty));
            if (def.ValueIsSet()) mauiObject.CommandParameter = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T NumberOfTapsRequired<T>(this T obj,
            int? numberOfTapsRequired)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<int>(numberOfTapsRequired);
            if (numberOfTapsRequired != null) mauiObject.NumberOfTapsRequired = mauiValue;
            return obj;
        }
        
        public static T NumberOfTapsRequired<T>(this T obj,
            int? numberOfTapsRequired,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<int>(numberOfTapsRequired);
            if (numberOfTapsRequired != null) mauiObject.NumberOfTapsRequired = mauiValue;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.NumberOfTapsRequiredProperty));
            if (def.ValueIsSet()) mauiObject.NumberOfTapsRequired = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T NumberOfTapsRequired<T>(this T obj,
            System.Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.NumberOfTapsRequiredProperty));
            if (def.ValueIsSet()) mauiObject.NumberOfTapsRequired = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Buttons<T>(this T obj,
            Microsoft.Maui.Controls.ButtonsMask? buttons)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.ButtonsMask>(buttons);
            if (buttons != null) mauiObject.Buttons = mauiValue;
            return obj;
        }
        
        public static T Buttons<T>(this T obj,
            Microsoft.Maui.Controls.ButtonsMask? buttons,
            System.Func<BindableDef<Microsoft.Maui.Controls.ButtonsMask>, BindableDef<Microsoft.Maui.Controls.ButtonsMask>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var mauiValue = MauiWrapper.Value<Microsoft.Maui.Controls.ButtonsMask>(buttons);
            if (buttons != null) mauiObject.Buttons = mauiValue;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ButtonsMask>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.ButtonsProperty));
            if (def.ValueIsSet()) mauiObject.Buttons = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Buttons<T>(this T obj,
            System.Func<BindableDef<Microsoft.Maui.Controls.ButtonsMask>, BindableDef<Microsoft.Maui.Controls.ButtonsMask>> definition)
            where T : Sharp.UI.ITapGestureRecognizer
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ButtonsMask>(mauiObject, Microsoft.Maui.Controls.TapGestureRecognizer.ButtonsProperty));
            if (def.ValueIsSet()) mauiObject.Buttons = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T OnTapped<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.TappedEventArgs> action)
            where T : Sharp.UI.ITapGestureRecognizer
        {            
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.TapGestureRecognizer>(obj);
            mauiObject.Tapped += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
