//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ListViewGeneratedExtension
    {
        public static T Footer<T>(this T obj,
            object footer)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Footer = (object)footer;
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Footer = builder.GetValue();
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Footer = builder.GetValue();
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.ListView.FooterProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate footerTemplate)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.FooterTemplate = (Microsoft.Maui.Controls.DataTemplate)footerTemplate;
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FooterTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.FooterTemplate = builder.GetValue();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.FooterTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.FooterTemplate = new Microsoft.Maui.Controls.DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T GroupDisplayBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase groupDisplayBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.GroupDisplayBinding = (Microsoft.Maui.Controls.BindingBase)groupDisplayBinding;
            return obj;
        }
        
        public static T GroupDisplayBinding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.BindingBase>, ValueBuilder<Microsoft.Maui.Controls.BindingBase>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) mauiObject.GroupDisplayBinding = builder.GetValue();
            return obj;
        }
        
        public static T GroupDisplayBinding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>, LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) mauiObject.GroupDisplayBinding = builder.GetValue();
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate groupHeaderTemplate)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.GroupHeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)groupHeaderTemplate;
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.GroupHeaderTemplate = builder.GetValue();
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.GroupHeaderTemplate = builder.GetValue();
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.GroupHeaderTemplate = new Microsoft.Maui.Controls.DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T GroupShortNameBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase groupShortNameBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.GroupShortNameBinding = (Microsoft.Maui.Controls.BindingBase)groupShortNameBinding;
            return obj;
        }
        
        public static T GroupShortNameBinding<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.BindingBase>, ValueBuilder<Microsoft.Maui.Controls.BindingBase>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) mauiObject.GroupShortNameBinding = builder.GetValue();
            return obj;
        }
        
        public static T GroupShortNameBinding<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>, LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.BindingBase>());
            if (builder.ValueIsSet()) mauiObject.GroupShortNameBinding = builder.GetValue();
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            bool hasUnevenRows)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.HasUnevenRows = (bool)hasUnevenRows;
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.HasUnevenRows = builder.GetValue();
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.HasUnevenRows = builder.GetValue();
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T Header<T>(this T obj,
            object header)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Header = (object)header;
            return obj;
        }
        
        public static T Header<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Header = builder.GetValue();
            return obj;
        }
        
        public static T Header<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.Header = builder.GetValue();
            return obj;
        }
        
        public static T Header<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.ListView.HeaderProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate headerTemplate)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.HeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)headerTemplate;
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.DataTemplate>, ValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.HeaderTemplate = builder.GetValue();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>, LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.DataTemplate>());
            if (builder.ValueIsSet()) mauiObject.HeaderTemplate = builder.GetValue();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.DataTemplate>, BindingBuilder<Microsoft.Maui.Controls.DataTemplate>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.HeaderTemplateProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj, System.Func<object> loadTemplate) where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.HeaderTemplate = new Microsoft.Maui.Controls.DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T IsGroupingEnabled<T>(this T obj,
            bool isGroupingEnabled)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.IsGroupingEnabled = (bool)isGroupingEnabled;
            return obj;
        }
        
        public static T IsGroupingEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsGroupingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsGroupingEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsGroupingEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsGroupingEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T obj,
            bool isPullToRefreshEnabled)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.IsPullToRefreshEnabled = (bool)isPullToRefreshEnabled;
            return obj;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsPullToRefreshEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsPullToRefreshEnabled = builder.GetValue();
            return obj;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            bool isRefreshing)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.IsRefreshing = (bool)isRefreshing;
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsRefreshing = builder.GetValue();
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.IsRefreshing = builder.GetValue();
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            System.Func<BindingBuilder<bool>, BindingBuilder<bool>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsRefreshingProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RefreshCommand<T>(this T obj,
            System.Windows.Input.ICommand refreshCommand)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.RefreshCommand = (System.Windows.Input.ICommand)refreshCommand;
            return obj;
        }
        
        public static T RefreshCommand<T>(this T obj,
            System.Func<ValueBuilder<System.Windows.Input.ICommand>, ValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.RefreshCommand = builder.GetValue();
            return obj;
        }
        
        public static T RefreshCommand<T>(this T obj,
            System.Func<LazyValueBuilder<System.Windows.Input.ICommand>, LazyValueBuilder<System.Windows.Input.ICommand>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<System.Windows.Input.ICommand>());
            if (builder.ValueIsSet()) mauiObject.RefreshCommand = builder.GetValue();
            return obj;
        }
        
        public static T RefreshCommand<T>(this T obj,
            System.Func<BindingBuilder<System.Windows.Input.ICommand>, BindingBuilder<System.Windows.Input.ICommand>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.ListView.RefreshCommandProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            int rowHeight)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.RowHeight = (int)rowHeight;
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.RowHeight = builder.GetValue();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            System.Func<LazyValueBuilder<int>, LazyValueBuilder<int>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<int>());
            if (builder.ValueIsSet()) mauiObject.RowHeight = builder.GetValue();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<int>(mauiObject, Microsoft.Maui.Controls.ListView.RowHeightProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            object selectedItem)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.SelectedItem = (object)selectedItem;
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<ValueBuilder<object>, ValueBuilder<object>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.SelectedItem = builder.GetValue();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<LazyValueBuilder<object>, LazyValueBuilder<object>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<object>());
            if (builder.ValueIsSet()) mauiObject.SelectedItem = builder.GetValue();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            System.Func<BindingBuilder<object>, BindingBuilder<object>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<object>(mauiObject, Microsoft.Maui.Controls.ListView.SelectedItemProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            Microsoft.Maui.Controls.ListViewSelectionMode selectionMode)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.SelectionMode = (Microsoft.Maui.Controls.ListViewSelectionMode)selectionMode;
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>, ValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>());
            if (builder.ValueIsSet()) mauiObject.SelectionMode = builder.GetValue();
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>, LazyValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>());
            if (builder.ValueIsSet()) mauiObject.SelectionMode = builder.GetValue();
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>, BindingBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.ListViewSelectionMode>(mauiObject, Microsoft.Maui.Controls.ListView.SelectionModeProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SeparatorColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color separatorColor)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.SeparatorColor = (Microsoft.Maui.Graphics.Color)separatorColor;
            return obj;
        }
        
        public static T SeparatorColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.SeparatorColor = builder.GetValue();
            return obj;
        }
        
        public static T SeparatorColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.SeparatorColor = builder.GetValue();
            return obj;
        }
        
        public static T SeparatorColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.ListView.SeparatorColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RefreshControlColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color refreshControlColor)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.RefreshControlColor = (Microsoft.Maui.Graphics.Color)refreshControlColor;
            return obj;
        }
        
        public static T RefreshControlColor<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Graphics.Color>, ValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.RefreshControlColor = builder.GetValue();
            return obj;
        }
        
        public static T RefreshControlColor<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Graphics.Color>, LazyValueBuilder<Microsoft.Maui.Graphics.Color>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Graphics.Color>());
            if (builder.ValueIsSet()) mauiObject.RefreshControlColor = builder.GetValue();
            return obj;
        }
        
        public static T RefreshControlColor<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Graphics.Color>, BindingBuilder<Microsoft.Maui.Graphics.Color>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.ListView.RefreshControlColorProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T SeparatorVisibility<T>(this T obj,
            Microsoft.Maui.Controls.SeparatorVisibility separatorVisibility)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.SeparatorVisibility = (Microsoft.Maui.Controls.SeparatorVisibility)separatorVisibility;
            return obj;
        }
        
        public static T SeparatorVisibility<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>, ValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>());
            if (builder.ValueIsSet()) mauiObject.SeparatorVisibility = builder.GetValue();
            return obj;
        }
        
        public static T SeparatorVisibility<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>, LazyValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.Controls.SeparatorVisibility>());
            if (builder.ValueIsSet()) mauiObject.SeparatorVisibility = builder.GetValue();
            return obj;
        }
        
        public static T SeparatorVisibility<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.Controls.SeparatorVisibility>, BindingBuilder<Microsoft.Maui.Controls.SeparatorVisibility>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.Controls.SeparatorVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.HorizontalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)horizontalScrollBarVisibility;
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.ScrollBarVisibility>, LazyValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.VerticalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)verticalScrollBarVisibility;
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<ValueBuilder<Microsoft.Maui.ScrollBarVisibility>, ValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<LazyValueBuilder<Microsoft.Maui.ScrollBarVisibility>, LazyValueBuilder<Microsoft.Maui.ScrollBarVisibility>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<Microsoft.Maui.ScrollBarVisibility>());
            if (builder.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = builder.GetValue();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            System.Func<BindingBuilder<Microsoft.Maui.ScrollBarVisibility>, BindingBuilder<Microsoft.Maui.ScrollBarVisibility>> buildBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildBinding(new BindingBuilder<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T RefreshAllowed<T>(this T obj,
            bool refreshAllowed)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.RefreshAllowed = (bool)refreshAllowed;
            return obj;
        }
        
        public static T RefreshAllowed<T>(this T obj,
            System.Func<ValueBuilder<bool>, ValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new ValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.RefreshAllowed = builder.GetValue();
            return obj;
        }
        
        public static T RefreshAllowed<T>(this T obj,
            System.Func<LazyValueBuilder<bool>, LazyValueBuilder<bool>> buildValue)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            var builder = buildValue(new LazyValueBuilder<bool>());
            if (builder.ValueIsSet()) mauiObject.RefreshAllowed = builder.GetValue();
            return obj;
        }
        
        public static T OnItemAppearing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ItemVisibilityEventArgs> handler)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemAppearing += handler;
            return obj;
        }
        
        public static T OnItemAppearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemAppearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnItemDisappearing<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ItemVisibilityEventArgs> handler)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemDisappearing += handler;
            return obj;
        }
        
        public static T OnItemDisappearing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemDisappearing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnItemSelected<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.SelectedItemChangedEventArgs> handler)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemSelected += handler;
            return obj;
        }
        
        public static T OnItemSelected<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemSelected += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnItemTapped<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ItemTappedEventArgs> handler)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemTapped += handler;
            return obj;
        }
        
        public static T OnItemTapped<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemTapped += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ScrolledEventArgs> handler)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Scrolled += handler;
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Scrolled += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnRefreshing<T>(this T obj, System.EventHandler handler)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Refreshing += handler;
            return obj;
        }
        
        public static T OnRefreshing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Refreshing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, System.EventHandler<Microsoft.Maui.Controls.ScrollToRequestedEventArgs> handler)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ScrollToRequested += handler;
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.Value<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ScrollToRequested += (o, arg) => action(obj);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
