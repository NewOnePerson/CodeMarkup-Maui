//
// <auto-generated>
//

#pragma warning disable CS8669


namespace Sharp.UI
{
    public static class ListViewGeneratedExtension
    {
        public static T Footer<T>(this T obj,
            object? footer)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (footer != null) mauiObject.Footer = (object)footer;
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            object? footer,
            Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (footer != null) mauiObject.Footer = (object)footer;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.ListView.FooterProperty));
            if (def.ValueIsSet()) mauiObject.Footer = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Footer<T>(this T obj,
            Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.ListView.FooterProperty));
            if (def.ValueIsSet()) mauiObject.Footer = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? footerTemplate)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (footerTemplate != null) mauiObject.FooterTemplate = (Microsoft.Maui.Controls.DataTemplate)footerTemplate;
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? footerTemplate,
            Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (footerTemplate != null) mauiObject.FooterTemplate = (Microsoft.Maui.Controls.DataTemplate)footerTemplate;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.FooterTemplateProperty));
            if (def.ValueIsSet()) mauiObject.FooterTemplate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.FooterTemplateProperty));
            if (def.ValueIsSet()) mauiObject.FooterTemplate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T FooterTemplate<T>(this T obj, Func<object> loadTemplate) where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.FooterTemplate = new Microsoft.Maui.Controls.DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T GroupDisplayBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase? groupDisplayBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (groupDisplayBinding != null) mauiObject.GroupDisplayBinding = (Microsoft.Maui.Controls.BindingBase)groupDisplayBinding;
            return obj;
        }
        
        public static T GroupDisplayBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase? groupDisplayBinding,
            Func<ValueDef<Microsoft.Maui.Controls.BindingBase>, ValueDef<Microsoft.Maui.Controls.BindingBase>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (groupDisplayBinding != null) mauiObject.GroupDisplayBinding = (Microsoft.Maui.Controls.BindingBase)groupDisplayBinding;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.BindingBase>());
            if (def.ValueIsSet()) mauiObject.GroupDisplayBinding = def.GetValue();
            return obj;
        }
        
        public static T GroupDisplayBinding<T>(this T obj,
            Func<ValueDef<Microsoft.Maui.Controls.BindingBase>, ValueDef<Microsoft.Maui.Controls.BindingBase>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.BindingBase>());
            if (def.ValueIsSet()) mauiObject.GroupDisplayBinding = def.GetValue();
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? groupHeaderTemplate)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (groupHeaderTemplate != null) mauiObject.GroupHeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)groupHeaderTemplate;
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? groupHeaderTemplate,
            Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (groupHeaderTemplate != null) mauiObject.GroupHeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)groupHeaderTemplate;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty));
            if (def.ValueIsSet()) mauiObject.GroupHeaderTemplate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty));
            if (def.ValueIsSet()) mauiObject.GroupHeaderTemplate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T GroupHeaderTemplate<T>(this T obj, Func<object> loadTemplate) where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.GroupHeaderTemplate = new Microsoft.Maui.Controls.DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T GroupShortNameBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase? groupShortNameBinding)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (groupShortNameBinding != null) mauiObject.GroupShortNameBinding = (Microsoft.Maui.Controls.BindingBase)groupShortNameBinding;
            return obj;
        }
        
        public static T GroupShortNameBinding<T>(this T obj,
            Microsoft.Maui.Controls.BindingBase? groupShortNameBinding,
            Func<ValueDef<Microsoft.Maui.Controls.BindingBase>, ValueDef<Microsoft.Maui.Controls.BindingBase>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (groupShortNameBinding != null) mauiObject.GroupShortNameBinding = (Microsoft.Maui.Controls.BindingBase)groupShortNameBinding;
            var def = definition(new ValueDef<Microsoft.Maui.Controls.BindingBase>());
            if (def.ValueIsSet()) mauiObject.GroupShortNameBinding = def.GetValue();
            return obj;
        }
        
        public static T GroupShortNameBinding<T>(this T obj,
            Func<ValueDef<Microsoft.Maui.Controls.BindingBase>, ValueDef<Microsoft.Maui.Controls.BindingBase>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new ValueDef<Microsoft.Maui.Controls.BindingBase>());
            if (def.ValueIsSet()) mauiObject.GroupShortNameBinding = def.GetValue();
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            bool? hasUnevenRows)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (hasUnevenRows != null) mauiObject.HasUnevenRows = (bool)hasUnevenRows;
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            bool? hasUnevenRows,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (hasUnevenRows != null) mauiObject.HasUnevenRows = (bool)hasUnevenRows;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty));
            if (def.ValueIsSet()) mauiObject.HasUnevenRows = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HasUnevenRows<T>(this T obj,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty));
            if (def.ValueIsSet()) mauiObject.HasUnevenRows = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Header<T>(this T obj,
            object? header)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (header != null) mauiObject.Header = (object)header;
            return obj;
        }
        
        public static T Header<T>(this T obj,
            object? header,
            Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (header != null) mauiObject.Header = (object)header;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.ListView.HeaderProperty));
            if (def.ValueIsSet()) mauiObject.Header = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T Header<T>(this T obj,
            Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.ListView.HeaderProperty));
            if (def.ValueIsSet()) mauiObject.Header = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? headerTemplate)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (headerTemplate != null) mauiObject.HeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)headerTemplate;
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            Microsoft.Maui.Controls.DataTemplate? headerTemplate,
            Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (headerTemplate != null) mauiObject.HeaderTemplate = (Microsoft.Maui.Controls.DataTemplate)headerTemplate;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.HeaderTemplateProperty));
            if (def.ValueIsSet()) mauiObject.HeaderTemplate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.DataTemplate>, BindableDef<Microsoft.Maui.Controls.DataTemplate>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.DataTemplate>(mauiObject, Microsoft.Maui.Controls.ListView.HeaderTemplateProperty));
            if (def.ValueIsSet()) mauiObject.HeaderTemplate = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HeaderTemplate<T>(this T obj, Func<object> loadTemplate) where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.HeaderTemplate = new Microsoft.Maui.Controls.DataTemplate(loadTemplate);
            return obj;
        }
        
        public static T IsGroupingEnabled<T>(this T obj,
            bool? isGroupingEnabled)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (isGroupingEnabled != null) mauiObject.IsGroupingEnabled = (bool)isGroupingEnabled;
            return obj;
        }
        
        public static T IsGroupingEnabled<T>(this T obj,
            bool? isGroupingEnabled,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (isGroupingEnabled != null) mauiObject.IsGroupingEnabled = (bool)isGroupingEnabled;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsGroupingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsGroupingEnabled<T>(this T obj,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsGroupingEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T obj,
            bool? isPullToRefreshEnabled)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (isPullToRefreshEnabled != null) mauiObject.IsPullToRefreshEnabled = (bool)isPullToRefreshEnabled;
            return obj;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T obj,
            bool? isPullToRefreshEnabled,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (isPullToRefreshEnabled != null) mauiObject.IsPullToRefreshEnabled = (bool)isPullToRefreshEnabled;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsPullToRefreshEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsPullToRefreshEnabled<T>(this T obj,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty));
            if (def.ValueIsSet()) mauiObject.IsPullToRefreshEnabled = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            bool? isRefreshing)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (isRefreshing != null) mauiObject.IsRefreshing = (bool)isRefreshing;
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            bool? isRefreshing,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (isRefreshing != null) mauiObject.IsRefreshing = (bool)isRefreshing;
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsRefreshingProperty));
            if (def.ValueIsSet()) mauiObject.IsRefreshing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T IsRefreshing<T>(this T obj,
            Func<BindableDef<bool>, BindableDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<bool>(mauiObject, Microsoft.Maui.Controls.ListView.IsRefreshingProperty));
            if (def.ValueIsSet()) mauiObject.IsRefreshing = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RefreshCommand<T>(this T obj,
            System.Windows.Input.ICommand? refreshCommand)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (refreshCommand != null) mauiObject.RefreshCommand = (System.Windows.Input.ICommand)refreshCommand;
            return obj;
        }
        
        public static T RefreshCommand<T>(this T obj,
            System.Windows.Input.ICommand? refreshCommand,
            Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (refreshCommand != null) mauiObject.RefreshCommand = (System.Windows.Input.ICommand)refreshCommand;
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.ListView.RefreshCommandProperty));
            if (def.ValueIsSet()) mauiObject.RefreshCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RefreshCommand<T>(this T obj,
            Func<BindableDef<System.Windows.Input.ICommand>, BindableDef<System.Windows.Input.ICommand>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<System.Windows.Input.ICommand>(mauiObject, Microsoft.Maui.Controls.ListView.RefreshCommandProperty));
            if (def.ValueIsSet()) mauiObject.RefreshCommand = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            int? rowHeight)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (rowHeight != null) mauiObject.RowHeight = (int)rowHeight;
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            int? rowHeight,
            Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (rowHeight != null) mauiObject.RowHeight = (int)rowHeight;
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.ListView.RowHeightProperty));
            if (def.ValueIsSet()) mauiObject.RowHeight = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RowHeight<T>(this T obj,
            Func<BindableDef<int>, BindableDef<int>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<int>(mauiObject, Microsoft.Maui.Controls.ListView.RowHeightProperty));
            if (def.ValueIsSet()) mauiObject.RowHeight = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            object? selectedItem)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (selectedItem != null) mauiObject.SelectedItem = (object)selectedItem;
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            object? selectedItem,
            Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (selectedItem != null) mauiObject.SelectedItem = (object)selectedItem;
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.ListView.SelectedItemProperty));
            if (def.ValueIsSet()) mauiObject.SelectedItem = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SelectedItem<T>(this T obj,
            Func<BindableDef<object>, BindableDef<object>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<object>(mauiObject, Microsoft.Maui.Controls.ListView.SelectedItemProperty));
            if (def.ValueIsSet()) mauiObject.SelectedItem = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            Microsoft.Maui.Controls.ListViewSelectionMode? selectionMode)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (selectionMode != null) mauiObject.SelectionMode = (Microsoft.Maui.Controls.ListViewSelectionMode)selectionMode;
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            Microsoft.Maui.Controls.ListViewSelectionMode? selectionMode,
            Func<BindableDef<Microsoft.Maui.Controls.ListViewSelectionMode>, BindableDef<Microsoft.Maui.Controls.ListViewSelectionMode>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (selectionMode != null) mauiObject.SelectionMode = (Microsoft.Maui.Controls.ListViewSelectionMode)selectionMode;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ListViewSelectionMode>(mauiObject, Microsoft.Maui.Controls.ListView.SelectionModeProperty));
            if (def.ValueIsSet()) mauiObject.SelectionMode = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SelectionMode<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.ListViewSelectionMode>, BindableDef<Microsoft.Maui.Controls.ListViewSelectionMode>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.ListViewSelectionMode>(mauiObject, Microsoft.Maui.Controls.ListView.SelectionModeProperty));
            if (def.ValueIsSet()) mauiObject.SelectionMode = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SeparatorColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? separatorColor)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (separatorColor != null) mauiObject.SeparatorColor = (Microsoft.Maui.Graphics.Color)separatorColor;
            return obj;
        }
        
        public static T SeparatorColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? separatorColor,
            Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (separatorColor != null) mauiObject.SeparatorColor = (Microsoft.Maui.Graphics.Color)separatorColor;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.ListView.SeparatorColorProperty));
            if (def.ValueIsSet()) mauiObject.SeparatorColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SeparatorColor<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.ListView.SeparatorColorProperty));
            if (def.ValueIsSet()) mauiObject.SeparatorColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RefreshControlColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? refreshControlColor)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (refreshControlColor != null) mauiObject.RefreshControlColor = (Microsoft.Maui.Graphics.Color)refreshControlColor;
            return obj;
        }
        
        public static T RefreshControlColor<T>(this T obj,
            Microsoft.Maui.Graphics.Color? refreshControlColor,
            Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (refreshControlColor != null) mauiObject.RefreshControlColor = (Microsoft.Maui.Graphics.Color)refreshControlColor;
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.ListView.RefreshControlColorProperty));
            if (def.ValueIsSet()) mauiObject.RefreshControlColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RefreshControlColor<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Graphics.Color>, BindableDef<Microsoft.Maui.Graphics.Color>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Graphics.Color>(mauiObject, Microsoft.Maui.Controls.ListView.RefreshControlColorProperty));
            if (def.ValueIsSet()) mauiObject.RefreshControlColor = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SeparatorVisibility<T>(this T obj,
            Microsoft.Maui.Controls.SeparatorVisibility? separatorVisibility)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (separatorVisibility != null) mauiObject.SeparatorVisibility = (Microsoft.Maui.Controls.SeparatorVisibility)separatorVisibility;
            return obj;
        }
        
        public static T SeparatorVisibility<T>(this T obj,
            Microsoft.Maui.Controls.SeparatorVisibility? separatorVisibility,
            Func<BindableDef<Microsoft.Maui.Controls.SeparatorVisibility>, BindableDef<Microsoft.Maui.Controls.SeparatorVisibility>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (separatorVisibility != null) mauiObject.SeparatorVisibility = (Microsoft.Maui.Controls.SeparatorVisibility)separatorVisibility;
            var def = definition(new BindableDef<Microsoft.Maui.Controls.SeparatorVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.SeparatorVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T SeparatorVisibility<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.Controls.SeparatorVisibility>, BindableDef<Microsoft.Maui.Controls.SeparatorVisibility>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.Controls.SeparatorVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.SeparatorVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? horizontalScrollBarVisibility)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (horizontalScrollBarVisibility != null) mauiObject.HorizontalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)horizontalScrollBarVisibility;
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? horizontalScrollBarVisibility,
            Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (horizontalScrollBarVisibility != null) mauiObject.HorizontalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)horizontalScrollBarVisibility;
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T HorizontalScrollBarVisibility<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.HorizontalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? verticalScrollBarVisibility)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (verticalScrollBarVisibility != null) mauiObject.VerticalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)verticalScrollBarVisibility;
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Microsoft.Maui.ScrollBarVisibility? verticalScrollBarVisibility,
            Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (verticalScrollBarVisibility != null) mauiObject.VerticalScrollBarVisibility = (Microsoft.Maui.ScrollBarVisibility)verticalScrollBarVisibility;
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T VerticalScrollBarVisibility<T>(this T obj,
            Func<BindableDef<Microsoft.Maui.ScrollBarVisibility>, BindableDef<Microsoft.Maui.ScrollBarVisibility>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new BindableDef<Microsoft.Maui.ScrollBarVisibility>(mauiObject, Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty));
            if (def.ValueIsSet()) mauiObject.VerticalScrollBarVisibility = def.GetValue();
            def.BindProperty();
            return obj;
        }
        
        public static T RefreshAllowed<T>(this T obj,
            bool? refreshAllowed)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (refreshAllowed != null) mauiObject.RefreshAllowed = (bool)refreshAllowed;
            return obj;
        }
        
        public static T RefreshAllowed<T>(this T obj,
            bool? refreshAllowed,
            Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            if (refreshAllowed != null) mauiObject.RefreshAllowed = (bool)refreshAllowed;
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.RefreshAllowed = def.GetValue();
            return obj;
        }
        
        public static T RefreshAllowed<T>(this T obj,
            Func<ValueDef<bool>, ValueDef<bool>> definition)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            var def = definition(new ValueDef<bool>());
            if (def.ValueIsSet()) mauiObject.RefreshAllowed = def.GetValue();
            return obj;
        }
        
        public static T OnItemAppearing<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ItemVisibilityEventArgs> action)
            where T : Sharp.UI.IListView
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemAppearing += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnItemDisappearing<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ItemVisibilityEventArgs> action)
            where T : Sharp.UI.IListView
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemDisappearing += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnItemSelected<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.SelectedItemChangedEventArgs> action)
            where T : Sharp.UI.IListView
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemSelected += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnItemTapped<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ItemTappedEventArgs> action)
            where T : Sharp.UI.IListView
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ItemTapped += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnScrolled<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ScrolledEventArgs> action)
            where T : Sharp.UI.IListView
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Scrolled += (o, arg) => action(obj, arg);
            return obj;
        }
        
        public static T OnRefreshing<T>(this T obj, OnEventAction<T> action)
            where T : Sharp.UI.IListView
        {
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.Refreshing += (o, arg) => action(obj);
            return obj;
        }
        
        public static T OnScrollToRequested<T>(this T obj, OnEventAction<T, Microsoft.Maui.Controls.ScrollToRequestedEventArgs> action)
            where T : Sharp.UI.IListView
        {            
            var mauiObject = MauiWrapper.GetObject<Microsoft.Maui.Controls.ListView>(obj);
            mauiObject.ScrollToRequested += (o, arg) => action(obj, arg);
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
